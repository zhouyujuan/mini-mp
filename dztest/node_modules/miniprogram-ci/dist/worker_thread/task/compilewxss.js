"use strict";const path=require("path"),PostCss=require("postcss"),autoprefixer=require("autoprefixer"),cssnano=require("cssnano"),locales=require("../../utils/locales/locales"),tools_1=require("../../utils/tools"),config_1=require("../../config"),log=require("../../utils/log"),wxssBrowser=["iOS >= 8","Chrome >= 37"];async function compileWXSS(r){const{code:e,filePath:o,projectPath:s,setting:t={},root:i=""}=r,c=Buffer.from(e),n=tools_1.bufferToUtf8String(c),{minify:l,minifyWXSS:a,autoPrefixWXSS:u}=t,f=path.posix.join(i,o),p=l&&!1!==a||a;if(void 0===n)return{error:{code:config_1.FILE_NOT_UTF8,path:f,message:locales.config.FILE_NOT_UTF8.format(f)}};if(p||u)try{const r=[];u&&r.push(autoprefixer({browsers:wxssBrowser,remove:!1})),p&&r.push(cssnano({preset:["default",{reduceTransforms:!1,calc:!1,minifySelectors:!1,normalizeUrl:!1}]}));return{error:null,code:(await PostCss(r).process(n,{from:tools_1.leading(o,"/")})).css.replace(/\r\n/g,"\n")}}catch(r){return log.error("postcss error @ "+f),log.error(r),{error:{code:config_1.POST_WXSS_ERR,path:f,message:r.message}}}return{error:null,code:n.replace(/\r\n/g,"\n")}}module.exports=compileWXSS;