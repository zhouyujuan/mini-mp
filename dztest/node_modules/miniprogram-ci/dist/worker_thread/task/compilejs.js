"use strict";const fs=require("fs"),path=require("path"),locales=require("../../utils/locales/locales"),tools_1=require("../../utils/tools"),config_1=require("../../config"),call_func_1=require("./call_func"),sourcemap=()=>require("source-map"),enhanceCompile=()=>require("../../js/enhance"),es6Compile=()=>require("../../js/es6_transform"),minifyJS=()=>require("../../js/minifyjs"),minifyJSAfterWrap=()=>require("../../js/minifyjs_after_wrap"),log=require("../../utils/log"),babel_helper_1=require("../../utils/babel_helper"),jsonParse_1=require("../../utils/jsonParse"),MAX_CODE_LENGTH=512e3;async function tryGetInputSourceMap(e,r){try{const s=/\/\/[#|@] sourceMappingURL=[\s]*(\S*)[\s]*$/m.exec(e),o=path.posix.dirname(r),t=path.posix.basename(r);let i;if(s&&s[1])if(/\.js\.map$/.test(s[1]))i=await call_func_1.call("readFileAsync",path.posix.join(o,s[1]),"utf-8");else{const e=s[1].split("base64,")[1];i=Buffer.from(e,"base64").toString()}else{const e=path.posix.join(o,t+".map");fs.existsSync(e)&&(i=await call_func_1.call("readFileAsync",e,"utf-8"))}if(i){const e=jsonParse_1.jsonParse(i);new(require("source-map").SourceMapConsumer)(e);return await insertSourcesContent(e,r),e}}catch(e){log.log(`try to get input sourcemap of ${r} catch error ${e}`)}}const insertSourcesContent=async(e,r)=>{if(Array.isArray(e.sources)&&!Array.isArray(e.sourcesContent)){const s=e.sourcesContent;try{const s=path.posix.dirname(r),o=[],t=e.sources;for(const e of t){const r=await call_func_1.call("readFileAsync",path.posix.join(s,e),"utf-8");o.push(r)}e.sourcesContent=o}catch(r){e.sourcesContent=s}}};async function compileJS(e){const{code:r,filePath:s,projectPath:o,setting:t,babelRoot:i="@babel/runtime",root:n="",babelIgnore:a=[]}=e,{es7:c,es6:l}=t,u=Buffer.from(r),p=tools_1.bufferToUtf8String(u),f=path.posix.join(n,s),m=t.minify||t.minifyJS;if(void 0===p)return{error:{code:config_1.FILE_NOT_UTF8,path:f,message:locales.config.FILE_NOT_UTF8.format(f)}};const h=p.length>=512e3;let g=!1;c&&(g=babel_helper_1.isIgnore(a,s));const j=await tryGetInputSourceMap(p,path.posix.join(o,n,s));if(h||g)return{error:null,isLargeFile:h,isBabelIgnore:g,map:"object"==typeof j?JSON.stringify(j):j,code:p,helpers:[]};let _=p,b=j,y=[];if(c){const e=await require("../../js/enhance")({code:p,babelRoot:i,filePath:s,inputSourceMap:j});if(e.error)return{error:Object.assign(Object.assign({},e.error),{path:f})};_=e.code||"",b=e.map,y=e.helpers||[]}else if(l){const e=require("../../js/es6_transform")({code:p,filePath:s,inputSourceMap:j});if(e.error)return{error:Object.assign(Object.assign({},e.error),{path:f})};_=e.code||"",b=e.map}if(m){if(!l&&!c){const e=require("../../js/minifyjs_after_wrap")({filePath:s,code:_,inputSourceMap:b});if(e.error)return{error:Object.assign(Object.assign({},e.error),{path:f})};_=e.code,b=e.map}else{const e=require("../../js/minifyjs")({filePath:s,code:_,useTerser:!!c,inputSourceMap:b});if(e.error)return{error:Object.assign(Object.assign({},e.error),{path:f})};_=e.code,b=e.map}}if("string"!=typeof b)try{(null==b?void 0:b.sourcesContent)&&(b.sourcesContent=b.sourcesContent.map(e=>e.replace(/\r\n/g,"\n"))),b=JSON.stringify(b)}catch(e){b=""}else b=b.replace(/\\r\\n/g,"\\n");return{error:null,isLargeFile:h,isBabelIgnore:g,map:b,code:_.replace(/\r\n/g,"\n"),helpers:y||[]}}module.exports=compileJS;