"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getDevSourceMap=void 0;const log=require("../log"),JsZip=require("jszip"),request_1=require("../request"),url_config_1=require("../url_config"),path=require("path"),sign_1=require("../sign"),ERR_MSG_PREFIX="download source map failed:",fs=require("fs");async function getDevSourceMap(r){return new Promise(async(e,o)=>{const{project:t,robot:a}=r;let i=r.sourceMapSavePath;if(!t){const r="params project is requried";return log.error(r),void o(r)}if("number"!=typeof a||Math.round(a)>30||Math.round(a)<=0){const r="params robot is invalid";return log.error(r),void o(r)}if(!i){const r="params sourceMapSavePath is invalid";return log.error(r),void o(r)}path.isAbsolute(i)||(i=path.join(process.cwd(),i));const s=await sign_1.getSignature(t.privateKey,t.appid),{body:n}=await request_1.request({url:url_config_1.GET_DEV_SOURCE_MAP,method:"post",gzip:!0,body:JSON.stringify({appid:t.appid,signature:s,robot:a}),headers:{"content-type":"application/json"}});let p;try{p=JSON.parse(n)}catch(r){const e=ERR_MSG_PREFIX+" resp body is not a valid json";return log.error(e),void o(e)}const c=p.data;if(!Array.isArray(c.sourcemap_list)){const r=`${ERR_MSG_PREFIX} respData.sourcemap_list, respData: ${JSON.stringify(c)}`;return log.error(r),void o(r)}const u=c.sourcemap_list,d=new JsZip;try{u.forEach(r=>{d.folder(path.dirname(r.fullpath)).file(path.basename(r.fullpath),r.sourcemap)})}catch(r){const e=ERR_MSG_PREFIX+" source map add folder or add file error";return log.error(e),void o(e)}d.generateAsync({type:"nodebuffer"}).then(r=>{try{fs.writeFileSync(i,r),e(void 0)}catch(r){const e=`${ERR_MSG_PREFIX} save source map to ${i} failed. Error detail: ${JSON.stringify(r)}`;return log.error(e),void o(e)}e(r)}).catch(()=>{const r=ERR_MSG_PREFIX+" source map generate zip error";log.error(r),o(r)})})}exports.getDevSourceMap=getDevSourceMap;