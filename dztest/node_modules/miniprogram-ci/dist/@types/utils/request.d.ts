/// <reference path="../@types/index.d.ts" />
import { InterruptibleTask } from './interruptibletask';
import { IProject } from './project';
interface IRequestOptions {
    url: string;
    method: 'post' | 'get';
    formData?: MiniProgramCI.IAnyObject;
    body?: any;
    gzip?: boolean;
    project?: IProject;
    needRandom?: number;
    needAppID?: number;
    needToken?: number;
    headers?: MiniProgramCI.IAnyObject;
}
interface IRequestTaskResp {
    resp: any;
    body: any;
}
declare class RequestTask extends InterruptibleTask {
    static requestProxy: string;
    private _alreadyRefresh;
    private _realRequest;
    private _opt;
    constructor(opt: IRequestOptions);
    static formateQuery(originOpt: IRequestOptions): Promise<{
        url: string;
        method: "get" | "post";
        formData?: MiniProgramCI.IAnyObject | undefined;
        body?: any;
        gzip?: boolean | undefined;
        project?: MiniProgramCI.IProject | undefined;
        needRandom?: number | undefined;
        needAppID?: number | undefined;
        needToken?: number | undefined;
        headers?: MiniProgramCI.IAnyObject | undefined;
    }>;
    abort(): void;
    request(): Promise<IRequestTaskResp>;
    run(opt: IRequestOptions): Promise<IRequestTaskResp>;
}
export declare function request(opt: IRequestOptions): RequestTask;
export declare function setCiProxy(proxy: string): void;
export declare function getCiProxy(): string;
export declare function initGlobalProxy(): void;
export {};
