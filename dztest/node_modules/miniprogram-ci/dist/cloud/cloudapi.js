"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.boundTransactRequest=exports.get3rdCloudCodeSecret=exports.initCloudAPI=void 0;const crypto=require("crypto"),baseRequest=require("request"),cloudAPI=require("../vendor/cloud-api"),request_1=require("../utils/request"),sign_1=require("../utils/sign"),jsonParse_1=require("../utils/jsonParse"),urlConfig=require("../utils/url_config");function initCloudAPI(e){cloudAPI.setDefaultAppID(e),cloudAPI.setTransactType(cloudAPI.TransactType.IDE),cloudAPI.setRequest(transactRequest)}exports.initCloudAPI=initCloudAPI;const SERVICE_CLOUD_URL={scf:"https://scf.tencentcloudapi.com",flexdb:"https://flexdb.tencentcloudapi.com",tcb:"https://tcb.tencentcloudapi.com"},DIRECT_CLOUD_API_SET=new Set(["UpdateFunctionCode","CreateFunction"]);async function transactRequest(e){const t=e.project,r=await sign_1.getSignature(t.privateKey,t.appid);let o=await t.getExtAppid();if(DIRECT_CLOUD_API_SET.has(e.identity.action||"")&&Boolean(SERVICE_CLOUD_URL[e.identity.service])){const{body:s}=await request_1.request({url:urlConfig.GET_CLOUD_API_SIGNATURE,method:"post",body:JSON.stringify({appid:t.appid,extAppid:o||void 0,signature:r,signReq:{action:e.identity.action,path:e.identity.path,service:e.identity.service,version:e.identity.version,region:e.identity.region,hashed_postdata:crypto.createHash("sha256").update(e.postdata).digest("hex")}}),headers:{"content-type":"application/json"}}),i=jsonParse_1.jsonRespParse(s,"cloudapi.getCloudAPISignedHeader");if(i.errCode)throw new Error(`getCloudAPISignedHeader failed, errCode: ${s.errCode}, errMsg: ${s.errMsg}`);const n=i.header;if(!n)throw new Error("empty header, recv cgi resp: "+s);const{resp:a}=await new Promise((t,r)=>{baseRequest({url:SERVICE_CLOUD_URL[e.identity.service],method:"post",body:e.postdata,headers:n.split("\n").map(e=>e.trim()).reduce((e,t)=>{const r=t.indexOf(":");return e[t.slice(0,r)]=t.slice(r+1),e},{})},(e,o,s)=>{e?r(e):t({resp:o})})});if(413===a.statusCode)throw new Error("Body too large");const d=a.body;if(!d)throw new Error("Empty body "+a);const c="string"==typeof d?JSON.parse(d):d;if(!c.Response||c.Response&&c.Response.Error)throw new Error("TencentCloud API error: "+d);return d}{const{resp:s,body:i}=await request_1.request({url:urlConfig.cloudAPIAgentURL,method:"post",body:JSON.stringify({appid:t.appid,extAppid:o||void 0,signature:r,agentReq:Object.assign({postdata:e.postdata,test:!1},e.identity)}),headers:Object.assign(Object.assign({},e.headers),{"content-type":"application/json"})});if(413===s.statusCode)throw new Error("Body too large");if(!i)throw new Error("Empty body "+s);const n="string"==typeof i?JSON.parse(i):i;if(n.errCode)throw new Error(`${n.errCode} ${n.errMsg}`);const a=n.data;if(!a||!a.base_resp||"0"!=a.base_resp.ret){if(80210===a.base_resp.ret)throw new Error("NO_CLOUD_MANAGE_PERMISSION_AUTHORIZED_TO_3RD_PLATFORM");throw new Error("Base resp abnormal, "+JSON.stringify(a&&a.base_resp))}return a.content}}async function get3rdCloudCodeSecret(e){const t=await e.attr();let r,o="",s={};try{r=await e.getFile(e.miniprogramRoot,"ext.json"),s=JSON.parse(r.toString("utf-8"))}catch(e){}if(s&&s.extEnable&&(o=s.extAppid||""),(null==t?void 0:t.platform)&&o)try{const t=await sign_1.getSignature(e.privateKey,e.appid),{body:r}=await request_1.request({url:urlConfig.get3rdCloudCodeSecret,method:"post",headers:{"content-type":"application/json"},body:JSON.stringify({appid:e.appid,extAppid:o,signature:t})}),s=jsonParse_1.jsonRespParse(r);if(0===s.errCode)return s.codeSecret;throw new Error("get 3rd cloud codesecret invalid resp "+JSON.stringify(r))}catch(e){throw new Error("get 3rd cloud codesecret error "+e)}}function boundTransactRequest(e){return t=>transactRequest(Object.assign(Object.assign({},t),{project:e}))}exports.get3rdCloudCodeSecret=get3rdCloudCodeSecret,exports.boundTransactRequest=boundTransactRequest;