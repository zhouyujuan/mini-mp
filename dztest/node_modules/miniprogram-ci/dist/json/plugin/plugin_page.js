"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getPluginPageJSON=void 0;const path=require("path"),common_1=require("../common"),validateType=require("../../validate/pluginpagejson.js"),{schemaValidate:schemaValidate,NEW_CHECK_JSON_WAY:NEW_CHECK_JSON_WAY}=require("../../validate/schemaValidate"),locales=require("../../utils/locales/locales"),config_1=require("../../config"),common_2=require("../../utils/common"),plugin_1=require("./plugin"),common_3=require("../common"),theme_1=require("../theme"),spreadUsingComponent=async(e,t)=>{const{project:o,root:a,filePath:n}=t,i=path.posix.relative(a,n);if(n.includes("miniprogram_npm/"))return;const r=await plugin_1.getDevPluginJSON(o,!0),s=Object.assign({},r.usingComponents);if(0!==Object.keys(s).length){e.usingComponents||(e.usingComponents={});for(const t in s){if(e.usingComponents[t])continue;const o=s[t]||"";if(o.startsWith("/")||o.startsWith("plugin://")){e.usingComponents[t]=o;continue}const a=path.posix.normalize(path.posix.relative(path.posix.dirname(i),o));e.usingComponents[t]=a.startsWith(".")?a:"./"+a}}};async function checkComponentPath(e,t){const{project:o,root:a,filePath:n}=t;await common_1.checkComponentPath({project:o,root:a,relativePath:path.posix.relative(a,n),inputJSON:e})}async function getPluginPageJSON(e){const{project:t,root:o}=e;let a=e.filePath;if(!t.stat("",a))return{};const n=await t.getFile("",a),i=common_1.checkJSONFormat(common_2.checkUTF8(n,a),a),r=await theme_1.getPluginThemeLocation(t);if(!r){const e=common_3.getPageJSONVariableDecalearProperty(i);e.length&&common_2.throwError({msg:'pluginJSON["themeLocation"] is required because:\n'+e.map(e=>`"${e.value}" as variable was declared at ${a}:${e.property}`).join("\n"),filePath:a})}let s={light:{},dark:{}};r&&(s=await theme_1.checkThemeJSON(t,{themeLocation:r,isPlugin:!0}));const c=theme_1.mergeThemeJSONToPageJSON(s,i,a);if(NEW_CHECK_JSON_WAY){const e=schemaValidate("page",c.pageJSONLight),t=schemaValidate("page",c.pageJSONDark);if(e.warning&&(i.__warning__=locales.config.INVALID.format(e.warning)),r&&t.warning&&(i.__warning__=locales.config.INVALID.format(t.warning)),e.error.length){const t=common_3.transValidateResult(e);r&&(a+=` or ${r}["light"]`),common_2.throwError({msg:t,filePath:a})}if(r&&t.error.length){const e=common_3.transValidateResult(t);r&&(a+=` or ${r}["dark"]`),common_2.throwError({msg:e,filePath:a})}}else try{validateType.check(c)}catch(e){common_2.throwError({msg:`${a}: pageJSON${e.message}`,code:config_1.PLUGIN_JSON_CONTENT_ERR,filePath:a})}return await checkComponentPath(i,e),await spreadUsingComponent(i,e),i}exports.getPluginPageJSON=getPluginPageJSON;