"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.compileJSON=void 0;const path=require("path"),app_merge_ext_1=require("../../json/app/app_merge_ext"),ext_1=require("../../json/app/ext"),common_1=require("../../utils/common"),page_1=require("../../json/page/page"),taskstatus_1=require("../../utils/taskstatus"),projectconfig_1=require("../../json/projectconfig"),common_2=require("../common");async function compilePageJSON(t,e,o,a){const{onProgressUpdate:s=(()=>{})}=a,n={};for(const a of e){const e=new taskstatus_1.TaskStatus(a);s(e),n[path.posix.join(o,a+".json")]=await page_1.getPageJSON(t,{miniprogramRoot:o,pagePath:a,useCache:!1}),e.done(),s(e)}return n}async function compileJSON(t,e){const{onProgressUpdate:o=(()=>{})}=e,a=await projectconfig_1.getProjectConfigJSON(t),{miniprogramRoot:s=""}=a;let n=new taskstatus_1.TaskStatus("app.json");o(n);const i=await app_merge_ext_1.getAppJSON(t,!1);let r;n.done(),o(n);const p=await t.attr();p&&p.platform&&(n=new taskstatus_1.TaskStatus("ext.json"),o(n),r=await ext_1.getExtJSON(t,!0),n.done(),o(n));const c=common_1.getAllPages(i),g=await compilePageJSON(t,c,s,e),m=new Set(["app.json","ext.json"].concat(c.map(t=>t+".json"))),l=common_1.getAllTargetTypeFilesWithOtherTypeFilesOfSameName(t,".json",[".wxml",".js"],s).filter(common_2.isNotIgnoredByProjectConfig.bind(null,a,s)).filter(t=>{const e=path.posix.relative(s,t);return!m.has(e)}).map(t=>path.posix.relative(s,t).replace(/\.json$/,"")),j=await compilePageJSON(t,l,s,e);l.forEach(t=>m.add(t+".json"));const u=t.getFileList(s,".json").filter(common_2.isNotIgnoredByProjectConfig.bind(null,a,s)).filter(t=>{const e=path.posix.relative(s,t);return!m.has(e)}),_=await common_2.compileOther(t,u,e),f=Object.assign(Object.assign(Object.assign({[path.posix.join(s,"app.json")]:i},g),j),_);r&&(f[path.posix.join(s,"ext.json")]=r);const x={};for(const t in f){const e=f[t];let o;o="[object Uint8Array]"===Object.prototype.toString.call(e)?e.toString():JSON.stringify(e),x[t]=o}return x}exports.compileJSON=compileJSON;