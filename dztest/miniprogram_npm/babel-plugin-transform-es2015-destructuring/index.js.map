{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.default = function (_ref) {\n  var t = _ref.types;\n\n\n  function variableDeclarationHasPattern(node) {\n    for (var _iterator = node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref2;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref2 = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref2 = _i.value;\n      }\n\n      var declar = _ref2;\n\n      if (t.isPattern(declar.id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function hasRest(pattern) {\n    for (var _iterator2 = pattern.elements, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n      var _ref3;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref3 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref3 = _i2.value;\n      }\n\n      var elem = _ref3;\n\n      if (t.isRestElement(elem)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  var arrayUnpackVisitor = {\n    ReferencedIdentifier: function ReferencedIdentifier(path, state) {\n      if (state.bindings[path.node.name]) {\n        state.deopt = true;\n        path.stop();\n      }\n    }\n  };\n\n  var DestructuringTransformer = function () {\n    function DestructuringTransformer(opts) {\n      (0, _classCallCheck3.default)(this, DestructuringTransformer);\n\n      this.blockHoist = opts.blockHoist;\n      this.operator = opts.operator;\n      this.arrays = {};\n      this.nodes = opts.nodes || [];\n      this.scope = opts.scope;\n      this.file = opts.file;\n      this.kind = opts.kind;\n    }\n\n    DestructuringTransformer.prototype.buildVariableAssignment = function buildVariableAssignment(id, init) {\n      var op = this.operator;\n      if (t.isMemberExpression(id)) op = \"=\";\n\n      var node = void 0;\n\n      if (op) {\n        node = t.expressionStatement(t.assignmentExpression(op, id, init));\n      } else {\n        node = t.variableDeclaration(this.kind, [t.variableDeclarator(id, init)]);\n      }\n\n      node._blockHoist = this.blockHoist;\n\n      return node;\n    };\n\n    DestructuringTransformer.prototype.buildVariableDeclaration = function buildVariableDeclaration(id, init) {\n      var declar = t.variableDeclaration(\"var\", [t.variableDeclarator(id, init)]);\n      declar._blockHoist = this.blockHoist;\n      return declar;\n    };\n\n    DestructuringTransformer.prototype.push = function push(id, init) {\n      if (t.isObjectPattern(id)) {\n        this.pushObjectPattern(id, init);\n      } else if (t.isArrayPattern(id)) {\n        this.pushArrayPattern(id, init);\n      } else if (t.isAssignmentPattern(id)) {\n        this.pushAssignmentPattern(id, init);\n      } else {\n        this.nodes.push(this.buildVariableAssignment(id, init));\n      }\n    };\n\n    DestructuringTransformer.prototype.toArray = function toArray(node, count) {\n      if (this.file.opts.loose || t.isIdentifier(node) && this.arrays[node.name]) {\n        return node;\n      } else {\n        return this.scope.toArray(node, count);\n      }\n    };\n\n    DestructuringTransformer.prototype.pushAssignmentPattern = function pushAssignmentPattern(pattern, valueRef) {\n\n      var tempValueRef = this.scope.generateUidIdentifierBasedOnNode(valueRef);\n\n      var declar = t.variableDeclaration(\"var\", [t.variableDeclarator(tempValueRef, valueRef)]);\n      declar._blockHoist = this.blockHoist;\n      this.nodes.push(declar);\n\n      var tempConditional = t.conditionalExpression(t.binaryExpression(\"===\", tempValueRef, t.identifier(\"undefined\")), pattern.right, tempValueRef);\n\n      var left = pattern.left;\n      if (t.isPattern(left)) {\n        var tempValueDefault = t.expressionStatement(t.assignmentExpression(\"=\", tempValueRef, tempConditional));\n        tempValueDefault._blockHoist = this.blockHoist;\n\n        this.nodes.push(tempValueDefault);\n        this.push(left, tempValueRef);\n      } else {\n        this.nodes.push(this.buildVariableAssignment(left, tempConditional));\n      }\n    };\n\n    DestructuringTransformer.prototype.pushObjectRest = function pushObjectRest(pattern, objRef, spreadProp, spreadPropIndex) {\n\n      var keys = [];\n\n      for (var i = 0; i < pattern.properties.length; i++) {\n        var prop = pattern.properties[i];\n\n        if (i >= spreadPropIndex) break;\n\n        if (t.isRestProperty(prop)) continue;\n\n        var key = prop.key;\n        if (t.isIdentifier(key) && !prop.computed) key = t.stringLiteral(prop.key.name);\n        keys.push(key);\n      }\n\n      keys = t.arrayExpression(keys);\n\n      var value = t.callExpression(this.file.addHelper(\"objectWithoutProperties\"), [objRef, keys]);\n      this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));\n    };\n\n    DestructuringTransformer.prototype.pushObjectProperty = function pushObjectProperty(prop, propRef) {\n      if (t.isLiteral(prop.key)) prop.computed = true;\n\n      var pattern = prop.value;\n      var objRef = t.memberExpression(propRef, prop.key, prop.computed);\n\n      if (t.isPattern(pattern)) {\n        this.push(pattern, objRef);\n      } else {\n        this.nodes.push(this.buildVariableAssignment(pattern, objRef));\n      }\n    };\n\n    DestructuringTransformer.prototype.pushObjectPattern = function pushObjectPattern(pattern, objRef) {\n\n      if (!pattern.properties.length) {\n        this.nodes.push(t.expressionStatement(t.callExpression(this.file.addHelper(\"objectDestructuringEmpty\"), [objRef])));\n      }\n\n      if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {\n        var temp = this.scope.generateUidIdentifierBasedOnNode(objRef);\n        this.nodes.push(this.buildVariableDeclaration(temp, objRef));\n        objRef = temp;\n      }\n\n      for (var i = 0; i < pattern.properties.length; i++) {\n        var prop = pattern.properties[i];\n        if (t.isRestProperty(prop)) {\n          this.pushObjectRest(pattern, objRef, prop, i);\n        } else {\n          this.pushObjectProperty(prop, objRef);\n        }\n      }\n    };\n\n    DestructuringTransformer.prototype.canUnpackArrayPattern = function canUnpackArrayPattern(pattern, arr) {\n      if (!t.isArrayExpression(arr)) return false;\n\n      if (pattern.elements.length > arr.elements.length) return;\n      if (pattern.elements.length < arr.elements.length && !hasRest(pattern)) return false;\n\n      for (var _iterator3 = pattern.elements, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {\n        var _ref4;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref4 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref4 = _i3.value;\n        }\n\n        var elem = _ref4;\n\n        if (!elem) return false;\n\n        if (t.isMemberExpression(elem)) return false;\n      }\n\n      for (var _iterator4 = arr.elements, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {\n        var _ref5;\n\n        if (_isArray4) {\n          if (_i4 >= _iterator4.length) break;\n          _ref5 = _iterator4[_i4++];\n        } else {\n          _i4 = _iterator4.next();\n          if (_i4.done) break;\n          _ref5 = _i4.value;\n        }\n\n        var _elem = _ref5;\n\n        if (t.isSpreadElement(_elem)) return false;\n\n        if (t.isCallExpression(_elem)) return false;\n\n        if (t.isMemberExpression(_elem)) return false;\n      }\n\n      var bindings = t.getBindingIdentifiers(pattern);\n      var state = { deopt: false, bindings: bindings };\n      this.scope.traverse(arr, arrayUnpackVisitor, state);\n      return !state.deopt;\n    };\n\n    DestructuringTransformer.prototype.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(pattern, arr) {\n      for (var i = 0; i < pattern.elements.length; i++) {\n        var elem = pattern.elements[i];\n        if (t.isRestElement(elem)) {\n          this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));\n        } else {\n          this.push(elem, arr.elements[i]);\n        }\n      }\n    };\n\n    DestructuringTransformer.prototype.pushArrayPattern = function pushArrayPattern(pattern, arrayRef) {\n      if (!pattern.elements) return;\n\n      if (this.canUnpackArrayPattern(pattern, arrayRef)) {\n        return this.pushUnpackedArrayPattern(pattern, arrayRef);\n      }\n\n      var count = !hasRest(pattern) && pattern.elements.length;\n\n      var toArray = this.toArray(arrayRef, count);\n\n      if (t.isIdentifier(toArray)) {\n        arrayRef = toArray;\n      } else {\n        arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);\n        this.arrays[arrayRef.name] = true;\n        this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));\n      }\n\n      for (var i = 0; i < pattern.elements.length; i++) {\n        var elem = pattern.elements[i];\n\n        if (!elem) continue;\n\n        var elemRef = void 0;\n\n        if (t.isRestElement(elem)) {\n          elemRef = this.toArray(arrayRef);\n          elemRef = t.callExpression(t.memberExpression(elemRef, t.identifier(\"slice\")), [t.numericLiteral(i)]);\n\n          elem = elem.argument;\n        } else {\n          elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);\n        }\n\n        this.push(elem, elemRef);\n      }\n    };\n\n    DestructuringTransformer.prototype.init = function init(pattern, ref) {\n\n      if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {\n        var memo = this.scope.maybeGenerateMemoised(ref, true);\n        if (memo) {\n          this.nodes.push(this.buildVariableDeclaration(memo, ref));\n          ref = memo;\n        }\n      }\n\n      this.push(pattern, ref);\n\n      return this.nodes;\n    };\n\n    return DestructuringTransformer;\n  }();\n\n  return {\n    visitor: {\n      ExportNamedDeclaration: function ExportNamedDeclaration(path) {\n        var declaration = path.get(\"declaration\");\n        if (!declaration.isVariableDeclaration()) return;\n        if (!variableDeclarationHasPattern(declaration.node)) return;\n\n        var specifiers = [];\n\n        for (var name in path.getOuterBindingIdentifiers(path)) {\n          var id = t.identifier(name);\n          specifiers.push(t.exportSpecifier(id, id));\n        }\n\n        path.replaceWith(declaration.node);\n        path.insertAfter(t.exportNamedDeclaration(null, specifiers));\n      },\n      ForXStatement: function ForXStatement(path, file) {\n        var node = path.node,\n            scope = path.scope;\n\n        var left = node.left;\n\n        if (t.isPattern(left)) {\n\n          var temp = scope.generateUidIdentifier(\"ref\");\n\n          node.left = t.variableDeclaration(\"var\", [t.variableDeclarator(temp)]);\n\n          path.ensureBlock();\n\n          node.body.body.unshift(t.variableDeclaration(\"var\", [t.variableDeclarator(left, temp)]));\n\n          return;\n        }\n\n        if (!t.isVariableDeclaration(left)) return;\n\n        var pattern = left.declarations[0].id;\n        if (!t.isPattern(pattern)) return;\n\n        var key = scope.generateUidIdentifier(\"ref\");\n        node.left = t.variableDeclaration(left.kind, [t.variableDeclarator(key, null)]);\n\n        var nodes = [];\n\n        var destructuring = new DestructuringTransformer({\n          kind: left.kind,\n          file: file,\n          scope: scope,\n          nodes: nodes\n        });\n\n        destructuring.init(pattern, key);\n\n        path.ensureBlock();\n\n        var block = node.body;\n        block.body = nodes.concat(block.body);\n      },\n      CatchClause: function CatchClause(_ref6, file) {\n        var node = _ref6.node,\n            scope = _ref6.scope;\n\n        var pattern = node.param;\n        if (!t.isPattern(pattern)) return;\n\n        var ref = scope.generateUidIdentifier(\"ref\");\n        node.param = ref;\n\n        var nodes = [];\n\n        var destructuring = new DestructuringTransformer({\n          kind: \"let\",\n          file: file,\n          scope: scope,\n          nodes: nodes\n        });\n        destructuring.init(pattern, ref);\n\n        node.body.body = nodes.concat(node.body.body);\n      },\n      AssignmentExpression: function AssignmentExpression(path, file) {\n        var node = path.node,\n            scope = path.scope;\n\n        if (!t.isPattern(node.left)) return;\n\n        var nodes = [];\n\n        var destructuring = new DestructuringTransformer({\n          operator: node.operator,\n          file: file,\n          scope: scope,\n          nodes: nodes\n        });\n\n        var ref = void 0;\n        if (path.isCompletionRecord() || !path.parentPath.isExpressionStatement()) {\n          ref = scope.generateUidIdentifierBasedOnNode(node.right, \"ref\");\n\n          nodes.push(t.variableDeclaration(\"var\", [t.variableDeclarator(ref, node.right)]));\n\n          if (t.isArrayExpression(node.right)) {\n            destructuring.arrays[ref.name] = true;\n          }\n        }\n\n        destructuring.init(node.left, ref || node.right);\n\n        if (ref) {\n          nodes.push(t.expressionStatement(ref));\n        }\n\n        path.replaceWithMultiple(nodes);\n      },\n      VariableDeclaration: function VariableDeclaration(path, file) {\n        var node = path.node,\n            scope = path.scope,\n            parent = path.parent;\n\n        if (t.isForXStatement(parent)) return;\n        if (!parent || !path.container) return;\n        if (!variableDeclarationHasPattern(node)) return;\n\n        var nodes = [];\n        var declar = void 0;\n\n        for (var i = 0; i < node.declarations.length; i++) {\n          declar = node.declarations[i];\n\n          var patternId = declar.init;\n          var pattern = declar.id;\n\n          var destructuring = new DestructuringTransformer({\n            blockHoist: node._blockHoist,\n            nodes: nodes,\n            scope: scope,\n            kind: node.kind,\n            file: file\n          });\n\n          if (t.isPattern(pattern)) {\n            destructuring.init(pattern, patternId);\n\n            if (+i !== node.declarations.length - 1) {\n              t.inherits(nodes[nodes.length - 1], declar);\n            }\n          } else {\n            nodes.push(t.inherits(destructuring.buildVariableAssignment(declar.id, declar.init), declar));\n          }\n        }\n\n        var nodesOut = [];\n        for (var _iterator5 = nodes, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {\n          var _ref7;\n\n          if (_isArray5) {\n            if (_i5 >= _iterator5.length) break;\n            _ref7 = _iterator5[_i5++];\n          } else {\n            _i5 = _iterator5.next();\n            if (_i5.done) break;\n            _ref7 = _i5.value;\n          }\n\n          var _node = _ref7;\n\n          var tail = nodesOut[nodesOut.length - 1];\n          if (tail && t.isVariableDeclaration(tail) && t.isVariableDeclaration(_node) && tail.kind === _node.kind) {\n            var _tail$declarations;\n\n            (_tail$declarations = tail.declarations).push.apply(_tail$declarations, _node.declarations);\n          } else {\n            nodesOut.push(_node);\n          }\n        }\n\n        for (var _iterator6 = nodesOut, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);;) {\n          var _ref8;\n\n          if (_isArray6) {\n            if (_i6 >= _iterator6.length) break;\n            _ref8 = _iterator6[_i6++];\n          } else {\n            _i6 = _iterator6.next();\n            if (_i6.done) break;\n            _ref8 = _i6.value;\n          }\n\n          var nodeOut = _ref8;\n\n          if (!nodeOut.declarations) continue;\n          for (var _iterator7 = nodeOut.declarations, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);;) {\n            var _ref9;\n\n            if (_isArray7) {\n              if (_i7 >= _iterator7.length) break;\n              _ref9 = _iterator7[_i7++];\n            } else {\n              _i7 = _iterator7.next();\n              if (_i7.done) break;\n              _ref9 = _i7.value;\n            }\n\n            var declaration = _ref9;\n            var name = declaration.id.name;\n\n            if (scope.bindings[name]) {\n              scope.bindings[name].kind = nodeOut.kind;\n            }\n          }\n        }\n\n        if (nodesOut.length === 1) {\n          path.replaceWith(nodesOut[0]);\n        } else {\n          path.replaceWithMultiple(nodesOut);\n        }\n      }\n    }\n  };\n};\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports[\"default\"];"]}