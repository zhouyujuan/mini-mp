{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _has = require('has');\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _cssnanoUtilGetMatch = require('cssnano-util-get-match');\n\nvar _cssnanoUtilGetMatch2 = _interopRequireDefault(_cssnanoUtilGetMatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getValues(list, { value }, index) {\n    if (index % 2 === 0) {\n        return [...list, parseFloat(value)];\n    }\n\n    return list;\n}\n\nfunction matrix3d(node, values) {\n    // matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1) => matrix(a, b, c, d, tx, ty)\n    if (values[15] && values[2] === 0 && values[3] === 0 && values[6] === 0 && values[7] === 0 && values[8] === 0 && values[9] === 0 && values[10] === 1 && values[11] === 0 && values[14] === 0 && values[15] === 1) {\n        const { nodes } = node;\n\n        node.value = 'matrix';\n        node.nodes = [nodes[0], // a\n        nodes[1], // ,\n        nodes[2], // b\n        nodes[3], // ,\n        nodes[8], // c\n        nodes[9], // ,\n        nodes[10], // d\n        nodes[11], // ,\n        nodes[24], // tx\n        nodes[25], // ,\n        nodes[26]];\n    }\n}\n\nconst rotate3dMappings = [['rotateX', [1, 0, 0]], // rotate3d(1, 0, 0, a) => rotateX(a)\n['rotateY', [0, 1, 0]], // rotate3d(0, 1, 0, a) => rotateY(a)\n['rotate', [0, 0, 1]]];\n\nconst rotate3dMatch = (0, _cssnanoUtilGetMatch2.default)(rotate3dMappings);\n\nfunction rotate3d(node, values) {\n    const { nodes } = node;\n    const match = rotate3dMatch(values.slice(0, 3));\n\n    if (match.length) {\n        node.value = match;\n        node.nodes = [nodes[6]];\n    }\n}\n\nfunction rotateZ(node) {\n    // rotateZ(rz) => rotate(rz)\n    node.value = 'rotate';\n}\n\nfunction scale(node, values) {\n    const { nodes } = node;\n\n    if (!nodes[2]) {\n        return;\n    }\n\n    const [first, second] = values;\n\n    // scale(sx, sy) => scale(sx)\n    if (first === second) {\n        node.nodes = [nodes[0]];\n\n        return;\n    }\n\n    // scale(sx, 1) => scaleX(sx)\n    if (second === 1) {\n        node.value = 'scaleX';\n        node.nodes = [nodes[0]];\n\n        return;\n    }\n\n    // scale(1, sy) => scaleY(sy)\n    if (first === 1) {\n        node.value = 'scaleY';\n        node.nodes = [nodes[2]];\n\n        return;\n    }\n}\n\nfunction scale3d(node, values) {\n    const { nodes } = node;\n    const [first, second, third] = values;\n\n    // scale3d(sx, 1, 1) => scaleX(sx)\n    if (second === 1 && third === 1) {\n        node.value = 'scaleX';\n        node.nodes = [nodes[0]];\n\n        return;\n    }\n\n    // scale3d(1, sy, 1) => scaleY(sy)\n    if (first === 1 && third === 1) {\n        node.value = 'scaleY';\n        node.nodes = [nodes[2]];\n\n        return;\n    }\n\n    // scale3d(1, 1, sz) => scaleZ(sz)\n    if (first === 1 && second === 1) {\n        node.value = 'scaleZ';\n        node.nodes = [nodes[4]];\n\n        return;\n    }\n}\n\nfunction translate(node, values) {\n    const { nodes } = node;\n\n    if (!nodes[2]) {\n        return;\n    }\n\n    // translate(tx, 0) => translate(tx)\n    if (values[1] === 0) {\n        node.nodes = [nodes[0]];\n\n        return;\n    }\n\n    // translate(0, ty) => translateY(ty)\n    if (values[0] === 0) {\n        node.value = 'translateY';\n        node.nodes = [nodes[2]];\n\n        return;\n    }\n}\n\nfunction translate3d(node, values) {\n    const { nodes } = node;\n\n    // translate3d(0, 0, tz) => translateZ(tz)\n    if (values[0] === 0 && values[1] === 0) {\n        node.value = 'translateZ';\n        node.nodes = [nodes[4]];\n    }\n}\n\nconst reducers = {\n    matrix3d,\n    rotate3d,\n    rotateZ,\n    scale,\n    scale3d,\n    translate,\n    translate3d\n};\n\nfunction normalizeReducerName(name) {\n    const lowerCasedName = name.toLowerCase();\n\n    if (lowerCasedName === 'rotatez') {\n        return 'rotateZ';\n    }\n\n    return lowerCasedName;\n}\n\nfunction reduce(node) {\n    const { nodes, type, value } = node;\n    const normalizedReducerName = normalizeReducerName(value);\n\n    if (type === 'function' && (0, _has2.default)(reducers, normalizedReducerName)) {\n        reducers[normalizedReducerName](node, nodes.reduce(getValues, []));\n    }\n\n    return false;\n}\n\nexports.default = _postcss2.default.plugin('postcss-reduce-transforms', () => {\n    return css => {\n        const cache = {};\n\n        css.walkDecls(/transform$/i, decl => {\n            const value = decl.value;\n\n            if (cache[value]) {\n                decl.value = cache[value];\n\n                return;\n            }\n\n            const result = (0, _postcssValueParser2.default)(value).walk(reduce).toString();\n\n            decl.value = result;\n            cache[value] = result;\n        });\n    };\n});\nmodule.exports = exports['default'];"]}