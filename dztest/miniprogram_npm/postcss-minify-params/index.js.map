{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _browserslist = require('browserslist');\n\nvar _browserslist2 = _interopRequireDefault(_browserslist);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _alphanumSort = require('alphanum-sort');\n\nvar _alphanumSort2 = _interopRequireDefault(_alphanumSort);\n\nvar _uniqs = require('uniqs');\n\nvar _uniqs2 = _interopRequireDefault(_uniqs);\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Return the greatest common divisor\n * of two numbers.\n */\n\nfunction gcd(a, b) {\n    return b ? gcd(b, a % b) : a;\n}\n\nfunction aspectRatio(a, b) {\n    const divisor = gcd(a, b);\n\n    return [a / divisor, b / divisor];\n}\n\nfunction split(args) {\n    return args.map(arg => (0, _postcssValueParser.stringify)(arg)).join('');\n}\n\nfunction removeNode(node) {\n    node.value = '';\n    node.type = 'word';\n}\n\nfunction transform(legacy, rule) {\n    const ruleName = rule.name.toLowerCase();\n\n    // We should re-arrange parameters only for `@media` and `@supports` at-rules\n    if (!rule.params || ![\"media\", \"supports\"].includes(ruleName)) {\n        return;\n    }\n\n    const params = (0, _postcssValueParser2.default)(rule.params);\n\n    params.walk((node, index) => {\n        if (node.type === 'div' || node.type === 'function') {\n            node.before = node.after = '';\n\n            if (node.type === 'function' && node.nodes[4] && node.nodes[0].value.toLowerCase().indexOf('-aspect-ratio') === 3) {\n                const [a, b] = aspectRatio(node.nodes[2].value, node.nodes[4].value);\n\n                node.nodes[2].value = a;\n                node.nodes[4].value = b;\n            }\n        } else if (node.type === 'space') {\n            node.value = ' ';\n        } else {\n            const prevWord = params.nodes[index - 2];\n\n            if (node.value.toLowerCase() === 'all' && rule.name.toLowerCase() === 'media' && !prevWord) {\n                const nextWord = params.nodes[index + 2];\n\n                if (!legacy || nextWord) {\n                    removeNode(node);\n                }\n\n                if (nextWord && nextWord.value.toLowerCase() === 'and') {\n                    const nextSpace = params.nodes[index + 1];\n                    const secondSpace = params.nodes[index + 3];\n\n                    removeNode(nextWord);\n                    removeNode(nextSpace);\n                    removeNode(secondSpace);\n                }\n            }\n        }\n    }, true);\n\n    rule.params = (0, _alphanumSort2.default)((0, _uniqs2.default)((0, _cssnanoUtilGetArguments2.default)(params).map(split)), {\n        insensitive: true\n    }).join();\n\n    if (!rule.params.length) {\n        rule.raws.afterName = '';\n    }\n}\n\nfunction hasAllBug(browser) {\n    return ~['ie 10', 'ie 11'].indexOf(browser);\n}\n\nexports.default = _postcss2.default.plugin('postcss-minify-params', () => {\n    return (css, result) => {\n        const resultOpts = result.opts || {};\n        const browsers = (0, _browserslist2.default)(null, {\n            stats: resultOpts.stats,\n            path: __dirname,\n            env: resultOpts.env\n        });\n\n        return css.walkAtRules(transform.bind(null, browsers.some(hasAllBug)));\n    };\n});\nmodule.exports = exports['default'];"]}