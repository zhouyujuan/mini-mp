{"version":3,"sources":["index.js","error.js","node.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var path = require('path')\nvar e2c = require('electron-to-chromium/versions')\n\nvar agents = require('caniuse-lite/dist/unpacker/agents').agents\nvar region = require('caniuse-lite/dist/unpacker/region').default\n\nvar BrowserslistError = require('./error')\nvar env = require('./node') // Will load browser.js in webpack\n\nvar FLOAT_RANGE = /^\\d+(\\.\\d+)?(-\\d+(\\.\\d+)?)*$/\n\nfunction normalize (versions) {\n  return versions.filter(function (version) {\n    return typeof version === 'string'\n  })\n}\n\nfunction nameMapper (name) {\n  return function mapName (version) {\n    return name + ' ' + version\n  }\n}\n\nfunction getMajor (version) {\n  return parseInt(version.split('.')[0])\n}\n\nfunction getMajorVersions (released, number) {\n  if (released.length === 0) return []\n  var minimum = getMajor(released[released.length - 1]) - parseInt(number) + 1\n  var selected = []\n  for (var i = released.length - 1; i >= 0; i--) {\n    if (minimum > getMajor(released[i])) break\n    selected.unshift(released[i])\n  }\n  return selected\n}\n\nfunction uniq (array) {\n  var filtered = []\n  for (var i = 0; i < array.length; i++) {\n    if (filtered.indexOf(array[i]) === -1) filtered.push(array[i])\n  }\n  return filtered\n}\n\n// Helpers\n\nfunction fillUsage (result, name, data) {\n  for (var i in data) {\n    result[name + ' ' + i] = data[i]\n  }\n}\n\nfunction generateFilter (sign, version) {\n  version = parseFloat(version)\n  if (sign === '>') {\n    return function (v) {\n      return parseFloat(v) > version\n    }\n  } else if (sign === '>=') {\n    return function (v) {\n      return parseFloat(v) >= version\n    }\n  } else if (sign === '<') {\n    return function (v) {\n      return parseFloat(v) < version\n    }\n  } else {\n    return function (v) {\n      return parseFloat(v) <= version\n    }\n  }\n}\n\nfunction compareStrings (a, b) {\n  if (a < b) return -1\n  if (a > b) return +1\n  return 0\n}\n\nfunction normalizeVersion (data, version) {\n  if (data.versions.indexOf(version) !== -1) {\n    return version\n  } else if (browserslist.versionAliases[data.name][version]) {\n    return browserslist.versionAliases[data.name][version]\n  } else if (data.versions.length === 1) {\n    return data.versions[0]\n  } else {\n    return false\n  }\n}\n\nfunction loadCountryStatistics (country) {\n  country = country.replace(/[^\\w-]/g, '')\n  if (!browserslist.usage[country]) {\n    var usage = { }\n    // eslint-disable-next-line security/detect-non-literal-require\n    var compressed = require('caniuse-lite/data/regions/' + country + '.js')\n    var data = region(compressed)\n    for (var i in data) {\n      fillUsage(usage, i, data[i])\n    }\n    browserslist.usage[country] = usage\n  }\n}\n\nfunction filterByYear (since) {\n  return Object.keys(agents).reduce(function (selected, name) {\n    var data = byName(name)\n    if (!data) return selected\n    var versions = Object.keys(data.releaseDate).filter(function (v) {\n      return data.releaseDate[v] >= since\n    })\n    return selected.concat(versions.map(nameMapper(data.name)))\n  }, [])\n}\n\nfunction byName (name) {\n  name = name.toLowerCase()\n  name = browserslist.aliases[name] || name\n  return browserslist.data[name]\n}\n\nfunction checkName (name) {\n  var data = byName(name)\n  if (!data) throw new BrowserslistError('Unknown browser ' + name)\n  return data\n}\n\nfunction resolve (queries, context) {\n  return queries.reduce(function (result, selection, index) {\n    selection = selection.trim()\n    if (selection === '') return result\n\n    var isExclude = selection.indexOf('not ') === 0\n    if (isExclude) {\n      if (index === 0) {\n        throw new BrowserslistError(\n          'Write any browsers query (for instance, `defaults`) ' +\n          'before `' + selection + '`')\n      }\n      selection = selection.slice(4)\n    }\n\n    for (var i = 0; i < QUERIES.length; i++) {\n      var type = QUERIES[i]\n      var match = selection.match(type.regexp)\n      if (match) {\n        var args = [context].concat(match.slice(1))\n        var array = type.select.apply(browserslist, args)\n        if (isExclude) {\n          array = array.concat(array.map(function (j) {\n            return j.replace(/\\s\\d+/, ' 0')\n          }))\n          return result.filter(function (j) {\n            return array.indexOf(j) === -1\n          })\n        }\n        return result.concat(array)\n      }\n    }\n\n    throw new BrowserslistError('Unknown browser query `' + selection + '`')\n  }, [])\n}\n\n/**\n * Return array of browsers by selection queries.\n *\n * @param {(string|string[])} [queries=browserslist.defaults] Browser queries.\n * @param {object} opts Options.\n * @param {string} [opts.path=\".\"] Path to processed file.\n *                                 It will be used to find config files.\n * @param {string} [opts.env=\"development\"] Processing environment.\n *                                          It will be used to take right\n *                                          queries from config file.\n * @param {string} [opts.config] Path to config file with queries.\n * @param {object} [opts.stats] Custom browser usage statistics\n *                              for \"> 1% in my stats\" query.\n * @return {string[]} Array with browser names in Can I Use.\n *\n * @example\n * browserslist('IE >= 10, IE 8') //=> ['ie 11', 'ie 10', 'ie 8']\n */\nfunction browserslist (queries, opts) {\n  if (typeof opts === 'undefined') opts = { }\n\n  if (!opts.hasOwnProperty('path')) {\n    opts.path = path.resolve ? path.resolve('.') : '.'\n  }\n\n  if (typeof queries === 'undefined' || queries === null) {\n    var config = env.loadConfig(opts)\n    if (config) {\n      queries = config\n    } else {\n      queries = browserslist.defaults\n    }\n  }\n\n  if (typeof queries === 'string') {\n    queries = queries.split(/,\\s*/)\n  }\n\n  if (!Array.isArray(queries)) {\n    throw new BrowserslistError(\n      'Browser queries must be an array. Got ' + typeof queries + '.')\n  }\n\n  var context = { dangerousExtend: opts.dangerousExtend }\n\n  var stats = env.getStat(opts)\n  if (stats) {\n    if ('dataByBrowser' in stats) {\n      stats = stats.dataByBrowser\n    }\n    context.customUsage = { }\n    for (var browser in stats) {\n      fillUsage(context.customUsage, browser, stats[browser])\n    }\n  }\n\n  var result = resolve(queries, context).map(function (i) {\n    var parts = i.split(' ')\n    var name = parts[0]\n    var version = parts[1]\n    if (version === '0') {\n      return name + ' ' + byName(name).versions[0]\n    } else {\n      return i\n    }\n  }).sort(function (name1, name2) {\n    name1 = name1.split(' ')\n    name2 = name2.split(' ')\n    if (name1[0] === name2[0]) {\n      if (FLOAT_RANGE.test(name1[1]) && FLOAT_RANGE.test(name2[1])) {\n        return parseFloat(name2[1]) - parseFloat(name1[1])\n      } else {\n        return compareStrings(name2[1], name1[1])\n      }\n    } else {\n      return compareStrings(name1[0], name2[0])\n    }\n  })\n\n  return uniq(result)\n}\n\n// Will be filled by Can I Use data below\nbrowserslist.data = { }\nbrowserslist.usage = {\n  global: { },\n  custom: null\n}\n\n// Default browsers query\nbrowserslist.defaults = [\n  '> 1%',\n  'last 2 versions',\n  'Firefox ESR'\n]\n\n// Browser names aliases\nbrowserslist.aliases = {\n  fx: 'firefox',\n  ff: 'firefox',\n  ios: 'ios_saf',\n  explorer: 'ie',\n  blackberry: 'bb',\n  explorermobile: 'ie_mob',\n  operamini: 'op_mini',\n  operamobile: 'op_mob',\n  chromeandroid: 'and_chr',\n  firefoxandroid: 'and_ff',\n  ucandroid: 'and_uc',\n  qqandroid: 'and_qq'\n}\n\n// Aliases to work with joined versions like `ios_saf 7.0-7.1`\nbrowserslist.versionAliases = { }\n\nbrowserslist.clearCaches = env.clearCaches\nbrowserslist.parseConfig = env.parseConfig\nbrowserslist.readConfig = env.readConfig\nbrowserslist.findConfig = env.findConfig\n\n/**\n * Return browsers market coverage.\n *\n * @param {string[]} browsers Browsers names in Can I Use.\n * @param {string} [country=\"global\"] Which country statistics should be used.\n *\n * @return {number} Total market coverage for all selected browsers.\n *\n * @example\n * browserslist.coverage(browserslist('> 1% in US'), 'US') //=> 83.1\n */\nbrowserslist.coverage = function (browsers, country) {\n  if (country && country !== 'global') {\n    if (country.length > 2) {\n      country = country.toLowerCase()\n    } else {\n      country = country.toUpperCase()\n    }\n    loadCountryStatistics(country)\n  } else {\n    country = 'global'\n  }\n\n  return browsers.reduce(function (all, i) {\n    var usage = browserslist.usage[country][i]\n    if (usage === undefined) {\n      usage = browserslist.usage[country][i.replace(/ [\\d.]+$/, ' 0')]\n    }\n    return all + (usage || 0)\n  }, 0)\n}\n\nvar QUERIES = [\n  {\n    regexp: /^last\\s+(\\d+)\\s+major versions?$/i,\n    select: function (context, versions) {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name)\n        if (!data) return selected\n        var array = getMajorVersions(data.released, versions)\n\n        array = array.map(nameMapper(data.name))\n        return selected.concat(array)\n      }, [])\n    }\n  },\n  {\n    regexp: /^last\\s+(\\d+)\\s+versions?$/i,\n    select: function (context, versions) {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name)\n        if (!data) return selected\n        var array = data.released.slice(-versions)\n\n        array = array.map(nameMapper(data.name))\n        return selected.concat(array)\n      }, [])\n    }\n  },\n  {\n    regexp: /^last\\s+(\\d+)\\s+electron\\s+major versions?$/i,\n    select: function (context, versions) {\n      var validVersions = getMajorVersions(Object.keys(e2c).reverse(), versions)\n      return validVersions.map(function (i) {\n        return 'chrome ' + e2c[i]\n      })\n    }\n  },\n  {\n    regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+major versions?$/i,\n    select: function (context, versions, name) {\n      var data = checkName(name)\n      var validVersions = getMajorVersions(data.released, versions)\n      return validVersions.map(nameMapper(data.name))\n    }\n  },\n  {\n    regexp: /^last\\s+(\\d+)\\s+electron\\s+versions?$/i,\n    select: function (context, versions) {\n      return Object.keys(e2c).reverse().slice(-versions).map(function (i) {\n        return 'chrome ' + e2c[i]\n      })\n    }\n  },\n  {\n    regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+versions?$/i,\n    select: function (context, versions, name) {\n      var data = checkName(name)\n      return data.released.slice(-versions).map(nameMapper(data.name))\n    }\n  },\n  {\n    regexp: /^unreleased\\s+versions$/i,\n    select: function () {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name)\n        if (!data) return selected\n        var array = data.versions.filter(function (v) {\n          return data.released.indexOf(v) === -1\n        })\n\n        array = array.map(nameMapper(data.name))\n        return selected.concat(array)\n      }, [])\n    }\n  },\n  {\n    regexp: /^unreleased\\s+electron\\s+versions?$/i,\n    select: function () {\n      return []\n    }\n  },\n  {\n    regexp: /^unreleased\\s+(\\w+)\\s+versions?$/i,\n    select: function (context, name) {\n      var data = checkName(name)\n      return data.versions.filter(function (v) {\n        return data.released.indexOf(v) === -1\n      }).map(nameMapper(data.name))\n    }\n  },\n  {\n    regexp: /^last\\s+(\\d+)\\s+years?$/i,\n    select: function (context, years) {\n      var date = new Date()\n      var since = date.setFullYear(date.getFullYear() - years) / 1000\n\n      return filterByYear(since)\n    }\n  },\n  {\n    regexp: /^since (\\d+)(?:-(\\d+))?(?:-(\\d+))?$/i,\n    select: function (context, year, month, date) {\n      year = parseInt(year)\n      month = parseInt(month || '01') - 1\n      date = parseInt(date || '01')\n      var since = Date.UTC(year, month, date, 0, 0, 0) / 1000\n\n      return filterByYear(since)\n    }\n  },\n  {\n    regexp: /^(>=?|<=?)\\s*(\\d*\\.?\\d+)%$/,\n    select: function (context, sign, popularity) {\n      popularity = parseFloat(popularity)\n      var usage = browserslist.usage.global\n\n      return Object.keys(usage).reduce(function (result, version) {\n        if (sign === '>') {\n          if (usage[version] > popularity) {\n            result.push(version)\n          }\n        } else if (sign === '<') {\n          if (usage[version] < popularity) {\n            result.push(version)\n          }\n        } else if (sign === '<=') {\n          if (usage[version] <= popularity) {\n            result.push(version)\n          }\n        } else if (usage[version] >= popularity) {\n          result.push(version)\n        }\n        return result\n      }, [])\n    }\n  },\n  {\n    regexp: /^(>=?|<=?)\\s*(\\d*\\.?\\d+)%\\s+in\\s+my\\s+stats$/,\n    select: function (context, sign, popularity) {\n      popularity = parseFloat(popularity)\n\n      if (!context.customUsage) {\n        throw new BrowserslistError('Custom usage statistics was not provided')\n      }\n\n      var usage = context.customUsage\n\n      return Object.keys(usage).reduce(function (result, version) {\n        if (sign === '>') {\n          if (usage[version] > popularity) {\n            result.push(version)\n          }\n        } else if (sign === '<') {\n          if (usage[version] < popularity) {\n            result.push(version)\n          }\n        } else if (sign === '<=') {\n          if (usage[version] <= popularity) {\n            result.push(version)\n          }\n        } else if (usage[version] >= popularity) {\n          result.push(version)\n        }\n        return result\n      }, [])\n    }\n  },\n  {\n    regexp: /^(>=?|<=?)\\s*(\\d*\\.?\\d+)%\\s+in\\s+((alt-)?\\w\\w)$/,\n    select: function (context, sign, popularity, place) {\n      popularity = parseFloat(popularity)\n\n      if (place.length === 2) {\n        place = place.toUpperCase()\n      } else {\n        place = place.toLowerCase()\n      }\n\n      loadCountryStatistics(place)\n      var usage = browserslist.usage[place]\n\n      return Object.keys(usage).reduce(function (result, version) {\n        if (sign === '>') {\n          if (usage[version] > popularity) {\n            result.push(version)\n          }\n        } else if (sign === '<') {\n          if (usage[version] < popularity) {\n            result.push(version)\n          }\n        } else if (sign === '<=') {\n          if (usage[version] <= popularity) {\n            result.push(version)\n          }\n        } else if (usage[version] >= popularity) {\n          result.push(version)\n        }\n        return result\n      }, [])\n    }\n  },\n  {\n    regexp: /^electron\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n    select: function (context, from, to) {\n      if (!e2c[from]) {\n        throw new BrowserslistError('Unknown version ' + from + ' of electron')\n      }\n      if (!e2c[to]) {\n        throw new BrowserslistError('Unknown version ' + to + ' of electron')\n      }\n\n      from = parseFloat(from)\n      to = parseFloat(to)\n\n      return Object.keys(e2c).filter(function (i) {\n        var parsed = parseFloat(i)\n        return parsed >= from && parsed <= to\n      }).map(function (i) {\n        return 'chrome ' + e2c[i]\n      })\n    }\n  },\n  {\n    regexp: /^(\\w+)\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n    select: function (context, name, from, to) {\n      var data = checkName(name)\n      from = parseFloat(normalizeVersion(data, from) || from)\n      to = parseFloat(normalizeVersion(data, to) || to)\n\n      function filter (v) {\n        var parsed = parseFloat(v)\n        return parsed >= from && parsed <= to\n      }\n\n      return data.released.filter(filter).map(nameMapper(data.name))\n    }\n  },\n  {\n    regexp: /^electron\\s*(>=?|<=?)\\s*([\\d.]+)$/i,\n    select: function (context, sign, version) {\n      return Object.keys(e2c)\n        .filter(generateFilter(sign, version))\n        .map(function (i) {\n          return 'chrome ' + e2c[i]\n        })\n    }\n  },\n  {\n    regexp: /^(\\w+)\\s*(>=?|<=?)\\s*([\\d.]+)$/,\n    select: function (context, name, sign, version) {\n      var data = checkName(name)\n      var alias = browserslist.versionAliases[data.name][version]\n      if (alias) {\n        version = alias\n      }\n      return data.released\n        .filter(generateFilter(sign, version))\n        .map(function (v) {\n          return data.name + ' ' + v\n        })\n    }\n  },\n  {\n    regexp: /^(firefox|ff|fx)\\s+esr$/i,\n    select: function () {\n      return ['firefox 52']\n    }\n  },\n  {\n    regexp: /(operamini|op_mini)\\s+all/i,\n    select: function () {\n      return ['op_mini all']\n    }\n  },\n  {\n    regexp: /^electron\\s+([\\d.]+)$/i,\n    select: function (context, version) {\n      var chrome = e2c[version]\n      if (!chrome) {\n        throw new BrowserslistError(\n          'Unknown version ' + version + ' of electron')\n      }\n      return ['chrome ' + chrome]\n    }\n  },\n  {\n    regexp: /^(\\w+)\\s+(tp|[\\d.]+)$/i,\n    select: function (context, name, version) {\n      if (/^tp$/i.test(version)) version = 'TP'\n      var data = checkName(name)\n      var alias = normalizeVersion(data, version)\n      if (alias) {\n        version = alias\n      } else {\n        if (version.indexOf('.') === -1) {\n          alias = version + '.0'\n        } else if (/\\.0$/.test(version)) {\n          alias = version.replace(/\\.0$/, '')\n        }\n        alias = normalizeVersion(data, alias)\n        if (alias) {\n          version = alias\n        } else {\n          throw new BrowserslistError(\n            'Unknown version ' + version + ' of ' + name)\n        }\n      }\n      return [data.name + ' ' + version]\n    }\n  },\n  {\n    regexp: /^extends (.+)$/i,\n    select: function (context, name) {\n      return resolve(env.loadQueries(context, name), context)\n    }\n  },\n  {\n    regexp: /^defaults$/i,\n    select: function () {\n      return browserslist(browserslist.defaults)\n    }\n  }\n];\n\n// Get and convert Can I Use data\n\n(function () {\n  for (var name in agents) {\n    var browser = agents[name]\n    browserslist.data[name] = {\n      name: name,\n      versions: normalize(agents[name].versions),\n      released: normalize(agents[name].versions.slice(0, -3)),\n      releaseDate: agents[name].release_date\n    }\n    fillUsage(browserslist.usage.global, name, browser.usage_global)\n\n    browserslist.versionAliases[name] = { }\n    for (var i = 0; i < browser.versions.length; i++) {\n      var full = browser.versions[i]\n      if (!full) continue\n\n      if (full.indexOf('-') !== -1) {\n        var interval = full.split('-')\n        for (var j = 0; j < interval.length; j++) {\n          browserslist.versionAliases[name][interval[j]] = full\n        }\n      }\n    }\n  }\n}())\n\nmodule.exports = browserslist\n","function BrowserslistError (message) {\n  this.name = 'BrowserslistError'\n  this.message = message || ''\n  this.browserslist = true\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, BrowserslistError)\n  }\n}\n\nBrowserslistError.prototype = Error.prototype\n\nmodule.exports = BrowserslistError\n","var path = require('path')\nvar fs = require('fs')\n\nvar BrowserslistError = require('./error')\n\nvar IS_SECTION = /^\\s*\\[(.+)\\]\\s*$/\nvar CONFIG_PATTERN = /^browserslist-config-/\nvar SCOPED_CONFIG__PATTERN = /@[^./]+\\/browserslist-config(-|$)/\n\nvar filenessCache = { }\nvar configCache = { }\n\nfunction checkExtend (name) {\n  var use = ' Use `dangerousExtend` option to disable.'\n  if (!CONFIG_PATTERN.test(name) && !SCOPED_CONFIG__PATTERN.test(name)) {\n    throw new BrowserslistError(\n      'Browserslist config needs `browserslist-config-` prefix. ' + use)\n  }\n  if (name.indexOf('.') !== -1) {\n    throw new BrowserslistError(\n      '`.` not allowed in Browserslist config name. ' + use)\n  }\n  if (name.indexOf('node_modules') !== -1) {\n    throw new BrowserslistError(\n      '`node_modules` not allowed in Browserslist config.' + use)\n  }\n}\n\nfunction isFile (file) {\n  if (file in filenessCache) {\n    return filenessCache[file]\n  }\n  var result = fs.existsSync(file) && fs.statSync(file).isFile()\n  if (!process.env.BROWSERSLIST_DISABLE_CACHE) {\n    filenessCache[file] = result\n  }\n  return result\n}\n\nfunction eachParent (file, callback) {\n  var loc = path.resolve(file)\n  do {\n    var result = callback(loc)\n    if (typeof result !== 'undefined') return result\n  } while (loc !== (loc = path.dirname(loc)))\n  return undefined\n}\n\nfunction pickEnv (config, opts) {\n  if (typeof config !== 'object') return config\n\n  var name\n  if (typeof opts.env === 'string') {\n    name = opts.env\n  } else if (process.env.BROWSERSLIST_ENV) {\n    name = process.env.BROWSERSLIST_ENV\n  } else if (process.env.NODE_ENV) {\n    name = process.env.NODE_ENV\n  } else {\n    name = 'development'\n  }\n\n  return config[name] || config.defaults\n}\n\nfunction parsePackage (file) {\n  var config = JSON.parse(fs.readFileSync(file))\n  if (config.browserlist && !config.browserslist) {\n    throw new BrowserslistError(\n      '`browserlist` key instead of `browserslist` in ' + file)\n  }\n  var list = config.browserslist\n  if (typeof list === 'object' && list.length) {\n    list = { defaults: list }\n  }\n  return list\n}\n\nmodule.exports = {\n  loadQueries: function loadQueries (context, name) {\n    if (!context.dangerousExtend) checkExtend(name)\n    // eslint-disable-next-line security/detect-non-literal-require\n    var queries = require(name)\n    if (!Array.isArray(queries)) {\n      throw new BrowserslistError(\n        '`' + name + '` config exports not an array of queries')\n    }\n    return queries\n  },\n\n  getStat: function getStat (opts) {\n    var stats\n    if (opts.stats) {\n      stats = opts.stats\n    } else if (process.env.BROWSERSLIST_STATS) {\n      stats = process.env.BROWSERSLIST_STATS\n    } else if (opts.path && path.resolve && fs.existsSync) {\n      stats = eachParent(opts.path, function (dir) {\n        var file = path.join(dir, 'browserslist-stats.json')\n        return isFile(file) ? file : undefined\n      })\n    }\n\n    if (typeof stats === 'string') {\n      try {\n        stats = JSON.parse(fs.readFileSync(stats))\n      } catch (e) {\n        throw new BrowserslistError('Can\\'t read ' + stats)\n      }\n    }\n\n    return stats\n  },\n\n  loadConfig: function loadConfig (opts) {\n    if (process.env.BROWSERSLIST) {\n      return process.env.BROWSERSLIST\n    } else if (opts.config || process.env.BROWSERSLIST_CONFIG) {\n      var file = opts.config || process.env.BROWSERSLIST_CONFIG\n      if (path.basename(file) === 'package.json') {\n        return pickEnv(parsePackage(file), opts)\n      } else {\n        return pickEnv(module.exports.readConfig(file), opts)\n      }\n    } else if (opts.path) {\n      return pickEnv(module.exports.findConfig(opts.path), opts)\n    } else {\n      return undefined\n    }\n  },\n\n  parseConfig: function parseConfig (string) {\n    var result = { defaults: [] }\n    var section = 'defaults'\n\n    string.toString()\n      .replace(/#[^\\n]*/g, '')\n      .split(/\\n/)\n      .map(function (line) {\n        return line.trim()\n      })\n      .filter(function (line) {\n        return line !== ''\n      })\n      .forEach(function (line) {\n        if (IS_SECTION.test(line)) {\n          section = line.match(IS_SECTION)[1].trim()\n          result[section] = result[section] || []\n        } else {\n          result[section].push(line)\n        }\n      })\n\n    return result\n  },\n\n  readConfig: function readConfig (file) {\n    if (!isFile(file)) {\n      throw new BrowserslistError('Can\\'t read ' + file + ' config')\n    }\n    return module.exports.parseConfig(fs.readFileSync(file))\n  },\n\n  findConfig: function findConfig (from) {\n    from = path.resolve(from)\n\n    var cacheKey = isFile(from) ? path.dirname(from) : from\n    if (cacheKey in configCache) {\n      return configCache[cacheKey]\n    }\n\n    var resolved = eachParent(from, function (dir) {\n      var config = path.join(dir, 'browserslist')\n      var pkg = path.join(dir, 'package.json')\n      var rc = path.join(dir, '.browserslistrc')\n\n      var pkgBrowserslist\n      if (isFile(pkg)) {\n        try {\n          pkgBrowserslist = parsePackage(pkg)\n        } catch (e) {\n          if (e.name === 'BrowserslistError') throw e\n          console.warn(\n            '[Browserslist] Could not parse ' + pkg + '. Ignoring it.')\n        }\n      }\n\n      if (isFile(config) && pkgBrowserslist) {\n        throw new BrowserslistError(\n          dir + ' contains both browserslist and package.json with browsers')\n      } else if (isFile(rc) && pkgBrowserslist) {\n        throw new BrowserslistError(\n          dir + ' contains both .browserslistrc and package.json with browsers')\n      } else if (isFile(config) && isFile(rc)) {\n        throw new BrowserslistError(\n          dir + ' contains both .browserslistrc and browserslist')\n      } else if (isFile(config)) {\n        return module.exports.readConfig(config)\n      } else if (isFile(rc)) {\n        return module.exports.readConfig(rc)\n      } else {\n        return pkgBrowserslist\n      }\n    })\n    if (!process.env.BROWSERSLIST_DISABLE_CACHE) {\n      configCache[cacheKey] = resolved\n    }\n    return resolved\n  },\n\n  clearCaches: function clearCaches () {\n    filenessCache = { }\n    configCache = { }\n  }\n}\n"]}