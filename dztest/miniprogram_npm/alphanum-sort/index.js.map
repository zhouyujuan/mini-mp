{"version":3,"sources":["index.js","compare.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var compare = require('./compare');\n\nfunction mediator(a, b) {\n\treturn compare(this, a.converted, b.converted);\n}\n\nmodule.exports = function (array, opts) {\n\tif (!Array.isArray(array) || array.length < 2) {\n\t\treturn array;\n\t}\n\tif (typeof opts !== 'object') {\n\t\topts = {};\n\t}\n\topts.sign = !!opts.sign;\n\tvar insensitive = !!opts.insensitive;\n\tvar result = Array(array.length);\n\tvar i, max, value;\n\n\tfor (i = 0, max = array.length; i < max; i += 1) {\n\t\tvalue = String(array[i]);\n\t\tresult[i] = {\n\t\t\tvalue: array[i],\n\t\t\tconverted: insensitive ? value.toLowerCase() : value\n\t\t};\n\t}\n\n\tresult.sort(mediator.bind(opts));\n\n\tfor (i = result.length - 1; ~i; i -= 1) {\n\t\tresult[i] = result[i].value;\n\t}\n\n\treturn result;\n};\n","var zero = '0'.charCodeAt(0);\r\nvar plus = '+'.charCodeAt(0);\r\nvar minus = '-'.charCodeAt(0);\r\n\r\nfunction isWhitespace(code) {\r\n\treturn code <= 32;\r\n}\r\n\r\nfunction isDigit(code) {\r\n\treturn 48 <= code && code <= 57;\r\n}\r\n\r\nfunction isSign(code) {\r\n\treturn code === minus || code === plus;\r\n}\r\n\r\nmodule.exports = function (opts, a, b) {\r\n\tvar checkSign = opts.sign;\r\n\tvar ia = 0;\r\n\tvar ib = 0;\r\n\tvar ma = a.length;\r\n\tvar mb = b.length;\r\n\tvar ca, cb; // character code\r\n\tvar za, zb; // leading zero count\r\n\tvar na, nb; // number length\r\n\tvar sa, sb; // number sign\r\n\tvar ta, tb; // temporary\r\n\tvar bias;\r\n\r\n\twhile (ia < ma && ib < mb) {\r\n\t\tca = a.charCodeAt(ia);\r\n\t\tcb = b.charCodeAt(ib);\r\n\t\tza = zb = 0;\r\n\t\tna = nb = 0;\r\n\t\tsa = sb = true;\r\n\t\tbias = 0;\r\n\r\n\t\t// skip over leading spaces\r\n\t\twhile (isWhitespace(ca)) {\r\n\t\t\tia += 1;\r\n\t\t\tca = a.charCodeAt(ia);\r\n\t\t}\r\n\t\twhile (isWhitespace(cb)) {\r\n\t\t\tib += 1;\r\n\t\t\tcb = b.charCodeAt(ib);\r\n\t\t}\r\n\r\n\t\t// skip and save sign\r\n\t\tif (checkSign) {\r\n\t\t\tta = a.charCodeAt(ia + 1);\r\n\t\t\tif (isSign(ca) && isDigit(ta)) {\r\n\t\t\t\tif (ca === minus) {\r\n\t\t\t\t\tsa = false;\r\n\t\t\t\t}\r\n\t\t\t\tia += 1;\r\n\t\t\t\tca = ta;\r\n\t\t\t}\r\n\t\t\ttb = b.charCodeAt(ib + 1);\r\n\t\t\tif (isSign(cb) && isDigit(tb)) {\r\n\t\t\t\tif (cb === minus) {\r\n\t\t\t\t\tsb = false;\r\n\t\t\t\t}\r\n\t\t\t\tib += 1;\r\n\t\t\t\tcb = tb;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// compare digits with other symbols\r\n\t\tif (isDigit(ca) && !isDigit(cb)) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (!isDigit(ca) && isDigit(cb)) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\t// compare negative and positive\r\n\t\tif (!sa && sb) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (sa && !sb) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\t// count leading zeros\r\n\t\twhile (ca === zero) {\r\n\t\t\tza += 1;\r\n\t\t\tia += 1;\r\n\t\t\tca = a.charCodeAt(ia);\r\n\t\t}\r\n\t\twhile (cb === zero) {\r\n\t\t\tzb += 1;\r\n\t\t\tib += 1;\r\n\t\t\tcb = b.charCodeAt(ib);\r\n\t\t}\r\n\r\n\t\t// count numbers\r\n\t\twhile (isDigit(ca) || isDigit(cb)) {\r\n\t\t\tif (isDigit(ca) && isDigit(cb) && bias === 0) {\r\n\t\t\t\tif (sa) {\r\n\t\t\t\t\tif (ca < cb) {\r\n\t\t\t\t\t\tbias = -1;\r\n\t\t\t\t\t} else if (ca > cb) {\r\n\t\t\t\t\t\tbias = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (ca > cb) {\r\n\t\t\t\t\t\tbias = -1;\r\n\t\t\t\t\t} else if (ca < cb) {\r\n\t\t\t\t\t\tbias = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (isDigit(ca)) {\r\n\t\t\t\tia += 1;\r\n\t\t\t\tna += 1;\r\n\t\t\t\tca = a.charCodeAt(ia);\r\n\t\t\t}\r\n\t\t\tif (isDigit(cb)) {\r\n\t\t\t\tib += 1;\r\n\t\t\t\tnb += 1;\r\n\t\t\t\tcb = b.charCodeAt(ib);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// compare number length\r\n\t\tif (sa) {\r\n\t\t\tif (na < nb) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tif (na > nb) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (na > nb) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tif (na < nb) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// compare numbers\r\n\t\tif (bias) {\r\n\t\t\treturn bias;\r\n\t\t}\r\n\r\n\t\t// compare leading zeros\r\n\t\tif (sa) {\r\n\t\t\tif (za > zb) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tif (za < zb) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (za < zb) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tif (za > zb) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// compare ascii codes\r\n\t\tif (ca < cb) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (ca > cb) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\tia += 1;\r\n\t\tib += 1;\r\n\t}\r\n\r\n\t// compare length\r\n\tif (ma < mb) {\r\n\t\treturn -1;\r\n\t}\r\n\tif (ma > mb) {\r\n\t\treturn 1;\r\n\t}\r\n};\r\n"]}