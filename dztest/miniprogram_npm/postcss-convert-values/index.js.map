{"version":3,"sources":["index.js","lib/convert.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _convert = require('./lib/convert');\n\nvar _convert2 = _interopRequireDefault(_convert);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst LENGTH_UNITS = ['em', 'ex', 'ch', 'rem', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'q', 'in', 'pt', 'pc', 'px'];\n\nfunction parseWord(node, opts, keepZeroUnit) {\n    const pair = (0, _postcssValueParser.unit)(node.value);\n    if (pair) {\n        const num = Number(pair.number);\n        const u = pair.unit;\n        if (num === 0) {\n            node.value = keepZeroUnit || !~LENGTH_UNITS.indexOf(u.toLowerCase()) && u !== '%' ? 0 + u : 0;\n        } else {\n            node.value = (0, _convert2.default)(num, u, opts);\n\n            if (typeof opts.precision === 'number' && u.toLowerCase() === 'px' && ~pair.number.indexOf('.')) {\n                const precision = Math.pow(10, opts.precision);\n                node.value = Math.round(parseFloat(node.value) * precision) / precision + u;\n            }\n        }\n    }\n}\n\nfunction clampOpacity(node) {\n    const pair = (0, _postcssValueParser.unit)(node.value);\n    if (!pair) {\n        return;\n    }\n    let num = Number(pair.number);\n    if (num > 1) {\n        node.value = 1 + pair.unit;\n    } else if (num < 0) {\n        node.value = 0 + pair.unit;\n    }\n}\n\nfunction shouldStripPercent(decl) {\n    const { parent } = decl;\n    const lowerCasedProp = decl.prop.toLowerCase();\n    return ~decl.value.indexOf('%') && (lowerCasedProp === 'max-height' || lowerCasedProp === 'height') || parent.parent && parent.parent.name && parent.parent.name.toLowerCase() === 'keyframes' && lowerCasedProp === 'stroke-dasharray' || lowerCasedProp === 'stroke-dashoffset' || lowerCasedProp === 'stroke-width';\n}\n\nfunction transform(opts, decl) {\n    const lowerCasedProp = decl.prop.toLowerCase();\n    if (~lowerCasedProp.indexOf('flex') || lowerCasedProp.indexOf('--') === 0) {\n        return;\n    }\n\n    decl.value = (0, _postcssValueParser2.default)(decl.value).walk(node => {\n        const lowerCasedValue = node.value.toLowerCase();\n\n        if (node.type === 'word') {\n            parseWord(node, opts, shouldStripPercent(decl));\n            if (lowerCasedProp === 'opacity' || lowerCasedProp === 'shape-image-threshold') {\n                clampOpacity(node);\n            }\n        } else if (node.type === 'function') {\n            if (lowerCasedValue === 'calc' || lowerCasedValue === 'hsl' || lowerCasedValue === 'hsla') {\n                (0, _postcssValueParser.walk)(node.nodes, n => {\n                    if (n.type === 'word') {\n                        parseWord(n, opts, true);\n                    }\n                });\n                return false;\n            }\n            if (lowerCasedValue === 'url') {\n                return false;\n            }\n        }\n    }).toString();\n}\n\nconst plugin = 'postcss-convert-values';\n\nexports.default = _postcss2.default.plugin(plugin, (opts = { precision: false }) => {\n    return css => css.walkDecls(transform.bind(null, opts));\n});\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (number, unit, { time, length, angle }) {\n    let value = dropLeadingZero(number) + (unit ? unit : '');\n    let converted;\n\n    if (length !== false && unit.toLowerCase() in lengthConv) {\n        converted = transform(number, unit, lengthConv);\n    }\n\n    if (time !== false && unit.toLowerCase() in timeConv) {\n        converted = transform(number, unit, timeConv);\n    }\n\n    if (angle !== false && unit.toLowerCase() in angleConv) {\n        converted = transform(number, unit, angleConv);\n    }\n\n    if (converted && converted.length < value.length) {\n        value = converted;\n    }\n\n    return value;\n};\n\nconst lengthConv = {\n    in: 96,\n    px: 1,\n    pt: 4 / 3,\n    pc: 16\n};\n\nconst timeConv = {\n    s: 1000,\n    ms: 1\n};\n\nconst angleConv = {\n    turn: 360,\n    deg: 1\n};\n\nfunction dropLeadingZero(number) {\n    const value = String(number);\n\n    if (number % 1) {\n        if (value[0] === '0') {\n            return value.slice(1);\n        }\n\n        if (value[0] === '-' && value[1] === '0') {\n            return '-' + value.slice(2);\n        }\n    }\n\n    return value;\n}\n\nfunction transform(number, unit, conversion) {\n    const lowerCasedUnit = unit.toLowerCase();\n    let one, base;\n    let convertionUnits = Object.keys(conversion).filter(u => {\n        if (conversion[u] === 1) {\n            one = u;\n        }\n        return lowerCasedUnit !== u;\n    });\n\n    if (lowerCasedUnit === one) {\n        base = number / conversion[lowerCasedUnit];\n    } else {\n        base = number * conversion[lowerCasedUnit];\n    }\n\n    return convertionUnits.map(u => dropLeadingZero(base / conversion[u]) + u).reduce((a, b) => a.length < b.length ? a : b);\n}\n\nmodule.exports = exports['default'];"]}