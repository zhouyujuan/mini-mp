{"version":3,"sources":["index.js","lib/isRGB.js","lib/isRGBA.js","lib/isHSL.js","lib/isHSLA.js","lib/isHex.js","lib/isCSSColorName.js","lib/isTransparent.js","lib/isCSSLengthUnit.js","lib/isStop.js","util/unit.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,ACHA,AHSA,ACHA;AFOA,AGTA,ACHA,AFMA;AFOA,AGTA,ACHA,AFMA;AFOA,AGTA,ACHA,ACHA,AHSA;AFOA,AGTA,ACHA,ACHA;ALgBA,AGTA,ACHA,ACHA;ALgBA,AMlBA,AHSA,ACHA,ACHA;ALgBA,AMlBA,AFMA,ACHA;ALgBA,AMlBA,AFMA,ACHA;ALgBA,AMlBA,AFMA,ACHA,AENA;APsBA,AMlBA,ADGA,AENA;APsBA,AMlBA,ADGA,AENA;APsBA,AMlBA,AENA,AHSA,AENA;APsBA,AMlBA,AENA,ADGA;APsBA,AMlBA,AENA,ADGA;APsBA,AMlBA,AENA,ACHA,AFMA;APsBA,AQxBA,ACHA,AFMA;APsBA,AQxBA,ACHA;AT4BA,AQxBA,ACHA,ACHA;AV+BA,AQxBA,ACHA,ACHA;AV+BA,AQxBA,ACHA,ACHA;AV+BA,AQxBA,ACHA,ACHA;AV+BA,AQxBA,ACHA,ACHA;AV+BA,AQxBA,ACHA,ACHA;AV+BA,AQxBA,ACHA,ACHA;AV+BA,AQxBA,ACHA,ACHA;AV+BA,AQxBA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nconst isRGB = require('./lib/isRGB');\nconst isRGBA = require('./lib/isRGBA');\nconst isHSL = require('./lib/isHSL');\nconst isHSLA = require('./lib/isHSLA');\nconst isHex = require('./lib/isHex');\nconst isCSSColorName = require('./lib/isCSSColorName');\nconst isTransparent = require('./lib/isTransparent');\nconst isCSSLengthUnit = require('./lib/isCSSLengthUnit');\nconst isStop = require('./lib/isStop');\n\nfunction isColor(colorStr) {\n  const color =\n    isRGB(colorStr) ||\n    isRGBA(colorStr) ||\n    isHSL(colorStr) ||\n    isHSLA(colorStr) ||\n    isHex(colorStr) ||\n    isCSSColorName(colorStr) ||\n    isTransparent(colorStr);\n\n  return color;\n}\n\n\nmodule.exports = function isColorStop(color, stop) {\n  return isColor(color) && isStop(stop);\n};\nmodule.exports.isColor = isColor;\nmodule.exports.isRGB = isRGB;\nmodule.exports.isRGBA = isRGBA;\nmodule.exports.isHSL = isHSL;\nmodule.exports.isHSLA = isHSLA;\nmodule.exports.isHex = isHex;\nmodule.exports.isCSSColorName = isCSSColorName;\nmodule.exports.isTransparent = isTransparent;\nmodule.exports.isCSSLengthUnit = isCSSLengthUnit;\n","\n\nconst rgbRegex = require('rgb-regex');\n\nfunction isRGB(str) {\n  return rgbRegex({ exact: true }).test(str);\n}\n\nmodule.exports = isRGB;\n","\n\nconst rgbaRegex = require('rgba-regex');\n\nfunction isRgba(str) {\n  return rgbaRegex({ exact: true }).test(str);\n}\n\nmodule.exports = isRgba;\n","\n\nconst hslRegex = require('hsl-regex');\n\nfunction isHSL(str) {\n  return hslRegex({ exact: true }).test(str);\n}\n\nmodule.exports = isHSL;\n","\n\nconst hslaRegex = require('hsla-regex');\n\nfunction isHSLA(str) {\n  return hslaRegex({ exact: true }).test(str);\n}\n\nmodule.exports = isHSLA;\n","\n\nconst hexRegex = require('hex-color-regex');\n\nfunction isHex(str) {\n  return hexRegex({ exact: true }).test(str);\n}\n\nmodule.exports = isHex;\n","\n\nconst colorNames = require('css-color-names');\n\nfunction isCSSColorName(str) {\n  return !!colorNames[str];\n}\n\nmodule.exports = isCSSColorName;\n","\n\nfunction isTransparent(str) {\n  return str === 'transparent';\n}\n\nmodule.exports = isTransparent;\n","\n\nconst lengthArray = [\n  'PX',\n  'IN',\n  'CM',\n  'MM',\n  'EM',\n  'REM',\n  'POINTS',\n  'PC',\n  'EX',\n  'CH',\n  'VW',\n  'VH',\n  'VMIN',\n  'VMAX',\n  '%',\n];\n\nfunction isCSSLengthUnit(unit) {\n  return lengthArray.indexOf(unit.toUpperCase()) >= 0;\n}\n\nmodule.exports = isCSSLengthUnit;\n","\n\nconst isCSSLengthUnit = require('./isCSSLengthUnit');\nconst unit = require('../util/unit');\n\nfunction isStop(str) {\n  let stop = !str;\n  \n  if (!stop) {\n    const node = unit(str);\n    if (node) {\n      if (node.number === 0 || (!isNaN(node.number) && isCSSLengthUnit(node.unit))) {\n        stop = true;\n      }\n    } else {\n      stop = (/^calc\\(\\S+\\)$/g).test(str);\n    }\n  }\n\n  return stop;\n}\n\nmodule.exports = isStop;\n","\n\n/**\n * https://github.com/TrySound/postcss-value-parser/blob/fc679a7e17877841ff9fe455722280b65abd4f28/lib/unit.js\n * parse node -> number and unit\n */\n\nconst minus = '-'.charCodeAt(0);\nconst plus = '+'.charCodeAt(0);\nconst dot = '.'.charCodeAt(0);\n\nmodule.exports = function unit(value) {\n  let pos = 0;\n  const length = value.length;\n  let dotted = false;\n  let containsNumber = false;\n  let code;\n  let number = '';\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code >= 48 && code <= 57) {\n      number += value[pos];\n      containsNumber = true;\n    } else if (code === dot) {\n      if (dotted) {\n        break;\n      }\n      dotted = true;\n      number += value[pos];\n    } else if (code === plus || code === minus) {\n      if (pos !== 0) {\n        break;\n      }\n      number += value[pos];\n    } else {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  return containsNumber ? {\n    number,\n    unit: value.slice(pos),\n  } : false;\n};\n"]}