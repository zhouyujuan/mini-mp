{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nexports.__esModule = true;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _symbol = require(\"babel-runtime/core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nexports.default = function (_ref) {\n  var t = _ref.types;\n\n  var ALREADY_VISITED = (0, _symbol2.default)();\n\n  function findConstructorCall(path) {\n    var methods = path.get(\"body.body\");\n\n    for (var _iterator = methods, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref2;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref2 = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref2 = _i.value;\n      }\n\n      var method = _ref2;\n\n      if (method.node.kind === \"constructorCall\") {\n        return method;\n      }\n    }\n\n    return null;\n  }\n\n  function handleClassWithCall(constructorCall, classPath) {\n    var _classPath = classPath,\n        node = _classPath.node;\n\n    var ref = node.id || classPath.scope.generateUidIdentifier(\"class\");\n\n    if (classPath.parentPath.isExportDefaultDeclaration()) {\n      classPath = classPath.parentPath;\n      classPath.insertAfter(t.exportDefaultDeclaration(ref));\n    }\n\n    classPath.replaceWithMultiple(buildWrapper({\n      CLASS_REF: classPath.scope.generateUidIdentifier(ref.name),\n      CALL_REF: classPath.scope.generateUidIdentifier(ref.name + \"Call\"),\n      CALL: t.functionExpression(null, constructorCall.node.params, constructorCall.node.body),\n      CLASS: t.toExpression(node),\n      WRAPPER_REF: ref\n    }));\n\n    constructorCall.remove();\n  }\n\n  return {\n    inherits: require(\"babel-plugin-syntax-class-constructor-call\"),\n\n    visitor: {\n      Class: function Class(path) {\n        if (path.node[ALREADY_VISITED]) return;\n        path.node[ALREADY_VISITED] = true;\n\n        var constructorCall = findConstructorCall(path);\n\n        if (constructorCall) {\n          handleClassWithCall(constructorCall, path);\n        } else {\n          return;\n        }\n      }\n    }\n  };\n};\n\nvar _babelTemplate = require(\"babel-template\");\n\nvar _babelTemplate2 = _interopRequireDefault(_babelTemplate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar buildWrapper = (0, _babelTemplate2.default)(\"\\n  let CLASS_REF = CLASS;\\n  var CALL_REF = CALL;\\n  var WRAPPER_REF = function (...args) {\\n    if (this instanceof WRAPPER_REF) {\\n      return Reflect.construct(CLASS_REF, args);\\n    } else {\\n      return CALL_REF.apply(this, args);\\n    }\\n  };\\n  WRAPPER_REF.__proto__ = CLASS_REF;\\n  WRAPPER_REF;\\n\");\n\nmodule.exports = exports[\"default\"];"]}