{"version":3,"sources":["index.js","lib/commentRemover.js","lib/commentParser.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA;AFOA,AENA;AFOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _commentRemover = require(\"./lib/commentRemover\");\n\nvar _commentRemover2 = _interopRequireDefault(_commentRemover);\n\nvar _commentParser = require(\"./lib/commentParser\");\n\nvar _commentParser2 = _interopRequireDefault(_commentParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst { space } = _postcss.list;\n\nexports.default = (0, _postcss.plugin)(\"postcss-discard-comments\", (opts = {}) => {\n    const remover = new _commentRemover2.default(opts);\n    const matcherCache = {};\n    const replacerCache = {};\n\n    function matchesComments(source) {\n        if (matcherCache[source]) {\n            return matcherCache[source];\n        }\n\n        const result = (0, _commentParser2.default)(source).filter(([type]) => type);\n\n        matcherCache[source] = result;\n\n        return result;\n    }\n\n    function replaceComments(source, separator = \" \") {\n        const key = source + \"@|@\" + separator;\n\n        if (replacerCache[key]) {\n            return replacerCache[key];\n        }\n\n        const parsed = (0, _commentParser2.default)(source).reduce((value, [type, start, end]) => {\n            const contents = source.slice(start, end);\n\n            if (!type) {\n                return value + contents;\n            }\n\n            if (remover.canRemove(contents)) {\n                return value + separator;\n            }\n\n            return `${value}/*${contents}*/`;\n        }, \"\");\n\n        const result = space(parsed).join(\" \");\n\n        replacerCache[key] = result;\n\n        return result;\n    }\n\n    return css => {\n        css.walk(node => {\n            if (node.type === \"comment\" && remover.canRemove(node.text)) {\n                node.remove();\n\n                return;\n            }\n\n            if (node.raws.between) {\n                node.raws.between = replaceComments(node.raws.between);\n            }\n\n            if (node.type === \"decl\") {\n                if (node.raws.value && node.raws.value.raw) {\n                    if (node.raws.value.value === node.value) {\n                        node.value = replaceComments(node.raws.value.raw);\n                    } else {\n                        node.value = replaceComments(node.value);\n                    }\n\n                    node.raws.value = null;\n                }\n\n                if (node.raws.important) {\n                    node.raws.important = replaceComments(node.raws.important);\n\n                    const b = matchesComments(node.raws.important);\n\n                    node.raws.important = b.length ? node.raws.important : \"!important\";\n                }\n\n                return;\n            }\n\n            if (node.type === \"rule\" && node.raws.selector && node.raws.selector.raw) {\n                node.raws.selector.raw = replaceComments(node.raws.selector.raw, \"\");\n\n                return;\n            }\n\n            if (node.type === \"atrule\") {\n                if (node.raws.afterName) {\n                    const commentsReplaced = replaceComments(node.raws.afterName);\n\n                    if (!commentsReplaced.length) {\n                        node.raws.afterName = commentsReplaced + \" \";\n                    } else {\n                        node.raws.afterName = \" \" + commentsReplaced + \" \";\n                    }\n                }\n\n                if (node.raws.params && node.raws.params.raw) {\n                    node.raws.params.raw = replaceComments(node.raws.params.raw);\n                }\n            }\n        });\n    };\n});\nmodule.exports = exports[\"default\"];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction CommentRemover(options) {\n    this.options = options;\n}\n\nCommentRemover.prototype.canRemove = function (comment) {\n    const remove = this.options.remove;\n\n    if (remove) {\n        return remove(comment);\n    } else {\n        const isImportant = comment.indexOf('!') === 0;\n\n        if (!isImportant) {\n            return true;\n        }\n\n        if (this.options.removeAll || this._hasFirst) {\n            return true;\n        } else if (this.options.removeAllButFirst && !this._hasFirst) {\n            this._hasFirst = true;\n            return false;\n        }\n    }\n};\n\nexports.default = CommentRemover;\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = commentParser;\nfunction commentParser(input) {\n    const tokens = [];\n    const length = input.length;\n    let pos = 0;\n    let next;\n\n    while (pos < length) {\n        next = input.indexOf('/*', pos);\n\n        if (~next) {\n            tokens.push([0, pos, next]);\n            pos = next;\n\n            next = input.indexOf('*/', pos + 2);\n            tokens.push([1, pos + 2, next]);\n            pos = next + 2;\n        } else {\n            tokens.push([0, pos, length]);\n            pos = length;\n        }\n    }\n\n    return tokens;\n};\nmodule.exports = exports['default'];"]}