{"version":3,"sources":["index.js","processor.js","parser.js","selectors/root.js","selectors/container.js","selectors/node.js","selectors/types.js","selectors/selector.js","selectors/className.js","selectors/namespace.js","selectors/comment.js","selectors/id.js","selectors/tag.js","selectors/string.js","selectors/pseudo.js","selectors/attribute.js","selectors/universal.js","selectors/combinator.js","selectors/nesting.js","sortAscending.js","tokenize.js","tokenTypes.js","selectors/index.js","selectors/constructors.js","selectors/guards.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AGTA,ADGA;AHUA,AENA,ADGA,AGTA,ADGA;AHUA,AENA,ADGA,AGTA,ADGA;AHUA,AENA,ADGA,AGTA,ACHA,AFMA;AHUA,AENA,ADGA,AGTA,ACHA,AFMA;AHUA,AENA,ADGA,AGTA,ACHA,AFMA;AHUA,AENA,ADGA,AGTA,ACHA,AFMA,AGTA;ANmBA,AENA,ADGA,AGTA,ACHA,AFMA,AGTA;ANmBA,AENA,ADGA,AGTA,ACHA,AFMA,AGTA;ANmBA,AENA,ADGA,AGTA,ACHA,AFMA,AIZA,ADGA;ANmBA,AENA,ADGA,AGTA,ACHA,AFMA,AIZA,ADGA;ANmBA,AENA,ADGA,AGTA,ACHA,AFMA,AIZA,ADGA;ANmBA,AENA,ADGA,AOrBA,AJYA,ACHA,AFMA,AIZA,ADGA;ANmBA,AENA,ADGA,AOrBA,AJYA,ACHA,AFMA,AIZA,ADGA;AJaA,ADGA,AOrBA,AJYA,ACHA,AFMA,AIZA,ADGA;AJaA,ADGA,AOrBA,AJYA,AKfA,AJYA,AFMA,AIZA,ADGA;AJaA,ADGA,AOrBA,AJYA,AKfA,AJYA,AFMA,AIZA,ADGA;AJaA,ADGA,AOrBA,AJYA,AKfA,AJYA,AFMA,AIZA,ADGA;AJaA,ADGA,AOrBA,AENA,ANkBA,AKfA,AJYA,AFMA,AIZA,ADGA;AJaA,ADGA,AOrBA,AENA,ANkBA,AKfA,AJYA,AFMA,AIZA,ADGA;AJaA,ADGA,AOrBA,AENA,ANkBA,AKfA,AJYA,AFMA,AIZA,ADGA;AJaA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA;ALgBA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA;ALgBA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA;ALgBA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA,AKfA;AV+BA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA,AKfA;AV+BA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA,AKfA;AV+BA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA,AMlBA,ADGA;AV+BA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA,AMlBA,ADGA;AV+BA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AFMA,AIZA,AMlBA,ADGA;AV+BA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA;AV+BA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA;AV+BA,ADGA,AOrBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA;AV+BA,ADGA,Ac1CA,APqBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA;AV+BA,ADGA,Ac1CA,APqBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA;AV+BA,ADGA,Ac1CA,APqBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA;AV+BA,ADGA,Ac1CA,APqBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AENA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AJYA,AS3BA,AXiCA,AIZA,AMlBA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AIZA,AMlBA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AIZA,AMlBA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA;Ad2CA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA;AjBoDA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA;AjBoDA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA;AjBoDA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA,ACHA;AlBuDA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA,ACHA;AlBuDA,ADGA,Ac1CA,APqBA,AS3BA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA,ACHA;AlBuDA,ADGA,Ac1CA,AENA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA,AENA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,APqBA,ANkBA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA,AENA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AbuCA,AOrBA,AFMA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA,AENA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AbuCA,AOrBA,AWjCA,AbuCA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AGTA,AENA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AbuCA,AOrBA,AWjCA,AbuCA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AbuCA,AOrBA,AWjCA,AbuCA,AS3BA,AbuCA,AS3BA,AXiCA,AU9BA,ADGA,AIZA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AOrBA,AWjCA,AbuCA,AS3BA,AbuCA,AS3BA,ADGA,ADGA,AIZA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AOrBA,AWjCA,AbuCA,AS3BA,AbuCA,AS3BA,ADGA,ADGA,AIZA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AOrBA,AWjCA,AbuCA,AS3BA,AbuCA,AS3BA,ADGA,AGTA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,ADGA,AGTA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,ADGA,AGTA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,AENA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,AENA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,AENA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,AENA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,AENA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,AENA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,AENA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AS3BA,AENA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AWjCA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AWjCA,AKfA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AENA,AMlBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AS3BA,AbuCA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,AgBhDA,ADGA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AFMA,AbuCA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,Af6CA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,Af6CA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,Af6CA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,Af6CA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,Af6CA,AJYA,Ae7CA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AoB5DA,AJYA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AQxBA,AnByDA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,ADGA,Ac1CA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AavCA,AXiCA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBuDA,AENA,AgBhDA;AlBufile":"index.js","sourcesContent":["\n\nexports.__esModule = true;\n\nvar _processor = require('./processor');\n\nvar _processor2 = _interopRequireDefault(_processor);\n\nvar _selectors = require('./selectors');\n\nvar selectors = _interopRequireWildcard(_selectors);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar parser = function parser(processor) {\n  return new _processor2.default(processor);\n};\n\nObject.assign(parser, selectors);\n\ndelete parser.__esModule;\n\nexports.default = parser;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _parser = require(\"./parser\");\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Processor = function () {\n    function Processor(func, options) {\n        _classCallCheck(this, Processor);\n\n        this.func = func || function noop() {};\n        this.funcRes = null;\n        this.options = options;\n    }\n\n    Processor.prototype._shouldUpdateSelector = function _shouldUpdateSelector(rule) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var merged = Object.assign({}, this.options, options);\n        if (merged.updateSelector === false) {\n            return false;\n        } else {\n            return typeof rule !== \"string\";\n        }\n    };\n\n    Processor.prototype._isLossy = function _isLossy() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var merged = Object.assign({}, this.options, options);\n        if (merged.lossless === false) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    Processor.prototype._root = function _root(rule) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var parser = new _parser2.default(rule, this._parseOptions(options));\n        return parser.root;\n    };\n\n    Processor.prototype._parseOptions = function _parseOptions(options) {\n        return {\n            lossy: this._isLossy(options)\n        };\n    };\n\n    Processor.prototype._run = function _run(rule) {\n        var _this = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return new Promise(function (resolve, reject) {\n            try {\n                var root = _this._root(rule, options);\n                Promise.resolve(_this.func(root)).then(function (transform) {\n                    var string = undefined;\n                    if (_this._shouldUpdateSelector(rule, options)) {\n                        string = root.toString();\n                        rule.selector = string;\n                    }\n                    return { transform: transform, root: root, string: string };\n                }).then(resolve, reject);\n            } catch (e) {\n                reject(e);\n                return;\n            }\n        });\n    };\n\n    Processor.prototype._runSync = function _runSync(rule) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var root = this._root(rule, options);\n        var transform = this.func(root);\n        if (transform && typeof transform.then === \"function\") {\n            throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n        }\n        var string = undefined;\n        if (options.updateSelector && typeof rule !== \"string\") {\n            string = root.toString();\n            rule.selector = string;\n        }\n        return { transform: transform, root: root, string: string };\n    };\n\n    /**\n     * Process rule into a selector AST.\n     * \n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n     */\n\n\n    Processor.prototype.ast = function ast(rule, options) {\n        return this._run(rule, options).then(function (result) {\n            return result.root;\n        });\n    };\n\n    /**\n     * Process rule into a selector AST synchronously.\n     * \n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {parser.Root} The AST of the selector after processing it.\n     */\n\n\n    Processor.prototype.astSync = function astSync(rule, options) {\n        return this._runSync(rule, options).root;\n    };\n\n    /**\n     * Process a selector into a transformed value asynchronously\n     * \n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {Promise<any>} The value returned by the processor.\n     */\n\n\n    Processor.prototype.transform = function transform(rule, options) {\n        return this._run(rule, options).then(function (result) {\n            return result.transform;\n        });\n    };\n\n    /**\n     * Process a selector into a transformed value synchronously.\n     * \n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {any} The value returned by the processor.\n     */\n\n\n    Processor.prototype.transformSync = function transformSync(rule, options) {\n        return this._runSync(rule, options).transform;\n    };\n\n    /**\n     * Process a selector into a new selector string asynchronously.\n     * \n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {string} the selector after processing.\n     */\n\n\n    Processor.prototype.process = function process(rule, options) {\n        return this._run(rule, options).then(function (result) {\n            return result.string || result.root.toString();\n        });\n    };\n\n    /**\n     * Process a selector into a new selector string synchronously.\n     * \n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {string} the selector after processing.\n     */\n\n\n    Processor.prototype.processSync = function processSync(rule, options) {\n        var result = this._runSync(rule, options);\n        return result.string || result.root.toString();\n    };\n\n    return Processor;\n}();\n\nexports.default = Processor;\nmodule.exports = exports[\"default\"];","\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dotProp = require('dot-prop');\n\nvar _dotProp2 = _interopRequireDefault(_dotProp);\n\nvar _indexesOf = require('indexes-of');\n\nvar _indexesOf2 = _interopRequireDefault(_indexesOf);\n\nvar _uniq = require('uniq');\n\nvar _uniq2 = _interopRequireDefault(_uniq);\n\nvar _root = require('./selectors/root');\n\nvar _root2 = _interopRequireDefault(_root);\n\nvar _selector = require('./selectors/selector');\n\nvar _selector2 = _interopRequireDefault(_selector);\n\nvar _className = require('./selectors/className');\n\nvar _className2 = _interopRequireDefault(_className);\n\nvar _comment = require('./selectors/comment');\n\nvar _comment2 = _interopRequireDefault(_comment);\n\nvar _id = require('./selectors/id');\n\nvar _id2 = _interopRequireDefault(_id);\n\nvar _tag = require('./selectors/tag');\n\nvar _tag2 = _interopRequireDefault(_tag);\n\nvar _string = require('./selectors/string');\n\nvar _string2 = _interopRequireDefault(_string);\n\nvar _pseudo = require('./selectors/pseudo');\n\nvar _pseudo2 = _interopRequireDefault(_pseudo);\n\nvar _attribute = require('./selectors/attribute');\n\nvar _attribute2 = _interopRequireDefault(_attribute);\n\nvar _universal = require('./selectors/universal');\n\nvar _universal2 = _interopRequireDefault(_universal);\n\nvar _combinator = require('./selectors/combinator');\n\nvar _combinator2 = _interopRequireDefault(_combinator);\n\nvar _nesting = require('./selectors/nesting');\n\nvar _nesting2 = _interopRequireDefault(_nesting);\n\nvar _sortAscending = require('./sortAscending');\n\nvar _sortAscending2 = _interopRequireDefault(_sortAscending);\n\nvar _tokenize = require('./tokenize');\n\nvar _tokenize2 = _interopRequireDefault(_tokenize);\n\nvar _tokenTypes = require('./tokenTypes');\n\nvar tokens = _interopRequireWildcard(_tokenTypes);\n\nvar _types = require('./selectors/types');\n\nvar types = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getSource(startLine, startColumn, endLine, endColumn) {\n    return {\n        start: {\n            line: startLine,\n            column: startColumn\n        },\n        end: {\n            line: endLine,\n            column: endColumn\n        }\n    };\n}\n\nvar Parser = function () {\n    function Parser(rule) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, Parser);\n\n        this.rule = rule;\n        this.options = Object.assign({ lossy: false, safe: false }, options);\n        this.position = 0;\n        this.root = new _root2.default();\n        this.root.errorGenerator = this._errorGenerator();\n\n        var selector = new _selector2.default();\n        this.root.append(selector);\n        this.current = selector;\n\n        this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n\n        if (this.options.lossy) {\n            this.css = this.css.trim();\n        }\n        this.tokens = (0, _tokenize2.default)({\n            css: this.css,\n            error: this._errorGenerator(),\n            safe: this.options.safe\n        });\n\n        this.loop();\n    }\n\n    Parser.prototype._errorGenerator = function _errorGenerator() {\n        var _this = this;\n\n        return function (message, errorOptions) {\n            if (typeof _this.rule === 'string') {\n                return new Error(message);\n            }\n            return _this.rule.error(message, errorOptions);\n        };\n    };\n\n    Parser.prototype.attribute = function attribute() {\n        var attr = [];\n        var startingToken = this.currToken;\n        this.position++;\n        while (this.position < this.tokens.length && this.currToken[0] !== tokens.closeSquare) {\n            attr.push(this.currToken);\n            this.position++;\n        }\n        if (this.currToken[0] !== tokens.closeSquare) {\n            return this.expected('closing square bracket', this.currToken[5]);\n        }\n\n        var len = attr.length;\n        var node = {\n            source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n            sourceIndex: startingToken[5]\n        };\n\n        if (len === 1 && !~[tokens.word].indexOf(attr[0][0])) {\n            return this.expected('attribute', attr[0][5]);\n        }\n\n        var pos = 0;\n        var spaceBefore = '';\n        var commentBefore = '';\n        var lastAdded = null;\n        var spaceAfterMeaningfulToken = false;\n\n        while (pos < len) {\n            var token = attr[pos];\n            var content = this.content(token);\n            var next = attr[pos + 1];\n\n            switch (token[0]) {\n                case tokens.space:\n                    if (len === 1 || pos === 0 && this.content(next) === '|') {\n                        return this.expected('attribute', token[5], content);\n                    }\n                    spaceAfterMeaningfulToken = true;\n                    if (this.options.lossy) {\n                        break;\n                    }\n                    if (lastAdded) {\n                        var spaceProp = 'spaces.' + lastAdded + '.after';\n                        _dotProp2.default.set(node, spaceProp, _dotProp2.default.get(node, spaceProp, '') + content);\n                        var commentProp = 'raws.spaces.' + lastAdded + '.after';\n                        var existingComment = _dotProp2.default.get(node, commentProp);\n                        if (existingComment) {\n                            _dotProp2.default.set(node, commentProp, existingComment + content);\n                        }\n                    } else {\n                        spaceBefore = spaceBefore + content;\n                        commentBefore = commentBefore + content;\n                    }\n                    break;\n                case tokens.asterisk:\n                    if (next[0] === tokens.equals) {\n                        node.operator = content;\n                        lastAdded = 'operator';\n                    } else if ((!node.namespace || lastAdded === \"namespace\" && !spaceAfterMeaningfulToken) && next) {\n                        if (spaceBefore) {\n                            _dotProp2.default.set(node, 'spaces.attribute.before', spaceBefore);\n                            spaceBefore = '';\n                        }\n                        if (commentBefore) {\n                            _dotProp2.default.set(node, 'raws.spaces.attribute.before', spaceBefore);\n                            commentBefore = '';\n                        }\n                        node.namespace = (node.namespace || \"\") + content;\n                        var rawValue = _dotProp2.default.get(node, \"raws.namespace\");\n                        if (rawValue) {\n                            node.raws.namespace += content;\n                        }\n                        lastAdded = 'namespace';\n                    }\n                    spaceAfterMeaningfulToken = false;\n                    break;\n                case tokens.dollar:\n                case tokens.caret:\n                    if (next[0] === tokens.equals) {\n                        node.operator = content;\n                        lastAdded = 'operator';\n                    }\n                    spaceAfterMeaningfulToken = false;\n                    break;\n                case tokens.combinator:\n                    if (content === '~' && next[0] === tokens.equals) {\n                        node.operator = content;\n                        lastAdded = 'operator';\n                    }\n                    if (content !== '|') {\n                        spaceAfterMeaningfulToken = false;\n                        break;\n                    }\n                    if (next[0] === tokens.equals) {\n                        node.operator = content;\n                        lastAdded = 'operator';\n                    } else if (!node.namespace && !node.attribute) {\n                        node.namespace = true;\n                    }\n                    spaceAfterMeaningfulToken = false;\n                    break;\n                case tokens.word:\n                    if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][0] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.\n                    !node.operator && !node.namespace) {\n                        node.namespace = content;\n                        lastAdded = 'namespace';\n                    } else if (!node.attribute || lastAdded === \"attribute\" && !spaceAfterMeaningfulToken) {\n                        if (spaceBefore) {\n                            _dotProp2.default.set(node, 'spaces.attribute.before', spaceBefore);\n                            spaceBefore = '';\n                        }\n                        if (commentBefore) {\n                            _dotProp2.default.set(node, 'raws.spaces.attribute.before', commentBefore);\n                            commentBefore = '';\n                        }\n                        node.attribute = (node.attribute || \"\") + content;\n                        var _rawValue = _dotProp2.default.get(node, \"raws.attribute\");\n                        if (_rawValue) {\n                            node.raws.attribute += content;\n                        }\n                        lastAdded = 'attribute';\n                    } else if (!node.value || lastAdded === \"value\" && !spaceAfterMeaningfulToken) {\n                        node.value = (node.value || \"\") + content;\n                        var _rawValue2 = _dotProp2.default.get(node, \"raws.value\");\n                        if (_rawValue2) {\n                            node.raws.value += content;\n                        }\n                        lastAdded = 'value';\n                        _dotProp2.default.set(node, 'raws.unquoted', _dotProp2.default.get(node, 'raws.unquoted', '') + content);\n                    } else if (content === 'i') {\n                        if (node.value && (node.quoted || spaceAfterMeaningfulToken)) {\n                            node.insensitive = true;\n                            lastAdded = 'insensitive';\n                            if (spaceBefore) {\n                                _dotProp2.default.set(node, 'spaces.insensitive.before', spaceBefore);\n                                spaceBefore = '';\n                            }\n                            if (commentBefore) {\n                                _dotProp2.default.set(node, 'raws.spaces.insensitive.before', commentBefore);\n                                commentBefore = '';\n                            }\n                        } else if (node.value) {\n                            lastAdded = 'value';\n                            node.value += 'i';\n                            if (node.raws.value) {\n                                node.raws.value += 'i';\n                            }\n                        }\n                    }\n                    spaceAfterMeaningfulToken = false;\n                    break;\n                case tokens.str:\n                    if (!node.attribute || !node.operator) {\n                        return this.error('Expected an attribute followed by an operator preceding the string.', {\n                            index: token[5]\n                        });\n                    }\n                    node.value = content;\n                    node.quoted = true;\n                    lastAdded = 'value';\n                    _dotProp2.default.set(node, 'raws.unquoted', content.slice(1, -1));\n                    spaceAfterMeaningfulToken = false;\n                    break;\n                case tokens.equals:\n                    if (!node.attribute) {\n                        return this.expected('attribute', token[5], content);\n                    }\n                    if (node.value) {\n                        return this.error('Unexpected \"=\" found; an operator was already defined.', { index: token[5] });\n                    }\n                    node.operator = node.operator ? node.operator + content : content;\n                    lastAdded = 'operator';\n                    spaceAfterMeaningfulToken = false;\n                    break;\n                case tokens.comment:\n                    if (lastAdded) {\n                        if (spaceAfterMeaningfulToken || next && next[0] === tokens.space) {\n                            var lastComment = _dotProp2.default.get(node, 'raws.spaces.' + lastAdded + '.after', _dotProp2.default.get(node, 'spaces.' + lastAdded + '.after', ''));\n                            _dotProp2.default.set(node, 'raws.spaces.' + lastAdded + '.after', lastComment + content);\n                        } else {\n                            var lastValue = _dotProp2.default.get(node, 'raws.' + lastAdded, _dotProp2.default.get(node, lastAdded, ''));\n                            _dotProp2.default.set(node, 'raws.' + lastAdded, lastValue + content);\n                        }\n                    } else {\n                        commentBefore = commentBefore + content;\n                    }\n                    break;\n                default:\n                    return this.error('Unexpected \"' + content + '\" found.', { index: token[5] });\n            }\n            pos++;\n        }\n\n        this.newNode(new _attribute2.default(node));\n        this.position++;\n    };\n\n    Parser.prototype.combinator = function combinator() {\n        var current = this.currToken;\n        if (this.content() === '|') {\n            return this.namespace();\n        }\n        var node = new _combinator2.default({\n            value: '',\n            source: getSource(current[1], current[2], current[3], current[4]),\n            sourceIndex: current[5]\n        });\n        while (this.position < this.tokens.length && this.currToken && (this.currToken[0] === tokens.space || this.currToken[0] === tokens.combinator)) {\n            var content = this.content();\n            if (this.nextToken && this.nextToken[0] === tokens.combinator) {\n                node.spaces.before = this.parseSpace(content);\n                node.source = getSource(this.nextToken[1], this.nextToken[2], this.nextToken[3], this.nextToken[4]);\n                node.sourceIndex = this.nextToken[5];\n            } else if (this.prevToken && this.prevToken[0] === tokens.combinator) {\n                node.spaces.after = this.parseSpace(content);\n            } else if (this.currToken[0] === tokens.combinator) {\n                node.value = content;\n            } else if (this.currToken[0] === tokens.space) {\n                node.value = this.parseSpace(content, ' ');\n            }\n            this.position++;\n        }\n        return this.newNode(node);\n    };\n\n    Parser.prototype.comma = function comma() {\n        if (this.position === this.tokens.length - 1) {\n            this.root.trailingComma = true;\n            this.position++;\n            return;\n        }\n        var selector = new _selector2.default();\n        this.current.parent.append(selector);\n        this.current = selector;\n        this.position++;\n    };\n\n    Parser.prototype.comment = function comment() {\n        var current = this.currToken;\n        this.newNode(new _comment2.default({\n            value: this.content(),\n            source: getSource(current[1], current[2], current[3], current[4]),\n            sourceIndex: current[5]\n        }));\n        this.position++;\n    };\n\n    Parser.prototype.error = function error(message, opts) {\n        throw this.root.error(message, opts);\n    };\n\n    Parser.prototype.missingBackslash = function missingBackslash() {\n        return this.error('Expected a backslash preceding the semicolon.', {\n            index: this.currToken[5]\n        });\n    };\n\n    Parser.prototype.missingParenthesis = function missingParenthesis() {\n        return this.expected('opening parenthesis', this.currToken[5]);\n    };\n\n    Parser.prototype.missingSquareBracket = function missingSquareBracket() {\n        return this.expected('opening square bracket', this.currToken[5]);\n    };\n\n    Parser.prototype.namespace = function namespace() {\n        var before = this.prevToken && this.content(this.prevToken) || true;\n        if (this.nextToken[0] === tokens.word) {\n            this.position++;\n            return this.word(before);\n        } else if (this.nextToken[0] === tokens.asterisk) {\n            this.position++;\n            return this.universal(before);\n        }\n    };\n\n    Parser.prototype.nesting = function nesting() {\n        var current = this.currToken;\n        this.newNode(new _nesting2.default({\n            value: this.content(),\n            source: getSource(current[1], current[2], current[3], current[4]),\n            sourceIndex: current[5]\n        }));\n        this.position++;\n    };\n\n    Parser.prototype.parentheses = function parentheses() {\n        var last = this.current.last;\n        var balanced = 1;\n        this.position++;\n        if (last && last.type === types.PSEUDO) {\n            var selector = new _selector2.default();\n            var cache = this.current;\n            last.append(selector);\n            this.current = selector;\n            while (this.position < this.tokens.length && balanced) {\n                if (this.currToken[0] === tokens.openParenthesis) {\n                    balanced++;\n                }\n                if (this.currToken[0] === tokens.closeParenthesis) {\n                    balanced--;\n                }\n                if (balanced) {\n                    this.parse();\n                } else {\n                    selector.parent.source.end.line = this.currToken[3];\n                    selector.parent.source.end.column = this.currToken[4];\n                    this.position++;\n                }\n            }\n            this.current = cache;\n        } else {\n            last.value += '(';\n            while (this.position < this.tokens.length && balanced) {\n                if (this.currToken[0] === tokens.openParenthesis) {\n                    balanced++;\n                }\n                if (this.currToken[0] === tokens.closeParenthesis) {\n                    balanced--;\n                }\n                last.value += this.parseParenthesisToken(this.currToken);\n                this.position++;\n            }\n        }\n        if (balanced) {\n            return this.expected('closing parenthesis', this.currToken[5]);\n        }\n    };\n\n    Parser.prototype.pseudo = function pseudo() {\n        var _this2 = this;\n\n        var pseudoStr = '';\n        var startingToken = this.currToken;\n        while (this.currToken && this.currToken[0] === tokens.colon) {\n            pseudoStr += this.content();\n            this.position++;\n        }\n        if (!this.currToken) {\n            return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n        }\n        if (this.currToken[0] === tokens.word) {\n            this.splitWord(false, function (first, length) {\n                pseudoStr += first;\n                _this2.newNode(new _pseudo2.default({\n                    value: pseudoStr,\n                    source: getSource(startingToken[1], startingToken[2], _this2.currToken[3], _this2.currToken[4]),\n                    sourceIndex: startingToken[5]\n                }));\n                if (length > 1 && _this2.nextToken && _this2.nextToken[0] === tokens.openParenthesis) {\n                    _this2.error('Misplaced parenthesis.', {\n                        index: _this2.nextToken[5]\n                    });\n                }\n            });\n        } else {\n            return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[5]);\n        }\n    };\n\n    Parser.prototype.space = function space() {\n        var content = this.content();\n        // Handle space before and after the selector\n        if (this.position === 0 || this.prevToken[0] === tokens.comma || this.prevToken[0] === tokens.openParenthesis) {\n            this.spaces = this.parseSpace(content);\n            this.position++;\n        } else if (this.position === this.tokens.length - 1 || this.nextToken[0] === tokens.comma || this.nextToken[0] === tokens.closeParenthesis) {\n            this.current.last.spaces.after = this.parseSpace(content);\n            this.position++;\n        } else {\n            this.combinator();\n        }\n    };\n\n    Parser.prototype.string = function string() {\n        var current = this.currToken;\n        this.newNode(new _string2.default({\n            value: this.content(),\n            source: getSource(current[1], current[2], current[3], current[4]),\n            sourceIndex: current[5]\n        }));\n        this.position++;\n    };\n\n    Parser.prototype.universal = function universal(namespace) {\n        var nextToken = this.nextToken;\n        if (nextToken && this.content(nextToken) === '|') {\n            this.position++;\n            return this.namespace();\n        }\n        var current = this.currToken;\n        this.newNode(new _universal2.default({\n            value: this.content(),\n            source: getSource(current[1], current[2], current[3], current[4]),\n            sourceIndex: current[5]\n        }), namespace);\n        this.position++;\n    };\n\n    Parser.prototype.splitWord = function splitWord(namespace, firstCallback) {\n        var _this3 = this;\n\n        var nextToken = this.nextToken;\n        var word = this.content();\n        while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[0])) {\n            this.position++;\n            var current = this.content();\n            word += current;\n            if (current.lastIndexOf('\\\\') === current.length - 1) {\n                var next = this.nextToken;\n                if (next && next[0] === tokens.space) {\n                    word += this.parseSpace(this.content(next), ' ');\n                    this.position++;\n                }\n            }\n            nextToken = this.nextToken;\n        }\n        var hasClass = (0, _indexesOf2.default)(word, '.');\n        var hasId = (0, _indexesOf2.default)(word, '#');\n        // Eliminate Sass interpolations from the list of id indexes\n        var interpolations = (0, _indexesOf2.default)(word, '#{');\n        if (interpolations.length) {\n            hasId = hasId.filter(function (hashIndex) {\n                return !~interpolations.indexOf(hashIndex);\n            });\n        }\n        var indices = (0, _sortAscending2.default)((0, _uniq2.default)([0].concat(hasClass, hasId)));\n        indices.forEach(function (ind, i) {\n            var index = indices[i + 1] || word.length;\n            var value = word.slice(ind, index);\n            if (i === 0 && firstCallback) {\n                return firstCallback.call(_this3, value, indices.length);\n            }\n            var node = void 0;\n            var current = _this3.currToken;\n            var sourceIndex = current[5] + indices[i];\n            var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));\n            if (~hasClass.indexOf(ind)) {\n                node = new _className2.default({\n                    value: value.slice(1),\n                    source: source,\n                    sourceIndex: sourceIndex\n                });\n            } else if (~hasId.indexOf(ind)) {\n                node = new _id2.default({\n                    value: value.slice(1),\n                    source: source,\n                    sourceIndex: sourceIndex\n                });\n            } else {\n                node = new _tag2.default({\n                    value: value,\n                    source: source,\n                    sourceIndex: sourceIndex\n                });\n            }\n            _this3.newNode(node, namespace);\n            // Ensure that the namespace is used only once\n            namespace = null;\n        });\n        this.position++;\n    };\n\n    Parser.prototype.word = function word(namespace) {\n        var nextToken = this.nextToken;\n        if (nextToken && this.content(nextToken) === '|') {\n            this.position++;\n            return this.namespace();\n        }\n        return this.splitWord(namespace);\n    };\n\n    Parser.prototype.loop = function loop() {\n        while (this.position < this.tokens.length) {\n            this.parse(true);\n        }\n        return this.root;\n    };\n\n    Parser.prototype.parse = function parse(throwOnParenthesis) {\n        switch (this.currToken[0]) {\n            case tokens.space:\n                this.space();\n                break;\n            case tokens.comment:\n                this.comment();\n                break;\n            case tokens.openParenthesis:\n                this.parentheses();\n                break;\n            case tokens.closeParenthesis:\n                if (throwOnParenthesis) {\n                    this.missingParenthesis();\n                }\n                break;\n            case tokens.openSquare:\n                this.attribute();\n                break;\n            case tokens.dollar:\n            case tokens.caret:\n            case tokens.equals:\n            case tokens.word:\n                this.word();\n                break;\n            case tokens.colon:\n                this.pseudo();\n                break;\n            case tokens.comma:\n                this.comma();\n                break;\n            case tokens.asterisk:\n                this.universal();\n                break;\n            case tokens.ampersand:\n                this.nesting();\n                break;\n            case tokens.combinator:\n                this.combinator();\n                break;\n            case tokens.str:\n                this.string();\n                break;\n            // These cases throw; no break needed.\n            case tokens.closeSquare:\n                this.missingSquareBracket();\n            case tokens.semicolon:\n                this.missingBackslash();\n        }\n    };\n\n    /**\n     * Helpers\n     */\n\n    Parser.prototype.expected = function expected(description, index, found) {\n        if (Array.isArray(description)) {\n            var last = description.pop();\n            description = description.join(', ') + ' or ' + last;\n        }\n        var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n        if (!found) {\n            return this.error('Expected ' + an + ' ' + description + '.', { index: index });\n        }\n        return this.error('Expected ' + an + ' ' + description + ', found \"' + found + '\" instead.', { index: index });\n    };\n\n    Parser.prototype.parseNamespace = function parseNamespace(namespace) {\n        if (this.options.lossy && typeof namespace === 'string') {\n            var trimmed = namespace.trim();\n            if (!trimmed.length) {\n                return true;\n            }\n\n            return trimmed;\n        }\n\n        return namespace;\n    };\n\n    Parser.prototype.parseSpace = function parseSpace(space) {\n        var replacement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n        return this.options.lossy ? replacement : space;\n    };\n\n    Parser.prototype.parseValue = function parseValue(value) {\n        if (!this.options.lossy || !value || typeof value !== 'string') {\n            return value;\n        }\n        return value.trim();\n    };\n\n    Parser.prototype.parseParenthesisToken = function parseParenthesisToken(token) {\n        var content = this.content(token);\n        if (!this.options.lossy) {\n            return content;\n        }\n\n        if (token[0] === tokens.space) {\n            return this.parseSpace(content, ' ');\n        }\n\n        return this.parseValue(content);\n    };\n\n    Parser.prototype.newNode = function newNode(node, namespace) {\n        if (namespace) {\n            node.namespace = this.parseNamespace(namespace);\n        }\n        if (this.spaces) {\n            node.spaces.before = this.spaces;\n            this.spaces = '';\n        }\n        return this.current.append(node);\n    };\n\n    Parser.prototype.content = function content() {\n        var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currToken;\n\n        return this.css.slice(token[5], token[6]);\n    };\n\n    _createClass(Parser, [{\n        key: 'currToken',\n        get: function get() {\n            return this.tokens[this.position];\n        }\n    }, {\n        key: 'nextToken',\n        get: function get() {\n            return this.tokens[this.position + 1];\n        }\n    }, {\n        key: 'prevToken',\n        get: function get() {\n            return this.tokens[this.position - 1];\n        }\n    }]);\n\n    return Parser;\n}();\n\nexports.default = Parser;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _container = require('./container');\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Root = function (_Container) {\n    _inherits(Root, _Container);\n\n    function Root(opts) {\n        _classCallCheck(this, Root);\n\n        var _this = _possibleConstructorReturn(this, _Container.call(this, opts));\n\n        _this.type = _types.ROOT;\n        return _this;\n    }\n\n    Root.prototype.toString = function toString() {\n        var str = this.reduce(function (memo, selector) {\n            var sel = String(selector);\n            return sel ? memo + sel + ',' : '';\n        }, '').slice(0, -1);\n        return this.trailingComma ? str + ',' : str;\n    };\n\n    Root.prototype.error = function error(message, options) {\n        if (this._error) {\n            return this._error(message, options);\n        } else {\n            return new Error(message);\n        }\n    };\n\n    _createClass(Root, [{\n        key: 'errorGenerator',\n        set: function set(handler) {\n            this._error = handler;\n        }\n    }]);\n\n    return Root;\n}(_container2.default);\n\nexports.default = Root;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nvar _types = require('./types');\n\nvar types = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Container = function (_Node) {\n    _inherits(Container, _Node);\n\n    function Container(opts) {\n        _classCallCheck(this, Container);\n\n        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));\n\n        if (!_this.nodes) {\n            _this.nodes = [];\n        }\n        return _this;\n    }\n\n    Container.prototype.append = function append(selector) {\n        selector.parent = this;\n        this.nodes.push(selector);\n        return this;\n    };\n\n    Container.prototype.prepend = function prepend(selector) {\n        selector.parent = this;\n        this.nodes.unshift(selector);\n        return this;\n    };\n\n    Container.prototype.at = function at(index) {\n        return this.nodes[index];\n    };\n\n    Container.prototype.index = function index(child) {\n        if (typeof child === 'number') {\n            return child;\n        }\n        return this.nodes.indexOf(child);\n    };\n\n    Container.prototype.removeChild = function removeChild(child) {\n        child = this.index(child);\n        this.at(child).parent = undefined;\n        this.nodes.splice(child, 1);\n\n        var index = void 0;\n        for (var id in this.indexes) {\n            index = this.indexes[id];\n            if (index >= child) {\n                this.indexes[id] = index - 1;\n            }\n        }\n\n        return this;\n    };\n\n    Container.prototype.removeAll = function removeAll() {\n        for (var _iterator = this.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref = _iterator[_i++];\n            } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref = _i.value;\n            }\n\n            var node = _ref;\n\n            node.parent = undefined;\n        }\n        this.nodes = [];\n        return this;\n    };\n\n    Container.prototype.empty = function empty() {\n        return this.removeAll();\n    };\n\n    Container.prototype.insertAfter = function insertAfter(oldNode, newNode) {\n        newNode.parent = this;\n        var oldIndex = this.index(oldNode);\n        this.nodes.splice(oldIndex + 1, 0, newNode);\n\n        newNode.parent = this;\n\n        var index = void 0;\n        for (var id in this.indexes) {\n            index = this.indexes[id];\n            if (oldIndex <= index) {\n                this.indexes[id] = index + 1;\n            }\n        }\n\n        return this;\n    };\n\n    Container.prototype.insertBefore = function insertBefore(oldNode, newNode) {\n        newNode.parent = this;\n        var oldIndex = this.index(oldNode);\n        this.nodes.splice(oldIndex, 0, newNode);\n\n        newNode.parent = this;\n\n        var index = void 0;\n        for (var id in this.indexes) {\n            index = this.indexes[id];\n            if (index <= oldIndex) {\n                this.indexes[id] = index + 1;\n            }\n        }\n\n        return this;\n    };\n\n    Container.prototype.each = function each(callback) {\n        if (!this.lastEach) {\n            this.lastEach = 0;\n        }\n        if (!this.indexes) {\n            this.indexes = {};\n        }\n\n        this.lastEach++;\n        var id = this.lastEach;\n        this.indexes[id] = 0;\n\n        if (!this.length) {\n            return undefined;\n        }\n\n        var index = void 0,\n            result = void 0;\n        while (this.indexes[id] < this.length) {\n            index = this.indexes[id];\n            result = callback(this.at(index), index);\n            if (result === false) {\n                break;\n            }\n\n            this.indexes[id] += 1;\n        }\n\n        delete this.indexes[id];\n\n        if (result === false) {\n            return false;\n        }\n    };\n\n    Container.prototype.walk = function walk(callback) {\n        return this.each(function (node, i) {\n            var result = callback(node, i);\n\n            if (result !== false && node.length) {\n                result = node.walk(callback);\n            }\n\n            if (result === false) {\n                return false;\n            }\n        });\n    };\n\n    Container.prototype.walkAttributes = function walkAttributes(callback) {\n        var _this2 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.ATTRIBUTE) {\n                return callback.call(_this2, selector);\n            }\n        });\n    };\n\n    Container.prototype.walkClasses = function walkClasses(callback) {\n        var _this3 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.CLASS) {\n                return callback.call(_this3, selector);\n            }\n        });\n    };\n\n    Container.prototype.walkCombinators = function walkCombinators(callback) {\n        var _this4 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.COMBINATOR) {\n                return callback.call(_this4, selector);\n            }\n        });\n    };\n\n    Container.prototype.walkComments = function walkComments(callback) {\n        var _this5 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.COMMENT) {\n                return callback.call(_this5, selector);\n            }\n        });\n    };\n\n    Container.prototype.walkIds = function walkIds(callback) {\n        var _this6 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.ID) {\n                return callback.call(_this6, selector);\n            }\n        });\n    };\n\n    Container.prototype.walkNesting = function walkNesting(callback) {\n        var _this7 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.NESTING) {\n                return callback.call(_this7, selector);\n            }\n        });\n    };\n\n    Container.prototype.walkPseudos = function walkPseudos(callback) {\n        var _this8 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.PSEUDO) {\n                return callback.call(_this8, selector);\n            }\n        });\n    };\n\n    Container.prototype.walkTags = function walkTags(callback) {\n        var _this9 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.TAG) {\n                return callback.call(_this9, selector);\n            }\n        });\n    };\n\n    Container.prototype.walkUniversals = function walkUniversals(callback) {\n        var _this10 = this;\n\n        return this.walk(function (selector) {\n            if (selector.type === types.UNIVERSAL) {\n                return callback.call(_this10, selector);\n            }\n        });\n    };\n\n    Container.prototype.split = function split(callback) {\n        var _this11 = this;\n\n        var current = [];\n        return this.reduce(function (memo, node, index) {\n            var split = callback.call(_this11, node);\n            current.push(node);\n            if (split) {\n                memo.push(current);\n                current = [];\n            } else if (index === _this11.length - 1) {\n                memo.push(current);\n            }\n            return memo;\n        }, []);\n    };\n\n    Container.prototype.map = function map(callback) {\n        return this.nodes.map(callback);\n    };\n\n    Container.prototype.reduce = function reduce(callback, memo) {\n        return this.nodes.reduce(callback, memo);\n    };\n\n    Container.prototype.every = function every(callback) {\n        return this.nodes.every(callback);\n    };\n\n    Container.prototype.some = function some(callback) {\n        return this.nodes.some(callback);\n    };\n\n    Container.prototype.filter = function filter(callback) {\n        return this.nodes.filter(callback);\n    };\n\n    Container.prototype.sort = function sort(callback) {\n        return this.nodes.sort(callback);\n    };\n\n    Container.prototype.toString = function toString() {\n        return this.map(String).join('');\n    };\n\n    _createClass(Container, [{\n        key: 'first',\n        get: function get() {\n            return this.at(0);\n        }\n    }, {\n        key: 'last',\n        get: function get() {\n            return this.at(this.length - 1);\n        }\n    }, {\n        key: 'length',\n        get: function get() {\n            return this.nodes.length;\n        }\n    }]);\n\n    return Container;\n}(_node2.default);\n\nexports.default = Container;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar cloneNode = function cloneNode(obj, parent) {\n    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {\n        return obj;\n    }\n\n    var cloned = new obj.constructor();\n\n    for (var i in obj) {\n        if (!obj.hasOwnProperty(i)) {\n            continue;\n        }\n        var value = obj[i];\n        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n        if (i === 'parent' && type === 'object') {\n            if (parent) {\n                cloned[i] = parent;\n            }\n        } else if (value instanceof Array) {\n            cloned[i] = value.map(function (j) {\n                return cloneNode(j, cloned);\n            });\n        } else {\n            cloned[i] = cloneNode(value, cloned);\n        }\n    }\n\n    return cloned;\n};\n\nvar _class = function () {\n    function _class() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, _class);\n\n        Object.assign(this, opts);\n        this.spaces = this.spaces || {};\n        this.spaces.before = this.spaces.before || '';\n        this.spaces.after = this.spaces.after || '';\n    }\n\n    _class.prototype.remove = function remove() {\n        if (this.parent) {\n            this.parent.removeChild(this);\n        }\n        this.parent = undefined;\n        return this;\n    };\n\n    _class.prototype.replaceWith = function replaceWith() {\n        if (this.parent) {\n            for (var index in arguments) {\n                this.parent.insertBefore(this, arguments[index]);\n            }\n            this.remove();\n        }\n        return this;\n    };\n\n    _class.prototype.next = function next() {\n        return this.parent.at(this.parent.index(this) + 1);\n    };\n\n    _class.prototype.prev = function prev() {\n        return this.parent.at(this.parent.index(this) - 1);\n    };\n\n    _class.prototype.clone = function clone() {\n        var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var cloned = cloneNode(this);\n        for (var name in overrides) {\n            cloned[name] = overrides[name];\n        }\n        return cloned;\n    };\n\n    _class.prototype.toString = function toString() {\n        return [this.spaces.before, String(this.value), this.spaces.after].join('');\n    };\n\n    return _class;\n}();\n\nexports.default = _class;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\nvar TAG = exports.TAG = 'tag';\nvar STRING = exports.STRING = 'string';\nvar SELECTOR = exports.SELECTOR = 'selector';\nvar ROOT = exports.ROOT = 'root';\nvar PSEUDO = exports.PSEUDO = 'pseudo';\nvar NESTING = exports.NESTING = 'nesting';\nvar ID = exports.ID = 'id';\nvar COMMENT = exports.COMMENT = 'comment';\nvar COMBINATOR = exports.COMBINATOR = 'combinator';\nvar CLASS = exports.CLASS = 'class';\nvar ATTRIBUTE = exports.ATTRIBUTE = 'attribute';\nvar UNIVERSAL = exports.UNIVERSAL = 'universal';","\n\nexports.__esModule = true;\n\nvar _container = require('./container');\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Selector = function (_Container) {\n    _inherits(Selector, _Container);\n\n    function Selector(opts) {\n        _classCallCheck(this, Selector);\n\n        var _this = _possibleConstructorReturn(this, _Container.call(this, opts));\n\n        _this.type = _types.SELECTOR;\n        return _this;\n    }\n\n    return Selector;\n}(_container2.default);\n\nexports.default = Selector;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _namespace = require('./namespace');\n\nvar _namespace2 = _interopRequireDefault(_namespace);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ClassName = function (_Namespace) {\n    _inherits(ClassName, _Namespace);\n\n    function ClassName(opts) {\n        _classCallCheck(this, ClassName);\n\n        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));\n\n        _this.type = _types.CLASS;\n        return _this;\n    }\n\n    ClassName.prototype.toString = function toString() {\n        return [this.spaces.before, this.ns, String('.' + this.value), this.spaces.after].join('');\n    };\n\n    return ClassName;\n}(_namespace2.default);\n\nexports.default = ClassName;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Namespace = function (_Node) {\n    _inherits(Namespace, _Node);\n\n    function Namespace() {\n        _classCallCheck(this, Namespace);\n\n        return _possibleConstructorReturn(this, _Node.apply(this, arguments));\n    }\n\n    Namespace.prototype.qualifiedName = function qualifiedName(value) {\n        if (this.namespace) {\n            return this.namespaceString + '|' + value;\n        } else {\n            return value;\n        }\n    };\n\n    Namespace.prototype.toString = function toString() {\n        return [this.spaces.before, this.qualifiedName(this.value), this.spaces.after].join('');\n    };\n\n    _createClass(Namespace, [{\n        key: 'namespace',\n        get: function get() {\n            return this._namespace;\n        },\n        set: function set(namespace) {\n            this._namespace = namespace;\n            if (this.raws) {\n                delete this.raws.namespace;\n            }\n        }\n    }, {\n        key: 'ns',\n        get: function get() {\n            return this._namespace;\n        },\n        set: function set(namespace) {\n            this._namespace = namespace;\n            if (this.raws) {\n                delete this.raws.namespace;\n            }\n        }\n    }, {\n        key: 'namespaceString',\n        get: function get() {\n            if (this.namespace) {\n                var ns = this.raws && this.raws.namespace || this.namespace;\n                if (ns === true) {\n                    return '';\n                } else {\n                    return ns;\n                }\n            } else {\n                return '';\n            }\n        }\n    }]);\n\n    return Namespace;\n}(_node2.default);\n\nexports.default = Namespace;\n;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Comment = function (_Node) {\n    _inherits(Comment, _Node);\n\n    function Comment(opts) {\n        _classCallCheck(this, Comment);\n\n        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));\n\n        _this.type = _types.COMMENT;\n        return _this;\n    }\n\n    return Comment;\n}(_node2.default);\n\nexports.default = Comment;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _namespace = require('./namespace');\n\nvar _namespace2 = _interopRequireDefault(_namespace);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ID = function (_Namespace) {\n    _inherits(ID, _Namespace);\n\n    function ID(opts) {\n        _classCallCheck(this, ID);\n\n        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));\n\n        _this.type = _types.ID;\n        return _this;\n    }\n\n    ID.prototype.toString = function toString() {\n        return [this.spaces.before, this.ns, String('#' + this.value), this.spaces.after].join('');\n    };\n\n    return ID;\n}(_namespace2.default);\n\nexports.default = ID;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _namespace = require('./namespace');\n\nvar _namespace2 = _interopRequireDefault(_namespace);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Tag = function (_Namespace) {\n    _inherits(Tag, _Namespace);\n\n    function Tag(opts) {\n        _classCallCheck(this, Tag);\n\n        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));\n\n        _this.type = _types.TAG;\n        return _this;\n    }\n\n    return Tag;\n}(_namespace2.default);\n\nexports.default = Tag;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar String = function (_Node) {\n    _inherits(String, _Node);\n\n    function String(opts) {\n        _classCallCheck(this, String);\n\n        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));\n\n        _this.type = _types.STRING;\n        return _this;\n    }\n\n    return String;\n}(_node2.default);\n\nexports.default = String;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _container = require('./container');\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Pseudo = function (_Container) {\n    _inherits(Pseudo, _Container);\n\n    function Pseudo(opts) {\n        _classCallCheck(this, Pseudo);\n\n        var _this = _possibleConstructorReturn(this, _Container.call(this, opts));\n\n        _this.type = _types.PSEUDO;\n        return _this;\n    }\n\n    Pseudo.prototype.toString = function toString() {\n        var params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n        return [this.spaces.before, String(this.value), params, this.spaces.after].join('');\n    };\n\n    return Pseudo;\n}(_container2.default);\n\nexports.default = Pseudo;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _namespace = require('./namespace');\n\nvar _namespace2 = _interopRequireDefault(_namespace);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Attribute = function (_Namespace) {\n    _inherits(Attribute, _Namespace);\n\n    function Attribute() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Attribute);\n\n        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));\n\n        _this.type = _types.ATTRIBUTE;\n        _this.raws = _this.raws || {};\n        _this._constructed = true;\n        return _this;\n    }\n\n    Attribute.prototype._spacesFor = function _spacesFor(name) {\n        var attrSpaces = { before: '', after: '' };\n        var spaces = this.spaces[name] || {};\n        var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n        return Object.assign(attrSpaces, spaces, rawSpaces);\n    };\n\n    Attribute.prototype._valueFor = function _valueFor(name) {\n        return this.raws[name] || this[name];\n    };\n\n    Attribute.prototype._stringFor = function _stringFor(name) {\n        var spaceName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : name;\n        var concat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultAttrConcat;\n\n        var attrSpaces = this._spacesFor(spaceName);\n        return concat(this._valueFor(name), attrSpaces);\n    };\n\n    /**\n     * returns the offset of the attribute part specified relative to the\n     * start of the node of the output string.\n     *\n     * * \"ns\" - alias for \"namespace\"\n     * * \"namespace\" - the namespace if it exists.\n     * * \"attribute\" - the attribute name\n     * * \"attributeNS\" - the start of the attribute or its namespace\n     * * \"operator\" - the match operator of the attribute\n     * * \"value\" - The value (string or identifier)\n     * * \"insensitive\" - the case insensitivity flag;\n     * @param part One of the possible values inside an attribute.\n     * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n     */\n\n\n    Attribute.prototype.offsetOf = function offsetOf(name) {\n        var count = 1;\n        var attributeSpaces = this._spacesFor(\"attribute\");\n        count += attributeSpaces.before.length;\n        if (name === \"namespace\" || name === \"ns\") {\n            return this.namespace ? count : -1;\n        }\n        if (name === \"attributeNS\") {\n            return count;\n        }\n\n        count += this.namespaceString.length;\n        if (this.namespace) {\n            count += 1;\n        }\n        if (name === \"attribute\") {\n            return count;\n        }\n\n        count += this._valueFor(\"attribute\").length;\n        count += attributeSpaces.after.length;\n        var operatorSpaces = this._spacesFor(\"operator\");\n        count += operatorSpaces.before.length;\n        var operator = this._valueFor(\"operator\");\n        if (name === \"operator\") {\n            return operator ? count : -1;\n        }\n\n        count += operator.length;\n        count += operatorSpaces.after.length;\n        var valueSpaces = this._spacesFor(\"value\");\n        count += valueSpaces.before.length;\n        var value = this._valueFor(\"value\");\n        if (name === \"value\") {\n            return value ? count : -1;\n        }\n\n        count += value.length;\n        count += valueSpaces.after.length;\n        var insensitiveSpaces = this._spacesFor(\"insensitive\");\n        count += insensitiveSpaces.before.length;\n        if (name === \"insensitive\") {\n            return this.insensitive ? count : -1;\n        }\n        return -1;\n    };\n\n    Attribute.prototype.toString = function toString() {\n        var _this2 = this;\n\n        var selector = [this.spaces.before, '['];\n\n        selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n        if (this.operator && this.value) {\n            selector.push(this._stringFor('operator'));\n            selector.push(this._stringFor('value'));\n            selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n                if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n                    attrSpaces.before = \" \";\n                }\n                return defaultAttrConcat(attrValue, attrSpaces);\n            }));\n        }\n\n        selector.push(']');\n        selector.push(this.spaces.after);\n        return selector.join('');\n    };\n\n    _createClass(Attribute, [{\n        key: 'qualifiedAttribute',\n        get: function get() {\n            return this.qualifiedName(this.raws.attribute || this.attribute);\n        }\n    }, {\n        key: 'insensitiveFlag',\n        get: function get() {\n            return this.insensitive ? 'i' : '';\n        }\n    }, {\n        key: 'value',\n        get: function get() {\n            return this._value;\n        },\n        set: function set(v) {\n            this._value = v;\n            if (this._constructed) {\n                delete this.raws.value;\n            }\n        }\n    }, {\n        key: 'namespace',\n        get: function get() {\n            return this._namespace;\n        },\n        set: function set(v) {\n            this._namespace = v;\n            if (this._constructed) {\n                delete this.raws.namespace;\n            }\n        }\n    }, {\n        key: 'attribute',\n        get: function get() {\n            return this._attribute;\n        },\n        set: function set(v) {\n            this._attribute = v;\n            if (this._constructed) {\n                delete this.raws.attibute;\n            }\n        }\n    }]);\n\n    return Attribute;\n}(_namespace2.default);\n\nexports.default = Attribute;\n\n\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n    return '' + attrSpaces.before + attrValue + attrSpaces.after;\n}\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _namespace = require('./namespace');\n\nvar _namespace2 = _interopRequireDefault(_namespace);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Universal = function (_Namespace) {\n    _inherits(Universal, _Namespace);\n\n    function Universal(opts) {\n        _classCallCheck(this, Universal);\n\n        var _this = _possibleConstructorReturn(this, _Namespace.call(this, opts));\n\n        _this.type = _types.UNIVERSAL;\n        _this.value = '*';\n        return _this;\n    }\n\n    return Universal;\n}(_namespace2.default);\n\nexports.default = Universal;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Combinator = function (_Node) {\n    _inherits(Combinator, _Node);\n\n    function Combinator(opts) {\n        _classCallCheck(this, Combinator);\n\n        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));\n\n        _this.type = _types.COMBINATOR;\n        return _this;\n    }\n\n    return Combinator;\n}(_node2.default);\n\nexports.default = Combinator;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Nesting = function (_Node) {\n    _inherits(Nesting, _Node);\n\n    function Nesting(opts) {\n        _classCallCheck(this, Nesting);\n\n        var _this = _possibleConstructorReturn(this, _Node.call(this, opts));\n\n        _this.type = _types.NESTING;\n        _this.value = '&';\n        return _this;\n    }\n\n    return Nesting;\n}(_node2.default);\n\nexports.default = Nesting;\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\nexports.default = sortAscending;\nfunction sortAscending(list) {\n    return list.sort(function (a, b) {\n        return a - b;\n    });\n};\nmodule.exports = exports[\"default\"];","\n\nexports.__esModule = true;\nexports.default = tokenize;\n\nvar _tokenTypes = require('./tokenTypes');\n\nvar t = _interopRequireWildcard(_tokenTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar wordEnd = /[ \\n\\t\\r\\(\\)\\*:;!&'\"\\+\\|~>,=$^\\[\\]\\\\]|\\/(?=\\*)/g;\n\nfunction tokenize(input) {\n    var tokens = [];\n    var css = input.css.valueOf();\n    var _css = css,\n        length = _css.length;\n\n    var offset = -1;\n    var line = 1;\n    var start = 0;\n    var end = 0;\n\n    var code = void 0,\n        content = void 0,\n        endColumn = void 0,\n        endLine = void 0,\n        escaped = void 0,\n        escapePos = void 0,\n        last = void 0,\n        lines = void 0,\n        next = void 0,\n        nextLine = void 0,\n        nextOffset = void 0,\n        quote = void 0,\n        tokenType = void 0;\n\n    function unclosed(what, fix) {\n        if (input.safe) {\n            // fyi: this is never set to true.\n            css += fix;\n            next = css.length - 1;\n        } else {\n            throw input.error('Unclosed ' + what, line, start - offset, start);\n        }\n    }\n\n    while (start < length) {\n        code = css.charCodeAt(start);\n\n        if (code === t.newline) {\n            offset = start;\n            line += 1;\n        }\n\n        switch (code) {\n            case t.newline:\n            case t.space:\n            case t.tab:\n            case t.cr:\n            case t.feed:\n                next = start;\n                do {\n                    next += 1;\n                    code = css.charCodeAt(next);\n                    if (code === t.newline) {\n                        offset = next;\n                        line += 1;\n                    }\n                } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);\n\n                tokenType = t.space;\n                endLine = line;\n                endColumn = start - offset;\n                end = next;\n                break;\n\n            case t.plus:\n            case t.greaterThan:\n            case t.tilde:\n            case t.pipe:\n                next = start;\n                do {\n                    next += 1;\n                    code = css.charCodeAt(next);\n                } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);\n\n                tokenType = t.combinator;\n                endLine = line;\n                endColumn = start - offset;\n                end = next;\n                break;\n\n            // Consume these characters as single tokens.\n            case t.asterisk:\n            case t.ampersand:\n            case t.comma:\n            case t.equals:\n            case t.dollar:\n            case t.caret:\n            case t.openSquare:\n            case t.closeSquare:\n            case t.colon:\n            case t.semicolon:\n            case t.openParenthesis:\n            case t.closeParenthesis:\n                next = start;\n                tokenType = code;\n                endLine = line;\n                endColumn = start - offset;\n                end = next + 1;\n                break;\n\n            case t.singleQuote:\n            case t.doubleQuote:\n                quote = code === t.singleQuote ? \"'\" : '\"';\n                next = start;\n                do {\n                    escaped = false;\n                    next = css.indexOf(quote, next + 1);\n                    if (next === -1) {\n                        unclosed('quote', quote);\n                    }\n                    escapePos = next;\n                    while (css.charCodeAt(escapePos - 1) === t.backslash) {\n                        escapePos -= 1;\n                        escaped = !escaped;\n                    }\n                } while (escaped);\n\n                tokenType = t.str;\n                endLine = line;\n                endColumn = start - offset;\n                end = next + 1;\n                break;\n\n            case t.backslash:\n                next = start;\n                escaped = true;\n                while (css.charCodeAt(next + 1) === t.backslash) {\n                    next += 1;\n                    escaped = !escaped;\n                }\n                code = css.charCodeAt(next + 1);\n                if (escaped && code !== t.slash && code !== t.space && code !== t.newline && code !== t.tab && code !== t.cr && code !== t.feed) {\n                    next += 1;\n                }\n\n                tokenType = t.word;\n                endLine = line;\n                endColumn = next - offset;\n                end = next + 1;\n                break;\n\n            default:\n                if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {\n                    next = css.indexOf('*/', start + 2) + 1;\n                    if (next === 0) {\n                        unclosed('comment', '*/');\n                    }\n\n                    content = css.slice(start, next + 1);\n                    lines = content.split('\\n');\n                    last = lines.length - 1;\n\n                    if (last > 0) {\n                        nextLine = line + last;\n                        nextOffset = next - lines[last].length;\n                    } else {\n                        nextLine = line;\n                        nextOffset = offset;\n                    }\n\n                    tokenType = t.comment;\n                    line = nextLine;\n                    endLine = nextLine;\n                    endColumn = next - nextOffset;\n                } else {\n                    wordEnd.lastIndex = start + 1;\n                    wordEnd.test(css);\n                    if (wordEnd.lastIndex === 0) {\n                        next = css.length - 1;\n                    } else {\n                        next = wordEnd.lastIndex - 2;\n                    }\n\n                    tokenType = t.word;\n                    endLine = line;\n                    endColumn = next - offset;\n                }\n\n                end = next + 1;\n                break;\n        }\n\n        // Ensure that the token structure remains consistent\n        tokens.push([tokenType, // [0] Token type\n        line, // [1] Starting line\n        start - offset, // [2] Starting column\n        endLine, // [3] Ending line\n        endColumn, // [4] Ending column\n        start, // [5] Start position / Source index\n        end] // [6] End position\n        );\n\n        // Reset offset for the next token\n        if (nextOffset) {\n            offset = nextOffset;\n            nextOffset = null;\n        }\n\n        start = end;\n    }\n\n    return tokens;\n}\nmodule.exports = exports['default'];","\n\nexports.__esModule = true;\nvar ampersand = exports.ampersand = 38;\nvar asterisk = exports.asterisk = 42;\nvar at = exports.at = 64;\nvar comma = exports.comma = 44;\nvar colon = exports.colon = 58;\nvar semicolon = exports.semicolon = 59;\nvar openParenthesis = exports.openParenthesis = 40;\nvar closeParenthesis = exports.closeParenthesis = 41;\nvar openSquare = exports.openSquare = 91;\nvar closeSquare = exports.closeSquare = 93;\nvar dollar = exports.dollar = 36;\nvar tilde = exports.tilde = 126;\nvar caret = exports.caret = 94;\nvar plus = exports.plus = 43;\nvar equals = exports.equals = 61;\nvar pipe = exports.pipe = 124;\nvar greaterThan = exports.greaterThan = 62;\nvar space = exports.space = 32;\nvar singleQuote = exports.singleQuote = 39;\nvar doubleQuote = exports.doubleQuote = 34;\nvar slash = exports.slash = 47;\n\nvar backslash = exports.backslash = 92;\nvar cr = exports.cr = 13;\nvar feed = exports.feed = 12;\nvar newline = exports.newline = 10;\nvar tab = exports.tab = 9;\n\n// Expose aliases primarily for readability.\nvar str = exports.str = singleQuote;\n\n// No good single character representation!\nvar comment = exports.comment = -1;\nvar word = exports.word = -2;\nvar combinator = exports.combinator = -3;","\n\nexports.__esModule = true;\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _types[key];\n    }\n  });\n});\n\nvar _constructors = require(\"./constructors\");\n\nObject.keys(_constructors).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _constructors[key];\n    }\n  });\n});\n\nvar _guards = require(\"./guards\");\n\nObject.keys(_guards).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _guards[key];\n    }\n  });\n});","\n\nexports.__esModule = true;\nexports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = undefined;\n\nvar _attribute = require('./attribute');\n\nvar _attribute2 = _interopRequireDefault(_attribute);\n\nvar _className = require('./className');\n\nvar _className2 = _interopRequireDefault(_className);\n\nvar _combinator = require('./combinator');\n\nvar _combinator2 = _interopRequireDefault(_combinator);\n\nvar _comment = require('./comment');\n\nvar _comment2 = _interopRequireDefault(_comment);\n\nvar _id = require('./id');\n\nvar _id2 = _interopRequireDefault(_id);\n\nvar _nesting = require('./nesting');\n\nvar _nesting2 = _interopRequireDefault(_nesting);\n\nvar _pseudo = require('./pseudo');\n\nvar _pseudo2 = _interopRequireDefault(_pseudo);\n\nvar _root = require('./root');\n\nvar _root2 = _interopRequireDefault(_root);\n\nvar _selector = require('./selector');\n\nvar _selector2 = _interopRequireDefault(_selector);\n\nvar _string = require('./string');\n\nvar _string2 = _interopRequireDefault(_string);\n\nvar _tag = require('./tag');\n\nvar _tag2 = _interopRequireDefault(_tag);\n\nvar _universal = require('./universal');\n\nvar _universal2 = _interopRequireDefault(_universal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar attribute = exports.attribute = function attribute(opts) {\n  return new _attribute2.default(opts);\n};\nvar className = exports.className = function className(opts) {\n  return new _className2.default(opts);\n};\nvar combinator = exports.combinator = function combinator(opts) {\n  return new _combinator2.default(opts);\n};\nvar comment = exports.comment = function comment(opts) {\n  return new _comment2.default(opts);\n};\nvar id = exports.id = function id(opts) {\n  return new _id2.default(opts);\n};\nvar nesting = exports.nesting = function nesting(opts) {\n  return new _nesting2.default(opts);\n};\nvar pseudo = exports.pseudo = function pseudo(opts) {\n  return new _pseudo2.default(opts);\n};\nvar root = exports.root = function root(opts) {\n  return new _root2.default(opts);\n};\nvar selector = exports.selector = function selector(opts) {\n  return new _selector2.default(opts);\n};\nvar string = exports.string = function string(opts) {\n  return new _string2.default(opts);\n};\nvar tag = exports.tag = function tag(opts) {\n  return new _tag2.default(opts);\n};\nvar universal = exports.universal = function universal(opts) {\n  return new _universal2.default(opts);\n};","\n\nexports.__esModule = true;\nexports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = exports.isPseudo = exports.isNesting = exports.isIdentifier = exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _IS_TYPE;\n\nexports.isNode = isNode;\nexports.isPseudoElement = isPseudoElement;\nexports.isPseudoClass = isPseudoClass;\nexports.isContainer = isContainer;\nexports.isNamespace = isNamespace;\n\nvar _types = require(\"./types\");\n\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\n\nfunction isNode(node) {\n    return (typeof node === \"undefined\" ? \"undefined\" : _typeof(node)) === \"object\" && IS_TYPE[node.type];\n}\n\nfunction isNodeType(type, node) {\n    return isNode(node) && node.type === type;\n}\n\nvar isAttribute = exports.isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);\nvar isClassName = exports.isClassName = isNodeType.bind(null, _types.CLASS);\nvar isCombinator = exports.isCombinator = isNodeType.bind(null, _types.COMBINATOR);\nvar isComment = exports.isComment = isNodeType.bind(null, _types.COMMENT);\nvar isIdentifier = exports.isIdentifier = isNodeType.bind(null, _types.ID);\nvar isNesting = exports.isNesting = isNodeType.bind(null, _types.NESTING);\nvar isPseudo = exports.isPseudo = isNodeType.bind(null, _types.PSEUDO);\nvar isRoot = exports.isRoot = isNodeType.bind(null, _types.ROOT);\nvar isSelector = exports.isSelector = isNodeType.bind(null, _types.SELECTOR);\nvar isString = exports.isString = isNodeType.bind(null, _types.STRING);\nvar isTag = exports.isTag = isNodeType.bind(null, _types.TAG);\nvar isUniversal = exports.isUniversal = isNodeType.bind(null, _types.UNIVERSAL);\n\nfunction isPseudoElement(node) {\n    return isPseudo(node) && node.value && (node.value.startsWith(\"::\") || node.value === \":before\" || node.value === \":after\");\n}\nfunction isPseudoClass(node) {\n    return isPseudo(node) && !isPseudoElement(node);\n}\n\nfunction isContainer(node) {\n    return !!(isNode(node) && node.walk);\n}\n\nfunction isNamespace(node) {\n    return isClassName(node) || isAttribute(node) || isTag(node);\n}"]}