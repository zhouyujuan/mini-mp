{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nvar _isColorStop = require('is-color-stop');\n\nvar _isColorStop2 = _interopRequireDefault(_isColorStop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst angles = {\n    top: '0deg',\n    right: '90deg',\n    bottom: '180deg',\n    left: '270deg'\n};\n\nfunction isLessThan(a, b) {\n    return a.unit.toLowerCase() === b.unit.toLowerCase() && parseFloat(a.number) >= parseFloat(b.number);\n}\n\nfunction optimise(decl) {\n    const value = decl.value;\n\n    if (!~value.toLowerCase().indexOf('gradient')) {\n        return;\n    }\n\n    decl.value = (0, _postcssValueParser2.default)(value).walk(node => {\n        if (node.type !== 'function' || !node.nodes.length) {\n            return false;\n        }\n\n        const lowerCasedValue = node.value.toLowerCase();\n\n        if (lowerCasedValue === 'linear-gradient' || lowerCasedValue === 'repeating-linear-gradient' || lowerCasedValue === '-webkit-linear-gradient' || lowerCasedValue === '-webkit-repeating-linear-gradient') {\n            let args = (0, _cssnanoUtilGetArguments2.default)(node);\n\n            if (node.nodes[0].value.toLowerCase() === 'to' && args[0].length === 3) {\n                node.nodes = node.nodes.slice(2);\n                node.nodes[0].value = angles[node.nodes[0].value.toLowerCase()];\n            }\n\n            let lastStop = null;\n\n            args.forEach((arg, index) => {\n                if (!arg[2]) {\n                    return;\n                }\n\n                let isFinalStop = index === args.length - 1;\n                let thisStop = (0, _postcssValueParser.unit)(arg[2].value);\n\n                if (lastStop === null) {\n                    lastStop = thisStop;\n\n                    if (!isFinalStop && lastStop && lastStop.number === '0' && lastStop.unit.toLowerCase() !== 'deg') {\n                        arg[1].value = arg[2].value = '';\n                    }\n\n                    return;\n                }\n\n                if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n                    arg[2].value = 0;\n                }\n\n                lastStop = thisStop;\n\n                if (isFinalStop && arg[2].value === '100%') {\n                    arg[1].value = arg[2].value = '';\n                }\n            });\n\n            return false;\n        }\n\n        if (lowerCasedValue === 'radial-gradient' || lowerCasedValue === 'repeating-radial-gradient') {\n            let args = (0, _cssnanoUtilGetArguments2.default)(node);\n            let lastStop;\n\n            const hasAt = args[0].find(n => n.value.toLowerCase() === 'at');\n\n            args.forEach((arg, index) => {\n                if (!arg[2] || !index && hasAt) {\n                    return;\n                }\n\n                let thisStop = (0, _postcssValueParser.unit)(arg[2].value);\n\n                if (!lastStop) {\n                    lastStop = thisStop;\n\n                    return;\n                }\n\n                if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n                    arg[2].value = 0;\n                }\n\n                lastStop = thisStop;\n            });\n\n            return false;\n        }\n\n        if (lowerCasedValue === '-webkit-radial-gradient' || lowerCasedValue === '-webkit-repeating-radial-gradient') {\n            let args = (0, _cssnanoUtilGetArguments2.default)(node);\n            let lastStop;\n\n            args.forEach(arg => {\n                let color;\n                let stop;\n\n                if (arg[2] !== undefined) {\n                    if (arg[0].type === 'function') {\n                        color = `${arg[0].value}(${(0, _postcssValueParser.stringify)(arg[0].nodes)})`;\n                    } else {\n                        color = arg[0].value;\n                    }\n\n                    if (arg[2].type === 'function') {\n                        stop = `${arg[2].value}(${(0, _postcssValueParser.stringify)(arg[2].nodes)})`;\n                    } else {\n                        stop = arg[2].value;\n                    }\n                } else {\n                    if (arg[0].type === 'function') {\n                        color = `${arg[0].value}(${(0, _postcssValueParser.stringify)(arg[0].nodes)})`;\n                    }\n\n                    color = arg[0].value;\n                }\n\n                color = color.toLowerCase();\n\n                const colorStop = stop || stop === 0 ? (0, _isColorStop2.default)(color, stop.toLowerCase()) : (0, _isColorStop2.default)(color);\n\n                if (!colorStop || !arg[2]) {\n                    return;\n                }\n\n                let thisStop = (0, _postcssValueParser.unit)(arg[2].value);\n\n                if (!lastStop) {\n                    lastStop = thisStop;\n\n                    return;\n                }\n\n                if (lastStop && thisStop && isLessThan(lastStop, thisStop)) {\n                    arg[2].value = 0;\n                }\n\n                lastStop = thisStop;\n            });\n\n            return false;\n        }\n    }).toString();\n}\n\nexports.default = _postcss2.default.plugin('postcss-minify-gradients', () => {\n    return css => css.walkDecls(optimise);\n});\nmodule.exports = exports['default'];"]}