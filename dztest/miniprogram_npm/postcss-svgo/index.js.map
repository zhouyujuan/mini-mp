{"version":3,"sources":["index.js","lib/url.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _svgo = require('svgo');\n\nvar _svgo2 = _interopRequireDefault(_svgo);\n\nvar _url = require('./lib/url');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst PLUGIN = 'postcss-svgo';\nconst dataURI = /data:image\\/svg\\+xml(;((charset=)?utf-8|base64))?,/i;\nconst dataURIBase64 = /data:image\\/svg\\+xml;base64,/i;\n\nfunction minifyPromise(decl, getSvgo, opts, postcssResult) {\n    const promises = [];\n    const parsed = (0, _postcssValueParser2.default)(decl.value);\n\n    decl.value = parsed.walk(node => {\n        if (node.type !== 'function' || node.value.toLowerCase() !== 'url' || !node.nodes.length) {\n            return;\n        }\n\n        let { value, quote } = node.nodes[0];\n        let isBase64, isUriEncoded;\n        let svg = value.replace(dataURI, '');\n\n        if (dataURIBase64.test(value)) {\n            svg = Buffer.from(svg, 'base64').toString('utf8');\n            isBase64 = true;\n        } else {\n            let decodedUri;\n\n            try {\n                decodedUri = (0, _url.decode)(svg);\n                isUriEncoded = decodedUri !== svg;\n            } catch (e) {\n                // Swallow exception if we cannot decode the value\n                isUriEncoded = false;\n            }\n\n            if (isUriEncoded) {\n                svg = decodedUri;\n            }\n\n            if (opts.encode !== undefined) {\n                isUriEncoded = opts.encode;\n            }\n        }\n\n        promises.push(getSvgo().optimize(svg).then(result => {\n            if (result.error) {\n                decl.warn(postcssResult, `${result.error}`);\n                return;\n            }\n            let data, optimizedValue;\n\n            if (isBase64) {\n                data = Buffer.from(result.data).toString('base64');\n                optimizedValue = 'data:image/svg+xml;base64,' + data;\n            } else {\n                data = isUriEncoded ? (0, _url.encode)(result.data) : result.data;\n                // Should always encode # otherwise we yield a broken SVG\n                // in Firefox (works in Chrome however). See this issue:\n                // https://github.com/cssnano/cssnano/issues/245\n                data = data.replace(/#/g, '%23');\n                optimizedValue = 'data:image/svg+xml;charset=utf-8,' + data;\n                quote = isUriEncoded ? '\"' : '\\'';\n            }\n\n            node.nodes[0] = Object.assign({}, node.nodes[0], {\n                value: optimizedValue,\n                quote: quote,\n                type: 'string',\n                before: '',\n                after: ''\n            });\n        }).catch(error => {\n            decl.warn(postcssResult, `${error}`);\n        }));\n\n        return false;\n    });\n\n    return Promise.all(promises).then(() => decl.value = decl.value.toString());\n}\n\nexports.default = _postcss2.default.plugin(PLUGIN, (opts = {}) => {\n    let svgo = null;\n\n    const getSvgo = () => {\n        if (!svgo) {\n            svgo = new _svgo2.default(opts);\n        }\n\n        return svgo;\n    };\n\n    return (css, result) => {\n        return new Promise((resolve, reject) => {\n            const svgoQueue = [];\n\n            css.walkDecls(decl => {\n                if (!dataURI.test(decl.value)) {\n                    return;\n                }\n\n                svgoQueue.push(minifyPromise(decl, getSvgo, opts, result));\n            });\n\n            return Promise.all(svgoQueue).then(resolve, reject);\n        });\n    };\n});\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.encode = encode;\nfunction encode(data) {\n    return data.replace(/\"/g, '\\'').replace(/%/g, '%25').replace(/</g, '%3C').replace(/>/g, '%3E').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\s+/g, ' ');\n};\n\nconst decode = exports.decode = decodeURIComponent;"]}