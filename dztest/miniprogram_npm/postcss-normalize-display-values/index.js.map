{"version":3,"sources":["index.js","lib/map.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require(\"postcss-value-parser\");\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _cssnanoUtilGetMatch = require(\"cssnano-util-get-match\");\n\nvar _cssnanoUtilGetMatch2 = _interopRequireDefault(_cssnanoUtilGetMatch);\n\nvar _map = require(\"./lib/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst getMatch = (0, _cssnanoUtilGetMatch2.default)(_map2.default);\n\nfunction evenValues(list, index) {\n    return index % 2 === 0;\n}\n\nexports.default = _postcss2.default.plugin(\"postcss-normalize-display-values\", () => {\n    return css => {\n        const cache = {};\n\n        css.walkDecls(/display/i, decl => {\n            const value = decl.value;\n\n            if (cache[value]) {\n                decl.value = cache[value];\n\n                return;\n            }\n\n            const { nodes } = (0, _postcssValueParser2.default)(value);\n\n            if (nodes.length === 1) {\n                cache[value] = value;\n\n                return;\n            }\n\n            const match = getMatch(nodes.filter(evenValues).map(n => n.value.toLowerCase()));\n\n            if (!match) {\n                cache[value] = value;\n\n                return;\n            }\n\n            const result = match;\n\n            decl.value = result;\n            cache[value] = result;\n        });\n    };\n});\nmodule.exports = exports[\"default\"];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst block = 'block';\nconst flex = 'flex';\nconst flow = 'flow';\nconst flowRoot = 'flow-root';\nconst grid = 'grid';\nconst inline = 'inline';\nconst inlineBlock = 'inline-block';\nconst inlineFlex = 'inline-flex';\nconst inlineGrid = 'inline-grid';\nconst inlineTable = 'inline-table';\nconst listItem = 'list-item';\nconst ruby = 'ruby';\nconst rubyBase = 'ruby-base';\nconst rubyText = 'ruby-text';\nconst runIn = 'run-in';\nconst table = 'table';\nconst tableCell = 'table-cell';\nconst tableCaption = 'table-caption';\n\n/**\n * Specification: https://drafts.csswg.org/css-display/#the-display-properties\n */\n\nexports.default = [[block, [block, flow]], [flowRoot, [block, flowRoot]], [inline, [inline, flow]], [inlineBlock, [inline, flowRoot]], [runIn, [runIn, flow]], [listItem, [listItem, block, flow]], [inline + ' ' + listItem, [inline, flow, listItem]], [flex, [block, flex]], [inlineFlex, [inline, flex]], [grid, [block, grid]], [inlineGrid, [inline, grid]], [ruby, [inline, ruby]],\n// `block ruby` is same\n[table, [block, table]], [inlineTable, [inline, table]], [tableCell, [tableCell, flow]], [tableCaption, [tableCaption, flow]], [rubyBase, [rubyBase, flow]], [rubyText, [rubyText, flow]]];\nmodule.exports = exports['default'];"]}