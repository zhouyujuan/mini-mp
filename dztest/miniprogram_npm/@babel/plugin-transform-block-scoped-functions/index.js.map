{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n\n  function statementList(key, path) {\n    const paths = path.get(key);\n\n    for (const path of paths) {\n      const func = path.node;\n      if (!path.isFunctionDeclaration()) continue;\n\n      const declar = _core.types.variableDeclaration(\"let\", [_core.types.variableDeclarator(func.id, _core.types.toExpression(func))]);\n\n      declar._blockHoist = 2;\n      func.id = null;\n      path.replaceWith(declar);\n    }\n  }\n\n  return {\n    name: \"transform-block-scoped-functions\",\n    visitor: {\n      BlockStatement(path) {\n        const {\n          node,\n          parent\n        } = path;\n\n        if (_core.types.isFunction(parent, {\n          body: node\n        }) || _core.types.isExportDeclaration(parent)) {\n          return;\n        }\n\n        statementList(\"body\", path);\n      },\n\n      SwitchCase(path) {\n        statementList(\"consequent\", path);\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]}