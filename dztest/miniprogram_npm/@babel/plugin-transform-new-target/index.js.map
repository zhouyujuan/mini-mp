{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"transform-new-target\",\n    visitor: {\n      MetaProperty(path) {\n        const meta = path.get(\"meta\");\n        const property = path.get(\"property\");\n        const {\n          scope\n        } = path;\n\n        if (meta.isIdentifier({\n          name: \"new\"\n        }) && property.isIdentifier({\n          name: \"target\"\n        })) {\n          const func = path.findParent(path => {\n            if (path.isClass()) return true;\n\n            if (path.isFunction() && !path.isArrowFunctionExpression()) {\n              if (path.isClassMethod({\n                kind: \"constructor\"\n              })) {\n                return false;\n              }\n\n              return true;\n            }\n\n            return false;\n          });\n\n          if (!func) {\n            throw path.buildCodeFrameError(\"new.target must be under a (non-arrow) function or a class.\");\n          }\n\n          const {\n            node\n          } = func;\n\n          if (!node.id) {\n            if (func.isMethod()) {\n              path.replaceWith(scope.buildUndefinedNode());\n              return;\n            }\n\n            node.id = scope.generateUidIdentifier(\"target\");\n          }\n\n          const constructor = _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier(\"constructor\"));\n\n          if (func.isClass()) {\n            path.replaceWith(constructor);\n            return;\n          }\n\n          path.replaceWith(_core.types.conditionalExpression(_core.types.binaryExpression(\"instanceof\", _core.types.thisExpression(), _core.types.cloneNode(node.id)), constructor, scope.buildUndefinedNode()));\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]}