{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const {\n    legacy = false\n  } = options;\n\n  if (typeof legacy !== \"boolean\") {\n    throw new Error(\"'legacy' must be a boolean.\");\n  }\n\n  const {\n    decoratorsBeforeExport\n  } = options;\n\n  if (decoratorsBeforeExport === undefined) {\n    if (!legacy) {\n      throw new Error(\"The '@babel/plugin-syntax-decorators' plugin requires a\" + \" 'decoratorsBeforeExport' option, whose value must be a boolean.\" + \" If you want to use the legacy decorators semantics, you can set\" + \" the 'legacy: true' option.\");\n    }\n  } else {\n    if (legacy) {\n      throw new Error(\"'decoratorsBeforeExport' can't be used with legacy decorators.\");\n    }\n\n    if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  return {\n    name: \"syntax-decorators\",\n\n    manipulateOptions(opts, parserOpts) {\n      parserOpts.plugins.push(legacy ? \"decorators-legacy\" : [\"decorators\", {\n        decoratorsBeforeExport\n      }]);\n    }\n\n  };\n});\n\nexports.default = _default;"]}