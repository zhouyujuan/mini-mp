{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _helperPluginUtils() {\n  const data = require(\"@babel/helper-plugin-utils\");\n\n  _helperPluginUtils = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _pluginSyntaxLogicalAssignmentOperators() {\n  const data = _interopRequireDefault(require(\"@babel/plugin-syntax-logical-assignment-operators\"));\n\n  _pluginSyntaxLogicalAssignmentOperators = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _core() {\n  const data = require(\"@babel/core\");\n\n  _core = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = (0, _helperPluginUtils().declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"proposal-logical-assignment-operators\",\n    inherits: _pluginSyntaxLogicalAssignmentOperators().default,\n    visitor: {\n      AssignmentExpression(path) {\n        const {\n          node,\n          scope\n        } = path;\n        const {\n          operator,\n          left,\n          right\n        } = node;\n\n        if (operator !== \"||=\" && operator !== \"&&=\" && operator !== \"??=\") {\n          return;\n        }\n\n        const lhs = _core().types.cloneNode(left);\n\n        if (_core().types.isMemberExpression(left)) {\n          const {\n            object,\n            property,\n            computed\n          } = left;\n          const memo = scope.maybeGenerateMemoised(object);\n\n          if (memo) {\n            left.object = memo;\n            lhs.object = _core().types.assignmentExpression(\"=\", _core().types.cloneNode(memo), object);\n          }\n\n          if (computed) {\n            const memo = scope.maybeGenerateMemoised(property);\n\n            if (memo) {\n              left.property = memo;\n              lhs.property = _core().types.assignmentExpression(\"=\", _core().types.cloneNode(memo), property);\n            }\n          }\n        }\n\n        path.replaceWith(_core().types.logicalExpression(operator.slice(0, -1), lhs, _core().types.assignmentExpression(\"=\", left, right)));\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]}