{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nfunction getName(key) {\n  if (_core.types.isIdentifier(key)) {\n    return key.name;\n  }\n\n  return key.value.toString();\n}\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"transform-duplicate-keys\",\n    visitor: {\n      ObjectExpression(path) {\n        const {\n          node\n        } = path;\n        const plainProps = node.properties.filter(prop => !_core.types.isSpreadElement(prop) && !prop.computed);\n        const alreadySeenData = Object.create(null);\n        const alreadySeenGetters = Object.create(null);\n        const alreadySeenSetters = Object.create(null);\n\n        for (const prop of plainProps) {\n          const name = getName(prop.key);\n          let isDuplicate = false;\n\n          switch (prop.kind) {\n            case \"get\":\n              if (alreadySeenData[name] || alreadySeenGetters[name]) {\n                isDuplicate = true;\n              }\n\n              alreadySeenGetters[name] = true;\n              break;\n\n            case \"set\":\n              if (alreadySeenData[name] || alreadySeenSetters[name]) {\n                isDuplicate = true;\n              }\n\n              alreadySeenSetters[name] = true;\n              break;\n\n            default:\n              if (alreadySeenData[name] || alreadySeenGetters[name] || alreadySeenSetters[name]) {\n                isDuplicate = true;\n              }\n\n              alreadySeenData[name] = true;\n          }\n\n          if (isDuplicate) {\n            prop.computed = true;\n            prop.key = _core.types.stringLiteral(name);\n          }\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]}