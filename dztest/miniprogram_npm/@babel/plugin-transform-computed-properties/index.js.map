{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  var _api$assumption;\n\n  api.assertVersion(7);\n  const setComputedProperties = (_api$assumption = api.assumption(\"setComputedProperties\")) != null ? _api$assumption : options.loose;\n  const pushComputedProps = setComputedProperties ? pushComputedPropsLoose : pushComputedPropsSpec;\n  const buildMutatorMapAssign = (0, _core.template)(`\n    MUTATOR_MAP_REF[KEY] = MUTATOR_MAP_REF[KEY] || {};\n    MUTATOR_MAP_REF[KEY].KIND = VALUE;\n  `);\n\n  function getValue(prop) {\n    if (_core.types.isObjectProperty(prop)) {\n      return prop.value;\n    } else if (_core.types.isObjectMethod(prop)) {\n      return _core.types.functionExpression(null, prop.params, prop.body, prop.generator, prop.async);\n    }\n  }\n\n  function pushAssign(objId, prop, body) {\n    if (prop.kind === \"get\" && prop.kind === \"set\") {\n      pushMutatorDefine(objId, prop, body);\n    } else {\n      body.push(_core.types.expressionStatement(_core.types.assignmentExpression(\"=\", _core.types.memberExpression(_core.types.cloneNode(objId), prop.key, prop.computed || _core.types.isLiteral(prop.key)), getValue(prop))));\n    }\n  }\n\n  function pushMutatorDefine({\n    body,\n    getMutatorId,\n    scope\n  }, prop) {\n    let key = !prop.computed && _core.types.isIdentifier(prop.key) ? _core.types.stringLiteral(prop.key.name) : prop.key;\n    const maybeMemoise = scope.maybeGenerateMemoised(key);\n\n    if (maybeMemoise) {\n      body.push(_core.types.expressionStatement(_core.types.assignmentExpression(\"=\", maybeMemoise, key)));\n      key = maybeMemoise;\n    }\n\n    body.push(...buildMutatorMapAssign({\n      MUTATOR_MAP_REF: getMutatorId(),\n      KEY: _core.types.cloneNode(key),\n      VALUE: getValue(prop),\n      KIND: _core.types.identifier(prop.kind)\n    }));\n  }\n\n  function pushComputedPropsLoose(info) {\n    for (const prop of info.computedProps) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        pushMutatorDefine(info, prop);\n      } else {\n        pushAssign(_core.types.cloneNode(info.objId), prop, info.body);\n      }\n    }\n  }\n\n  function pushComputedPropsSpec(info) {\n    const {\n      objId,\n      body,\n      computedProps,\n      state\n    } = info;\n\n    for (const prop of computedProps) {\n      const key = _core.types.toComputedKey(prop);\n\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        pushMutatorDefine(info, prop);\n      } else {\n        if (computedProps.length === 1) {\n          return _core.types.callExpression(state.addHelper(\"defineProperty\"), [info.initPropExpression, key, getValue(prop)]);\n        } else {\n          body.push(_core.types.expressionStatement(_core.types.callExpression(state.addHelper(\"defineProperty\"), [_core.types.cloneNode(objId), key, getValue(prop)])));\n        }\n      }\n    }\n  }\n\n  return {\n    name: \"transform-computed-properties\",\n    visitor: {\n      ObjectExpression: {\n        exit(path, state) {\n          const {\n            node,\n            parent,\n            scope\n          } = path;\n          let hasComputed = false;\n\n          for (const prop of node.properties) {\n            hasComputed = prop.computed === true;\n            if (hasComputed) break;\n          }\n\n          if (!hasComputed) return;\n          const initProps = [];\n          const computedProps = [];\n          let foundComputed = false;\n\n          for (const prop of node.properties) {\n            if (prop.computed) {\n              foundComputed = true;\n            }\n\n            if (foundComputed) {\n              computedProps.push(prop);\n            } else {\n              initProps.push(prop);\n            }\n          }\n\n          const objId = scope.generateUidIdentifierBasedOnNode(parent);\n\n          const initPropExpression = _core.types.objectExpression(initProps);\n\n          const body = [];\n          body.push(_core.types.variableDeclaration(\"var\", [_core.types.variableDeclarator(objId, initPropExpression)]));\n          let mutatorRef;\n\n          const getMutatorId = function () {\n            if (!mutatorRef) {\n              mutatorRef = scope.generateUidIdentifier(\"mutatorMap\");\n              body.push(_core.types.variableDeclaration(\"var\", [_core.types.variableDeclarator(mutatorRef, _core.types.objectExpression([]))]));\n            }\n\n            return _core.types.cloneNode(mutatorRef);\n          };\n\n          const single = pushComputedProps({\n            scope,\n            objId,\n            body,\n            computedProps,\n            initPropExpression,\n            getMutatorId,\n            state\n          });\n\n          if (mutatorRef) {\n            body.push(_core.types.expressionStatement(_core.types.callExpression(state.addHelper(\"defineEnumerableProperties\"), [_core.types.cloneNode(objId), _core.types.cloneNode(mutatorRef)])));\n          }\n\n          if (single) {\n            path.replaceWith(single);\n          } else {\n            body.push(_core.types.expressionStatement(_core.types.cloneNode(objId)));\n            path.replaceWithMultiple(body);\n          }\n        }\n\n      }\n    }\n  };\n});\n\nexports.default = _default;"]}