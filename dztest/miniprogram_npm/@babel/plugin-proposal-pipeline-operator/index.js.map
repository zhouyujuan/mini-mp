{"version":3,"sources":["index.js","minimalVisitor.js","smartVisitor.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _helperPluginUtils() {\n  const data = require(\"@babel/helper-plugin-utils\");\n\n  _helperPluginUtils = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _pluginSyntaxPipelineOperator() {\n  const data = _interopRequireDefault(require(\"@babel/plugin-syntax-pipeline-operator\"));\n\n  _pluginSyntaxPipelineOperator = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _minimalVisitor = _interopRequireDefault(require(\"./minimalVisitor\"));\n\nvar _smartVisitor = _interopRequireDefault(require(\"./smartVisitor\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst visitorsPerProposal = {\n  minimal: _minimalVisitor.default,\n  smart: _smartVisitor.default\n};\n\nvar _default = (0, _helperPluginUtils().declare)((api, options) => {\n  api.assertVersion(7);\n  return {\n    name: \"proposal-pipeline-operator\",\n    inherits: _pluginSyntaxPipelineOperator().default,\n    visitor: visitorsPerProposal[options.proposal]\n  };\n});\n\nexports.default = _default;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _core() {\n  const data = require(\"@babel/core\");\n\n  _core = function () {\n    return data;\n  };\n\n  return data;\n}\n\nconst minimalVisitor = {\n  BinaryExpression(path) {\n    const {\n      scope\n    } = path;\n    const {\n      node\n    } = path;\n    const {\n      operator,\n      left\n    } = node;\n    let {\n      right\n    } = node;\n    if (operator !== \"|>\") return;\n    let optimizeArrow = _core().types.isArrowFunctionExpression(right) && _core().types.isExpression(right.body) && !right.async && !right.generator;\n    let param;\n\n    if (optimizeArrow) {\n      const {\n        params\n      } = right;\n\n      if (params.length === 1 && _core().types.isIdentifier(params[0])) {\n        param = params[0];\n      } else if (params.length > 0) {\n        optimizeArrow = false;\n      }\n    } else if (_core().types.isIdentifier(right, {\n      name: \"eval\"\n    })) {\n      right = _core().types.sequenceExpression([_core().types.numericLiteral(0), right]);\n    }\n\n    if (optimizeArrow && !param) {\n      path.replaceWith(_core().types.sequenceExpression([left, right.body]));\n      return;\n    }\n\n    const placeholder = scope.generateUidIdentifierBasedOnNode(param || left);\n    scope.push({\n      id: placeholder\n    });\n\n    if (param) {\n      path.get(\"right\").scope.rename(param.name, placeholder.name);\n    }\n\n    const call = optimizeArrow ? right.body : _core().types.callExpression(right, [_core().types.cloneNode(placeholder)]);\n    path.replaceWith(_core().types.sequenceExpression([_core().types.assignmentExpression(\"=\", _core().types.cloneNode(placeholder), left), call]));\n  }\n\n};\nvar _default = minimalVisitor;\nexports.default = _default;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _core() {\n  const data = require(\"@babel/core\");\n\n  _core = function () {\n    return data;\n  };\n\n  return data;\n}\n\nconst updateTopicReferenceVisitor = {\n  PipelinePrimaryTopicReference(path) {\n    path.replaceWith(this.topicId);\n  },\n\n  PipelineTopicExpression(path) {\n    path.skip();\n  }\n\n};\nconst smartVisitor = {\n  BinaryExpression(path) {\n    const {\n      scope\n    } = path;\n    const {\n      node\n    } = path;\n    const {\n      operator,\n      left,\n      right\n    } = node;\n    if (operator !== \"|>\") return;\n    const placeholder = scope.generateUidIdentifierBasedOnNode(left);\n    scope.push({\n      id: placeholder\n    });\n    let call;\n\n    if (_core().types.isPipelineTopicExpression(right)) {\n      path.get(\"right\").traverse(updateTopicReferenceVisitor, {\n        topicId: placeholder\n      });\n      call = right.expression;\n    } else {\n      let callee = right.callee;\n\n      if (_core().types.isIdentifier(callee, {\n        name: \"eval\"\n      })) {\n        callee = _core().types.sequenceExpression([_core().types.numericLiteral(0), callee]);\n      }\n\n      call = _core().types.callExpression(callee, [_core().types.cloneNode(placeholder)]);\n    }\n\n    path.replaceWith(_core().types.sequenceExpression([_core().types.assignmentExpression(\"=\", _core().types.cloneNode(placeholder), left), call]));\n  }\n\n};\nvar _default = smartVisitor;\nexports.default = _default;"]}