{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nvar _has = require('has');\n\nvar _has2 = _interopRequireDefault(_has);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst directions = ['top', 'right', 'bottom', 'left', 'center'];\n\nconst center = '50%';\n\nconst horizontal = {\n    right: '100%',\n    left: '0'\n};\n\nconst vertical = {\n    bottom: '100%',\n    top: '0'\n};\n\nfunction transform(value) {\n    const parsed = (0, _postcssValueParser2.default)(value);\n    const args = (0, _cssnanoUtilGetArguments2.default)(parsed);\n    const relevant = [];\n\n    args.forEach(arg => {\n        relevant.push({\n            start: null,\n            end: null\n        });\n\n        arg.forEach((part, index) => {\n            const isPosition = ~directions.indexOf(part.value.toLowerCase()) || (0, _postcssValueParser.unit)(part.value);\n            const len = relevant.length - 1;\n\n            if (relevant[len].start === null && isPosition) {\n                relevant[len].start = index;\n                relevant[len].end = index;\n\n                return;\n            }\n\n            if (relevant[len].start !== null) {\n                if (part.type === 'space') {\n                    return;\n                } else if (isPosition) {\n                    relevant[len].end = index;\n\n                    return;\n                }\n\n                return;\n            }\n        });\n    });\n\n    relevant.forEach((range, index) => {\n        if (range.start === null) {\n            return;\n        }\n\n        const position = args[index].slice(range.start, range.end + 1);\n\n        if (position.length > 3) {\n            return;\n        }\n\n        const firstValue = position[0].value.toLowerCase();\n        const secondValue = position[2] && position[2].value ? position[2].value.toLowerCase() : null;\n\n        if (position.length === 1 || secondValue === 'center') {\n            if (secondValue) {\n                position[2].value = position[1].value = '';\n            }\n\n            const map = Object.assign({}, horizontal, {\n                center\n            });\n\n            if ((0, _has2.default)(map, firstValue)) {\n                position[0].value = map[firstValue];\n            }\n\n            return;\n        }\n\n        if (firstValue === 'center' && ~directions.indexOf(secondValue)) {\n            position[0].value = position[1].value = '';\n\n            if ((0, _has2.default)(horizontal, secondValue)) {\n                position[2].value = horizontal[secondValue];\n            }\n\n            return;\n        }\n\n        if ((0, _has2.default)(horizontal, firstValue) && (0, _has2.default)(vertical, secondValue)) {\n            position[0].value = horizontal[firstValue];\n            position[2].value = vertical[secondValue];\n\n            return;\n        } else if ((0, _has2.default)(vertical, firstValue) && (0, _has2.default)(horizontal, secondValue)) {\n            position[0].value = horizontal[secondValue];\n            position[2].value = vertical[firstValue];\n\n            return;\n        }\n    });\n\n    return parsed.toString();\n}\n\nexports.default = (0, _postcss.plugin)('postcss-normalize-positions', () => {\n    return css => {\n        const cache = {};\n\n        css.walkDecls(/^(background(-position)?|(-webkit-)?perspective-origin)$/i, decl => {\n            const value = decl.value;\n\n            if (cache[value]) {\n                decl.value = cache[value];\n\n                return;\n            }\n\n            const result = transform(value);\n\n            decl.value = result;\n            cache[value] = result;\n        });\n    };\n});\nmodule.exports = exports['default'];"]}