{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nfunction noop() {}\n\nfunction trimValue(value) {\n    return value ? value.trim() : value;\n}\n\nfunction empty(node) {\n    return !node.nodes.filter(child => child.type !== 'comment').length;\n}\n\nfunction equals(a, b) {\n    if (a.type !== b.type) {\n        return false;\n    }\n\n    if (a.important !== b.important) {\n        return false;\n    }\n\n    if (a.raws && !b.raws || !a.raws && b.raws) {\n        return false;\n    }\n\n    switch (a.type) {\n        case 'rule':\n            if (a.selector !== b.selector) {\n                return false;\n            }\n            break;\n        case 'atrule':\n            if (a.name !== b.name || a.params !== b.params) {\n                return false;\n            }\n\n            if (a.raws && trimValue(a.raws.before) !== trimValue(b.raws.before)) {\n                return false;\n            }\n\n            if (a.raws && trimValue(a.raws.afterName) !== trimValue(b.raws.afterName)) {\n                return false;\n            }\n            break;\n        case 'decl':\n            if (a.prop !== b.prop || a.value !== b.value) {\n                return false;\n            }\n\n            if (a.raws && trimValue(a.raws.before) !== trimValue(b.raws.before)) {\n                return false;\n            }\n            break;\n    }\n\n    if (a.nodes) {\n        if (a.nodes.length !== b.nodes.length) {\n            return false;\n        }\n\n        for (let i = 0; i < a.nodes.length; i++) {\n            if (!equals(a.nodes[i], b.nodes[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction dedupeRule(last, nodes) {\n    let index = nodes.indexOf(last) - 1;\n    while (index >= 0) {\n        const node = nodes[index--];\n        if (node && node.type === 'rule' && node.selector === last.selector) {\n            last.each(child => {\n                if (child.type === 'decl') {\n                    dedupeNode(child, node.nodes);\n                }\n            });\n\n            if (empty(node)) {\n                node.remove();\n            }\n        }\n    }\n}\n\nfunction dedupeNode(last, nodes) {\n    let index = !!~nodes.indexOf(last) ? nodes.indexOf(last) - 1 : nodes.length - 1;\n\n    while (index >= 0) {\n        const node = nodes[index--];\n        if (node && equals(node, last)) {\n            node.remove();\n        }\n    }\n}\n\nconst handlers = {\n    rule: dedupeRule,\n    atrule: dedupeNode,\n    decl: dedupeNode,\n    comment: noop\n};\n\nfunction dedupe(root) {\n    const { nodes } = root;\n\n    if (!nodes) {\n        return;\n    }\n\n    let index = nodes.length - 1;\n    while (index >= 0) {\n        let last = nodes[index--];\n        if (!last || !last.parent) {\n            continue;\n        }\n        dedupe(last);\n        handlers[last.type](last, nodes);\n    }\n}\n\nexports.default = (0, _postcss.plugin)('postcss-discard-duplicates', () => dedupe);\nmodule.exports = exports['default'];"]}