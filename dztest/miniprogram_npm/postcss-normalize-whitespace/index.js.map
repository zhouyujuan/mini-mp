{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _postcssValueParser = require(\"postcss-value-parser\");\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst atrule = \"atrule\";\nconst decl = \"decl\";\nconst rule = \"rule\";\n\nfunction reduceCalcWhitespaces(node) {\n    if (node.type === \"space\") {\n        node.value = \" \";\n    } else if (node.type === \"function\") {\n        node.before = node.after = \"\";\n    }\n}\n\nfunction reduceWhitespaces(node) {\n    if (node.type === \"space\") {\n        node.value = \" \";\n    } else if (node.type === \"div\") {\n        node.before = node.after = \"\";\n    } else if (node.type === \"function\") {\n        node.before = node.after = \"\";\n\n        if (node.value.toLowerCase() === \"calc\") {\n            _postcssValueParser2.default.walk(node.nodes, reduceCalcWhitespaces);\n            return false;\n        }\n    }\n}\n\nexports.default = (0, _postcss.plugin)(\"postcss-normalize-whitespace\", () => {\n    return css => {\n        const cache = {};\n\n        css.walk(node => {\n            const { type } = node;\n\n            if (~[decl, rule, atrule].indexOf(type) && node.raws.before) {\n                node.raws.before = node.raws.before.replace(/\\s/g, \"\");\n            }\n\n            if (type === decl) {\n                // Ensure that !important values do not have any excess whitespace\n                if (node.important) {\n                    node.raws.important = \"!important\";\n                }\n\n                // Remove whitespaces around ie 9 hack\n                node.value = node.value.replace(/\\s*(\\\\9)\\s*/, \"$1\");\n\n                const value = node.value;\n\n                if (cache[value]) {\n                    node.value = cache[value];\n                } else {\n                    const parsed = (0, _postcssValueParser2.default)(node.value);\n                    const result = parsed.walk(reduceWhitespaces).toString();\n\n                    // Trim whitespace inside functions & dividers\n                    node.value = result;\n                    cache[value] = result;\n                }\n\n                // Remove extra semicolons and whitespace before the declaration\n                if (node.raws.before) {\n                    const prev = node.prev();\n\n                    if (prev && prev.type !== rule) {\n                        node.raws.before = node.raws.before.replace(/;/g, \"\");\n                    }\n                }\n\n                node.raws.between = \":\";\n                node.raws.semicolon = false;\n            } else if (type === rule || type === atrule) {\n                node.raws.between = node.raws.after = \"\";\n                node.raws.semicolon = false;\n            }\n        });\n\n        // Remove final newline\n        css.raws.after = \"\";\n    };\n});\nmodule.exports = exports[\"default\"];"]}