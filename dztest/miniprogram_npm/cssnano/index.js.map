{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _cosmiconfig = require('cosmiconfig');\n\nvar _cosmiconfig2 = _interopRequireDefault(_cosmiconfig);\n\nvar _isResolvable = require('is-resolvable');\n\nvar _isResolvable2 = _interopRequireDefault(_isResolvable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst cssnano = 'cssnano';\n\nfunction initializePlugin(plugin, css, result) {\n    if (Array.isArray(plugin)) {\n        const [processor, opts] = plugin;\n        if (typeof opts === 'undefined' || typeof opts === 'object' && !opts.exclude || typeof opts === 'boolean' && opts === true) {\n            return Promise.resolve(processor(opts)(css, result));\n        }\n    } else {\n        return Promise.resolve(plugin()(css, result));\n    }\n    // Handle excluded plugins\n    return Promise.resolve();\n}\n\n/*\n * preset can be one of four possibilities:\n * preset = 'default'\n * preset = ['default', {}]\n * preset = function <- to be invoked\n * preset = {plugins: []} <- already invoked function\n */\n\nfunction resolvePreset(preset) {\n    let fn, options;\n    if (Array.isArray(preset)) {\n        fn = preset[0];\n        options = preset[1];\n    } else {\n        fn = preset;\n        options = {};\n    }\n    // For JS setups where we invoked the preset already\n    if (preset.plugins) {\n        return Promise.resolve(preset.plugins);\n    }\n    // Provide an alias for the default preset, as it is built-in.\n    if (fn === 'default') {\n        return Promise.resolve(require('cssnano-preset-default')(options).plugins);\n    }\n    // For non-JS setups; we'll need to invoke the preset ourselves.\n    if (typeof fn === 'function') {\n        return Promise.resolve(fn(options).plugins);\n    }\n    // Try loading a preset from node_modules\n    if ((0, _isResolvable2.default)(fn)) {\n        return Promise.resolve(require(fn)(options).plugins);\n    }\n    const sugar = `cssnano-preset-${fn}`;\n    // Try loading a preset from node_modules (sugar)\n    if ((0, _isResolvable2.default)(sugar)) {\n        return Promise.resolve(require(sugar)(options).plugins);\n    }\n    // If all else fails, we probably have a typo in the config somewhere\n    throw new Error(`Cannot load preset \"${fn}\". Please check your configuration for errors and try again.`);\n}\n\n/*\n * cssnano will look for configuration firstly as options passed\n * directly to it, and failing this it will use cosmiconfig to\n * load an external file.\n */\n\nfunction resolveConfig(css, result, options) {\n    if (options.preset) {\n        return resolvePreset(options.preset);\n    }\n\n    const inputFile = css.source && css.source.input && css.source.input.file;\n    let searchPath = inputFile ? _path2.default.dirname(inputFile) : process.cwd();\n    let configPath = null;\n\n    if (options.configFile) {\n        searchPath = null;\n        configPath = _path2.default.resolve(process.cwd(), options.configFile);\n    }\n\n    const configExplorer = (0, _cosmiconfig2.default)(cssnano);\n    const searchForConfig = configPath ? configExplorer.load(configPath) : configExplorer.search(searchPath);\n\n    return searchForConfig.then(config => {\n        if (config === null) {\n            return resolvePreset('default');\n        }\n        return resolvePreset(config.config.preset || config.config);\n    });\n}\n\nexports.default = _postcss2.default.plugin(cssnano, (options = {}) => {\n    return (css, result) => {\n        return resolveConfig(css, result, options).then(plugins => {\n            return plugins.reduce((promise, plugin) => {\n                return promise.then(initializePlugin.bind(null, plugin, css, result));\n            }, Promise.resolve());\n        });\n    };\n});\nmodule.exports = exports['default'];"]}