{"version":3,"sources":["htmlminifier.js","htmlparser.js","utils.js","tokenchain.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar CleanCSS = require('clean-css');\nvar decode = require('he').decode;\nvar HTMLParser = require('./htmlparser').HTMLParser;\nvar RelateUrl = require('relateurl');\nvar TokenChain = require('./tokenchain');\nvar UglifyJS = require('uglify-js');\nvar utils = require('./utils');\n\nfunction trimWhitespace(str) {\n  return str && str.replace(/^[ \\n\\r\\t\\f]+/, '').replace(/[ \\n\\r\\t\\f]+$/, '');\n}\n\nfunction collapseWhitespaceAll(str) {\n  // Non-breaking space is specifically handled inside the replacer function here:\n  return str && str.replace(/[ \\n\\r\\t\\f\\xA0]+/g, function(spaces) {\n    return spaces === '\\t' ? '\\t' : spaces.replace(/(^|\\xA0+)[^\\xA0]+/g, '$1 ');\n  });\n}\n\nfunction collapseWhitespace(str, options, trimLeft, trimRight, collapseAll) {\n  var lineBreakBefore = '', lineBreakAfter = '';\n\n  if (options.preserveLineBreaks) {\n    str = str.replace(/^[ \\n\\r\\t\\f]*?[\\n\\r][ \\n\\r\\t\\f]*/, function() {\n      lineBreakBefore = '\\n';\n      return '';\n    }).replace(/[ \\n\\r\\t\\f]*?[\\n\\r][ \\n\\r\\t\\f]*$/, function() {\n      lineBreakAfter = '\\n';\n      return '';\n    });\n  }\n\n  if (trimLeft) {\n    // Non-breaking space is specifically handled inside the replacer function here:\n    str = str.replace(/^[ \\n\\r\\t\\f\\xA0]+/, function(spaces) {\n      var conservative = !lineBreakBefore && options.conservativeCollapse;\n      if (conservative && spaces === '\\t') {\n        return '\\t';\n      }\n      return spaces.replace(/^[^\\xA0]+/, '').replace(/(\\xA0+)[^\\xA0]+/g, '$1 ') || (conservative ? ' ' : '');\n    });\n  }\n\n  if (trimRight) {\n    // Non-breaking space is specifically handled inside the replacer function here:\n    str = str.replace(/[ \\n\\r\\t\\f\\xA0]+$/, function(spaces) {\n      var conservative = !lineBreakAfter && options.conservativeCollapse;\n      if (conservative && spaces === '\\t') {\n        return '\\t';\n      }\n      return spaces.replace(/[^\\xA0]+(\\xA0+)/g, ' $1').replace(/[^\\xA0]+$/, '') || (conservative ? ' ' : '');\n    });\n  }\n\n  if (collapseAll) {\n    // strip non space whitespace then compress spaces to one\n    str = collapseWhitespaceAll(str);\n  }\n\n  return lineBreakBefore + str + lineBreakAfter;\n}\n\nvar createMapFromString = utils.createMapFromString;\n// non-empty tags that will maintain whitespace around them\nvar inlineTags = createMapFromString('a,abbr,acronym,b,bdi,bdo,big,button,cite,code,del,dfn,em,font,i,ins,kbd,label,mark,math,nobr,object,q,rp,rt,rtc,ruby,s,samp,select,small,span,strike,strong,sub,sup,svg,textarea,time,tt,u,var');\n// non-empty tags that will maintain whitespace within them\nvar inlineTextTags = createMapFromString('a,abbr,acronym,b,big,del,em,font,i,ins,kbd,mark,nobr,rp,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var');\n// self-closing tags that will maintain whitespace around them\nvar selfClosingInlineTags = createMapFromString('comment,img,input,wbr');\n\nfunction collapseWhitespaceSmart(str, prevTag, nextTag, options) {\n  var trimLeft = prevTag && !selfClosingInlineTags(prevTag);\n  if (trimLeft && !options.collapseInlineTagWhitespace) {\n    trimLeft = prevTag.charAt(0) === '/' ? !inlineTags(prevTag.slice(1)) : !inlineTextTags(prevTag);\n  }\n  var trimRight = nextTag && !selfClosingInlineTags(nextTag);\n  if (trimRight && !options.collapseInlineTagWhitespace) {\n    trimRight = nextTag.charAt(0) === '/' ? !inlineTextTags(nextTag.slice(1)) : !inlineTags(nextTag);\n  }\n  return collapseWhitespace(str, options, trimLeft, trimRight, prevTag && nextTag);\n}\n\nfunction isConditionalComment(text) {\n  return /^\\[if\\s[^\\]]+]|\\[endif]$/.test(text);\n}\n\nfunction isIgnoredComment(text, options) {\n  for (var i = 0, len = options.ignoreCustomComments.length; i < len; i++) {\n    if (options.ignoreCustomComments[i].test(text)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isEventAttribute(attrName, options) {\n  var patterns = options.customEventAttributes;\n  if (patterns) {\n    for (var i = patterns.length; i--;) {\n      if (patterns[i].test(attrName)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return /^on[a-z]{3,}$/.test(attrName);\n}\n\nfunction canRemoveAttributeQuotes(value) {\n  // https://mathiasbynens.be/notes/unquoted-attribute-values\n  return /^[^ \\t\\n\\f\\r\"'`=<>]+$/.test(value);\n}\n\nfunction attributesInclude(attributes, attribute) {\n  for (var i = attributes.length; i--;) {\n    if (attributes[i].name.toLowerCase() === attribute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isAttributeRedundant(tag, attrName, attrValue, attrs) {\n  attrValue = attrValue ? trimWhitespace(attrValue.toLowerCase()) : '';\n\n  return (\n    tag === 'script' &&\n    attrName === 'language' &&\n    attrValue === 'javascript' ||\n\n    tag === 'form' &&\n    attrName === 'method' &&\n    attrValue === 'get' ||\n\n    tag === 'input' &&\n    attrName === 'type' &&\n    attrValue === 'text' ||\n\n    tag === 'script' &&\n    attrName === 'charset' &&\n    !attributesInclude(attrs, 'src') ||\n\n    tag === 'a' &&\n    attrName === 'name' &&\n    attributesInclude(attrs, 'id') ||\n\n    tag === 'area' &&\n    attrName === 'shape' &&\n    attrValue === 'rect'\n  );\n}\n\n// https://mathiasbynens.be/demo/javascript-mime-type\n// https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-type\nvar executableScriptsMimetypes = utils.createMap([\n  'text/javascript',\n  'text/ecmascript',\n  'text/jscript',\n  'application/javascript',\n  'application/x-javascript',\n  'application/ecmascript'\n]);\n\nfunction isScriptTypeAttribute(attrValue) {\n  attrValue = trimWhitespace(attrValue.split(/;/, 2)[0]).toLowerCase();\n  return attrValue === '' || executableScriptsMimetypes(attrValue);\n}\n\nfunction isExecutableScript(tag, attrs) {\n  if (tag !== 'script') {\n    return false;\n  }\n  for (var i = 0, len = attrs.length; i < len; i++) {\n    var attrName = attrs[i].name.toLowerCase();\n    if (attrName === 'type') {\n      return isScriptTypeAttribute(attrs[i].value);\n    }\n  }\n  return true;\n}\n\nfunction isStyleLinkTypeAttribute(attrValue) {\n  attrValue = trimWhitespace(attrValue).toLowerCase();\n  return attrValue === '' || attrValue === 'text/css';\n}\n\nfunction isStyleSheet(tag, attrs) {\n  if (tag !== 'style') {\n    return false;\n  }\n  for (var i = 0, len = attrs.length; i < len; i++) {\n    var attrName = attrs[i].name.toLowerCase();\n    if (attrName === 'type') {\n      return isStyleLinkTypeAttribute(attrs[i].value);\n    }\n  }\n  return true;\n}\n\nvar isSimpleBoolean = createMapFromString('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible');\nvar isBooleanValue = createMapFromString('true,false');\n\nfunction isBooleanAttribute(attrName, attrValue) {\n  return isSimpleBoolean(attrName) || attrName === 'draggable' && !isBooleanValue(attrValue);\n}\n\nfunction isUriTypeAttribute(attrName, tag) {\n  return (\n    /^(?:a|area|link|base)$/.test(tag) && attrName === 'href' ||\n    tag === 'img' && /^(?:src|longdesc|usemap)$/.test(attrName) ||\n    tag === 'object' && /^(?:classid|codebase|data|usemap)$/.test(attrName) ||\n    tag === 'q' && attrName === 'cite' ||\n    tag === 'blockquote' && attrName === 'cite' ||\n    (tag === 'ins' || tag === 'del') && attrName === 'cite' ||\n    tag === 'form' && attrName === 'action' ||\n    tag === 'input' && (attrName === 'src' || attrName === 'usemap') ||\n    tag === 'head' && attrName === 'profile' ||\n    tag === 'script' && (attrName === 'src' || attrName === 'for')\n  );\n}\n\nfunction isNumberTypeAttribute(attrName, tag) {\n  return (\n    /^(?:a|area|object|button)$/.test(tag) && attrName === 'tabindex' ||\n    tag === 'input' && (attrName === 'maxlength' || attrName === 'tabindex') ||\n    tag === 'select' && (attrName === 'size' || attrName === 'tabindex') ||\n    tag === 'textarea' && /^(?:rows|cols|tabindex)$/.test(attrName) ||\n    tag === 'colgroup' && attrName === 'span' ||\n    tag === 'col' && attrName === 'span' ||\n    (tag === 'th' || tag === 'td') && (attrName === 'rowspan' || attrName === 'colspan')\n  );\n}\n\nfunction isLinkType(tag, attrs, value) {\n  if (tag !== 'link') {\n    return false;\n  }\n  for (var i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i].name === 'rel' && attrs[i].value === value) {\n      return true;\n    }\n  }\n}\n\nfunction isMediaQuery(tag, attrs, attrName) {\n  return attrName === 'media' && (isLinkType(tag, attrs, 'stylesheet') || isStyleSheet(tag, attrs));\n}\n\nvar srcsetTags = createMapFromString('img,source');\n\nfunction isSrcset(attrName, tag) {\n  return attrName === 'srcset' && srcsetTags(tag);\n}\n\nfunction cleanAttributeValue(tag, attrName, attrValue, options, attrs) {\n  if (isEventAttribute(attrName, options)) {\n    attrValue = trimWhitespace(attrValue).replace(/^javascript:\\s*/i, '');\n    return options.minifyJS(attrValue, true);\n  }\n  else if (attrName === 'class') {\n    attrValue = trimWhitespace(attrValue);\n    if (options.sortClassName) {\n      attrValue = options.sortClassName(attrValue);\n    }\n    else {\n      attrValue = collapseWhitespaceAll(attrValue);\n    }\n    return attrValue;\n  }\n  else if (isUriTypeAttribute(attrName, tag)) {\n    attrValue = trimWhitespace(attrValue);\n    return isLinkType(tag, attrs, 'canonical') ? attrValue : options.minifyURLs(attrValue);\n  }\n  else if (isNumberTypeAttribute(attrName, tag)) {\n    return trimWhitespace(attrValue);\n  }\n  else if (attrName === 'style') {\n    attrValue = trimWhitespace(attrValue);\n    if (attrValue) {\n      if (/;$/.test(attrValue) && !/&#?[0-9a-zA-Z]+;$/.test(attrValue)) {\n        attrValue = attrValue.replace(/\\s*;$/, ';');\n      }\n      attrValue = options.minifyCSS(attrValue, 'inline');\n    }\n    return attrValue;\n  }\n  else if (isSrcset(attrName, tag)) {\n    // https://html.spec.whatwg.org/multipage/embedded-content.html#attr-img-srcset\n    attrValue = trimWhitespace(attrValue).split(/\\s+,\\s*|\\s*,\\s+/).map(function(candidate) {\n      var url = candidate;\n      var descriptor = '';\n      var match = candidate.match(/\\s+([1-9][0-9]*w|[0-9]+(?:\\.[0-9]+)?x)$/);\n      if (match) {\n        url = url.slice(0, -match[0].length);\n        var num = +match[1].slice(0, -1);\n        var suffix = match[1].slice(-1);\n        if (num !== 1 || suffix !== 'x') {\n          descriptor = ' ' + num + suffix;\n        }\n      }\n      return options.minifyURLs(url) + descriptor;\n    }).join(', ');\n  }\n  else if (isMetaViewport(tag, attrs) && attrName === 'content') {\n    attrValue = attrValue.replace(/\\s+/g, '').replace(/[0-9]+\\.[0-9]+/g, function(numString) {\n      // \"0.90000\" -> \"0.9\"\n      // \"1.0\" -> \"1\"\n      // \"1.0001\" -> \"1.0001\" (unchanged)\n      return (+numString).toString();\n    });\n  }\n  else if (isContentSecurityPolicy(tag, attrs) && attrName.toLowerCase() === 'content') {\n    return collapseWhitespaceAll(attrValue);\n  }\n  else if (options.customAttrCollapse && options.customAttrCollapse.test(attrName)) {\n    attrValue = attrValue.replace(/\\n+|\\r+|\\s{2,}/g, '');\n  }\n  else if (tag === 'script' && attrName === 'type') {\n    attrValue = trimWhitespace(attrValue.replace(/\\s*;\\s*/g, ';'));\n  }\n  else if (isMediaQuery(tag, attrs, attrName)) {\n    attrValue = trimWhitespace(attrValue);\n    return options.minifyCSS(attrValue, 'media');\n  }\n  return attrValue;\n}\n\nfunction isMetaViewport(tag, attrs) {\n  if (tag !== 'meta') {\n    return false;\n  }\n  for (var i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i].name === 'name' && attrs[i].value === 'viewport') {\n      return true;\n    }\n  }\n}\n\nfunction isContentSecurityPolicy(tag, attrs) {\n  if (tag !== 'meta') {\n    return false;\n  }\n  for (var i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i].name.toLowerCase() === 'http-equiv' && attrs[i].value.toLowerCase() === 'content-security-policy') {\n      return true;\n    }\n  }\n}\n\nfunction ignoreCSS(id) {\n  return '/* clean-css ignore:start */' + id + '/* clean-css ignore:end */';\n}\n\n// Wrap CSS declarations for CleanCSS > 3.x\n// See https://github.com/jakubpawlowicz/clean-css/issues/418\nfunction wrapCSS(text, type) {\n  switch (type) {\n    case 'inline':\n      return '*{' + text + '}';\n    case 'media':\n      return '@media ' + text + '{a{top:0}}';\n    default:\n      return text;\n  }\n}\n\nfunction unwrapCSS(text, type) {\n  var matches;\n  switch (type) {\n    case 'inline':\n      matches = text.match(/^\\*\\{([\\s\\S]*)\\}$/);\n      break;\n    case 'media':\n      matches = text.match(/^@media ([\\s\\S]*?)\\s*{[\\s\\S]*}$/);\n      break;\n  }\n  return matches ? matches[1] : text;\n}\n\nfunction cleanConditionalComment(comment, options) {\n  return options.processConditionalComments ? comment.replace(/^(\\[if\\s[^\\]]+]>)([\\s\\S]*?)(<!\\[endif])$/, function(match, prefix, text, suffix) {\n    return prefix + minify(text, options, true) + suffix;\n  }) : comment;\n}\n\nfunction processScript(text, options, currentAttrs) {\n  for (var i = 0, len = currentAttrs.length; i < len; i++) {\n    if (currentAttrs[i].name.toLowerCase() === 'type' &&\n        options.processScripts.indexOf(currentAttrs[i].value) > -1) {\n      return minify(text, options);\n    }\n  }\n  return text;\n}\n\n// Tag omission rules from https://html.spec.whatwg.org/multipage/syntax.html#optional-tags\n// with the following deviations:\n// - retain <body> if followed by <noscript>\n// - </rb>, </rt>, </rtc>, </rp> & </tfoot> follow https://www.w3.org/TR/html5/syntax.html#optional-tags\n// - retain all tags which are adjacent to non-standard HTML tags\nvar optionalStartTags = createMapFromString('html,head,body,colgroup,tbody');\nvar optionalEndTags = createMapFromString('html,head,body,li,dt,dd,p,rb,rt,rtc,rp,optgroup,option,colgroup,caption,thead,tbody,tfoot,tr,td,th');\nvar headerTags = createMapFromString('meta,link,script,style,template,noscript');\nvar descriptionTags = createMapFromString('dt,dd');\nvar pBlockTags = createMapFromString('address,article,aside,blockquote,details,div,dl,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,hr,main,menu,nav,ol,p,pre,section,table,ul');\nvar pInlineTags = createMapFromString('a,audio,del,ins,map,noscript,video');\nvar rubyTags = createMapFromString('rb,rt,rtc,rp');\nvar rtcTag = createMapFromString('rb,rtc,rp');\nvar optionTag = createMapFromString('option,optgroup');\nvar tableContentTags = createMapFromString('tbody,tfoot');\nvar tableSectionTags = createMapFromString('thead,tbody,tfoot');\nvar cellTags = createMapFromString('td,th');\nvar topLevelTags = createMapFromString('html,head,body');\nvar compactTags = createMapFromString('html,body');\nvar looseTags = createMapFromString('head,colgroup,caption');\nvar trailingTags = createMapFromString('dt,thead');\nvar htmlTags = createMapFromString('a,abbr,acronym,address,applet,area,article,aside,audio,b,base,basefont,bdi,bdo,bgsound,big,blink,blockquote,body,br,button,canvas,caption,center,cite,code,col,colgroup,command,content,data,datalist,dd,del,details,dfn,dialog,dir,div,dl,dt,element,em,embed,fieldset,figcaption,figure,font,footer,form,frame,frameset,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,i,iframe,image,img,input,ins,isindex,kbd,keygen,label,legend,li,link,listing,main,map,mark,marquee,menu,menuitem,meta,meter,multicol,nav,nobr,noembed,noframes,noscript,object,ol,optgroup,option,output,p,param,picture,plaintext,pre,progress,q,rb,rp,rt,rtc,ruby,s,samp,script,section,select,shadow,small,source,spacer,span,strike,strong,style,sub,summary,sup,table,tbody,td,template,textarea,tfoot,th,thead,time,title,tr,track,tt,u,ul,var,video,wbr,xmp');\n\nfunction canRemoveParentTag(optionalStartTag, tag) {\n  switch (optionalStartTag) {\n    case 'html':\n    case 'head':\n      return true;\n    case 'body':\n      return !headerTags(tag);\n    case 'colgroup':\n      return tag === 'col';\n    case 'tbody':\n      return tag === 'tr';\n  }\n  return false;\n}\n\nfunction isStartTagMandatory(optionalEndTag, tag) {\n  switch (tag) {\n    case 'colgroup':\n      return optionalEndTag === 'colgroup';\n    case 'tbody':\n      return tableSectionTags(optionalEndTag);\n  }\n  return false;\n}\n\nfunction canRemovePrecedingTag(optionalEndTag, tag) {\n  switch (optionalEndTag) {\n    case 'html':\n    case 'head':\n    case 'body':\n    case 'colgroup':\n    case 'caption':\n      return true;\n    case 'li':\n    case 'optgroup':\n    case 'tr':\n      return tag === optionalEndTag;\n    case 'dt':\n    case 'dd':\n      return descriptionTags(tag);\n    case 'p':\n      return pBlockTags(tag);\n    case 'rb':\n    case 'rt':\n    case 'rp':\n      return rubyTags(tag);\n    case 'rtc':\n      return rtcTag(tag);\n    case 'option':\n      return optionTag(tag);\n    case 'thead':\n    case 'tbody':\n      return tableContentTags(tag);\n    case 'tfoot':\n      return tag === 'tbody';\n    case 'td':\n    case 'th':\n      return cellTags(tag);\n  }\n  return false;\n}\n\nvar reEmptyAttribute = new RegExp(\n  '^(?:class|id|style|title|lang|dir|on(?:focus|blur|change|click|dblclick|mouse(' +\n    '?:down|up|over|move|out)|key(?:press|down|up)))$');\n\nfunction canDeleteEmptyAttribute(tag, attrName, attrValue, options) {\n  var isValueEmpty = !attrValue || /^\\s*$/.test(attrValue);\n  if (!isValueEmpty) {\n    return false;\n  }\n  if (typeof options.removeEmptyAttributes === 'function') {\n    return options.removeEmptyAttributes(attrName, tag);\n  }\n  return tag === 'input' && attrName === 'value' || reEmptyAttribute.test(attrName);\n}\n\nfunction hasAttrName(name, attrs) {\n  for (var i = attrs.length - 1; i >= 0; i--) {\n    if (attrs[i].name === name) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction canRemoveElement(tag, attrs) {\n  switch (tag) {\n    case 'textarea':\n      return false;\n    case 'audio':\n    case 'script':\n    case 'video':\n      if (hasAttrName('src', attrs)) {\n        return false;\n      }\n      break;\n    case 'iframe':\n      if (hasAttrName('src', attrs) || hasAttrName('srcdoc', attrs)) {\n        return false;\n      }\n      break;\n    case 'object':\n      if (hasAttrName('data', attrs)) {\n        return false;\n      }\n      break;\n    case 'applet':\n      if (hasAttrName('code', attrs)) {\n        return false;\n      }\n      break;\n  }\n  return true;\n}\n\nfunction canCollapseWhitespace(tag) {\n  return !/^(?:script|style|pre|textarea)$/.test(tag);\n}\n\nfunction canTrimWhitespace(tag) {\n  return !/^(?:pre|textarea)$/.test(tag);\n}\n\nfunction normalizeAttr(attr, attrs, tag, options) {\n  var attrName = options.name(attr.name),\n      attrValue = attr.value;\n\n  if (options.decodeEntities && attrValue) {\n    attrValue = decode(attrValue, { isAttributeValue: true });\n  }\n\n  if (options.removeRedundantAttributes &&\n    isAttributeRedundant(tag, attrName, attrValue, attrs) ||\n    options.removeScriptTypeAttributes && tag === 'script' &&\n    attrName === 'type' && isScriptTypeAttribute(attrValue) ||\n    options.removeStyleLinkTypeAttributes && (tag === 'style' || tag === 'link') &&\n    attrName === 'type' && isStyleLinkTypeAttribute(attrValue)) {\n    return;\n  }\n\n  if (attrValue) {\n    attrValue = cleanAttributeValue(tag, attrName, attrValue, options, attrs);\n  }\n\n  if (options.removeEmptyAttributes &&\n      canDeleteEmptyAttribute(tag, attrName, attrValue, options)) {\n    return;\n  }\n\n  if (options.decodeEntities && attrValue) {\n    attrValue = attrValue.replace(/&(#?[0-9a-zA-Z]+;)/g, '&amp;$1');\n  }\n\n  return {\n    attr: attr,\n    name: attrName,\n    value: attrValue\n  };\n}\n\nfunction buildAttr(normalized, hasUnarySlash, options, isLast, uidAttr) {\n  var attrName = normalized.name,\n      attrValue = normalized.value,\n      attr = normalized.attr,\n      attrQuote = attr.quote,\n      attrFragment,\n      emittedAttrValue;\n\n  if (typeof attrValue !== 'undefined' && (!options.removeAttributeQuotes ||\n      ~attrValue.indexOf(uidAttr) || !canRemoveAttributeQuotes(attrValue))) {\n    if (!options.preventAttributesEscaping) {\n      if (typeof options.quoteCharacter === 'undefined') {\n        var apos = (attrValue.match(/'/g) || []).length;\n        var quot = (attrValue.match(/\"/g) || []).length;\n        attrQuote = apos < quot ? '\\'' : '\"';\n      }\n      else {\n        attrQuote = options.quoteCharacter === '\\'' ? '\\'' : '\"';\n      }\n      if (attrQuote === '\"') {\n        attrValue = attrValue.replace(/\"/g, '&#34;');\n      }\n      else {\n        attrValue = attrValue.replace(/'/g, '&#39;');\n      }\n    }\n    emittedAttrValue = attrQuote + attrValue + attrQuote;\n    if (!isLast && !options.removeTagWhitespace) {\n      emittedAttrValue += ' ';\n    }\n  }\n  // make sure trailing slash is not interpreted as HTML self-closing tag\n  else if (isLast && !hasUnarySlash && !/\\/$/.test(attrValue)) {\n    emittedAttrValue = attrValue;\n  }\n  else {\n    emittedAttrValue = attrValue + ' ';\n  }\n\n  if (typeof attrValue === 'undefined' || options.collapseBooleanAttributes &&\n      isBooleanAttribute(attrName.toLowerCase(), attrValue.toLowerCase())) {\n    attrFragment = attrName;\n    if (!isLast) {\n      attrFragment += ' ';\n    }\n  }\n  else {\n    attrFragment = attrName + attr.customAssign + emittedAttrValue;\n  }\n\n  return attr.customOpen + attrFragment + attr.customClose;\n}\n\nfunction identity(value) {\n  return value;\n}\n\nfunction processOptions(values) {\n  var options = {\n    name: function(name) {\n      return name.toLowerCase();\n    },\n    canCollapseWhitespace: canCollapseWhitespace,\n    canTrimWhitespace: canTrimWhitespace,\n    html5: true,\n    ignoreCustomComments: [/^!/],\n    ignoreCustomFragments: [\n      /<%[\\s\\S]*?%>/,\n      /<\\?[\\s\\S]*?\\?>/\n    ],\n    includeAutoGeneratedTags: true,\n    log: identity,\n    minifyCSS: identity,\n    minifyJS: identity,\n    minifyURLs: identity\n  };\n  Object.keys(values).forEach(function(key) {\n    var value = values[key];\n    if (key === 'caseSensitive') {\n      if (value) {\n        options.name = identity;\n      }\n    }\n    else if (key === 'log') {\n      if (typeof value === 'function') {\n        options.log = value;\n      }\n    }\n    else if (key === 'minifyCSS' && typeof value !== 'function') {\n      if (!value) {\n        return;\n      }\n      if (typeof value !== 'object') {\n        value = {};\n      }\n      options.minifyCSS = function(text, type) {\n        text = text.replace(/(url\\s*\\(\\s*)(\"|'|)(.*?)\\2(\\s*\\))/ig, function(match, prefix, quote, url, suffix) {\n          return prefix + quote + options.minifyURLs(url) + quote + suffix;\n        });\n        var cleanCssOutput = new CleanCSS(value).minify(wrapCSS(text, type));\n        if (cleanCssOutput.errors.length > 0) {\n          cleanCssOutput.errors.forEach(options.log);\n          return text;\n        }\n        return unwrapCSS(cleanCssOutput.styles, type);\n      };\n    }\n    else if (key === 'minifyJS' && typeof value !== 'function') {\n      if (!value) {\n        return;\n      }\n      if (typeof value !== 'object') {\n        value = {};\n      }\n      (value.parse || (value.parse = {})).bare_returns = false;\n      options.minifyJS = function(text, inline) {\n        var start = text.match(/^\\s*<!--.*/);\n        var code = start ? text.slice(start[0].length).replace(/\\n\\s*-->\\s*$/, '') : text;\n        value.parse.bare_returns = inline;\n        var result = UglifyJS.minify(code, value);\n        if (result.error) {\n          options.log(result.error);\n          return text;\n        }\n        return result.code.replace(/;$/, '');\n      };\n    }\n    else if (key === 'minifyURLs' && typeof value !== 'function') {\n      if (!value) {\n        return;\n      }\n      if (typeof value === 'string') {\n        value = { site: value };\n      }\n      else if (typeof value !== 'object') {\n        value = {};\n      }\n      options.minifyURLs = function(text) {\n        try {\n          return RelateUrl.relate(text, value);\n        }\n        catch (err) {\n          options.log(err);\n          return text;\n        }\n      };\n    }\n    else {\n      options[key] = value;\n    }\n  });\n  return options;\n}\n\nfunction uniqueId(value) {\n  var id;\n  do {\n    id = Math.random().toString(36).replace(/^0\\.[0-9]*/, '');\n  } while (~value.indexOf(id));\n  return id;\n}\n\nvar specialContentTags = createMapFromString('script,style');\n\nfunction createSortFns(value, options, uidIgnore, uidAttr) {\n  var attrChains = options.sortAttributes && Object.create(null);\n  var classChain = options.sortClassName && new TokenChain();\n\n  function attrNames(attrs) {\n    return attrs.map(function(attr) {\n      return options.name(attr.name);\n    });\n  }\n\n  function shouldSkipUID(token, uid) {\n    return !uid || token.indexOf(uid) === -1;\n  }\n\n  function shouldSkipUIDs(token) {\n    return shouldSkipUID(token, uidIgnore) && shouldSkipUID(token, uidAttr);\n  }\n\n  function scan(input) {\n    var currentTag, currentType;\n    new HTMLParser(input, {\n      start: function(tag, attrs) {\n        if (attrChains) {\n          if (!attrChains[tag]) {\n            attrChains[tag] = new TokenChain();\n          }\n          attrChains[tag].add(attrNames(attrs).filter(shouldSkipUIDs));\n        }\n        for (var i = 0, len = attrs.length; i < len; i++) {\n          var attr = attrs[i];\n          if (classChain && attr.value && options.name(attr.name) === 'class') {\n            classChain.add(trimWhitespace(attr.value).split(/[ \\t\\n\\f\\r]+/).filter(shouldSkipUIDs));\n          }\n          else if (options.processScripts && attr.name.toLowerCase() === 'type') {\n            currentTag = tag;\n            currentType = attr.value;\n          }\n        }\n      },\n      end: function() {\n        currentTag = '';\n      },\n      chars: function(text) {\n        if (options.processScripts && specialContentTags(currentTag) &&\n            options.processScripts.indexOf(currentType) > -1) {\n          scan(text);\n        }\n      }\n    });\n  }\n\n  var log = options.log;\n  options.log = identity;\n  options.sortAttributes = false;\n  options.sortClassName = false;\n  scan(minify(value, options));\n  options.log = log;\n  if (attrChains) {\n    var attrSorters = Object.create(null);\n    for (var tag in attrChains) {\n      attrSorters[tag] = attrChains[tag].createSorter();\n    }\n    options.sortAttributes = function(tag, attrs) {\n      var sorter = attrSorters[tag];\n      if (sorter) {\n        var attrMap = Object.create(null);\n        var names = attrNames(attrs);\n        names.forEach(function(name, index) {\n          (attrMap[name] || (attrMap[name] = [])).push(attrs[index]);\n        });\n        sorter.sort(names).forEach(function(name, index) {\n          attrs[index] = attrMap[name].shift();\n        });\n      }\n    };\n  }\n  if (classChain) {\n    var sorter = classChain.createSorter();\n    options.sortClassName = function(value) {\n      return sorter.sort(value.split(/[ \\n\\f\\r]+/)).join(' ');\n    };\n  }\n}\n\nfunction minify(value, options, partialMarkup) {\n  if (options.collapseWhitespace) {\n    value = collapseWhitespace(value, options, true, true);\n  }\n\n  var buffer = [],\n      charsPrevTag,\n      currentChars = '',\n      hasChars,\n      currentTag = '',\n      currentAttrs = [],\n      stackNoTrimWhitespace = [],\n      stackNoCollapseWhitespace = [],\n      optionalStartTag = '',\n      optionalEndTag = '',\n      ignoredMarkupChunks = [],\n      ignoredCustomMarkupChunks = [],\n      uidIgnore,\n      uidAttr,\n      uidPattern;\n\n  // temporarily replace ignored chunks with comments,\n  // so that we don't have to worry what's there.\n  // for all we care there might be\n  // completely-horribly-broken-alien-non-html-emoj-cthulhu-filled content\n  value = value.replace(/<!-- htmlmin:ignore -->([\\s\\S]*?)<!-- htmlmin:ignore -->/g, function(match, group1) {\n    if (!uidIgnore) {\n      uidIgnore = uniqueId(value);\n      var pattern = new RegExp('^' + uidIgnore + '([0-9]+)$');\n      if (options.ignoreCustomComments) {\n        options.ignoreCustomComments = options.ignoreCustomComments.slice();\n      }\n      else {\n        options.ignoreCustomComments = [];\n      }\n      options.ignoreCustomComments.push(pattern);\n    }\n    var token = '<!--' + uidIgnore + ignoredMarkupChunks.length + '-->';\n    ignoredMarkupChunks.push(group1);\n    return token;\n  });\n\n  var customFragments = options.ignoreCustomFragments.map(function(re) {\n    return re.source;\n  });\n  if (customFragments.length) {\n    var reCustomIgnore = new RegExp('\\\\s*(?:' + customFragments.join('|') + ')+\\\\s*', 'g');\n    // temporarily replace custom ignored fragments with unique attributes\n    value = value.replace(reCustomIgnore, function(match) {\n      if (!uidAttr) {\n        uidAttr = uniqueId(value);\n        uidPattern = new RegExp('(\\\\s*)' + uidAttr + '([0-9]+)' + uidAttr + '(\\\\s*)', 'g');\n        if (options.minifyCSS) {\n          options.minifyCSS = (function(fn) {\n            return function(text, type) {\n              text = text.replace(uidPattern, function(match, prefix, index) {\n                var chunks = ignoredCustomMarkupChunks[+index];\n                return chunks[1] + uidAttr + index + uidAttr + chunks[2];\n              });\n              var ids = [];\n              new CleanCSS().minify(wrapCSS(text, type)).warnings.forEach(function(warning) {\n                var match = uidPattern.exec(warning);\n                if (match) {\n                  var id = uidAttr + match[2] + uidAttr;\n                  text = text.replace(id, ignoreCSS(id));\n                  ids.push(id);\n                }\n              });\n              text = fn(text, type);\n              ids.forEach(function(id) {\n                text = text.replace(ignoreCSS(id), id);\n              });\n              return text;\n            };\n          })(options.minifyCSS);\n        }\n        if (options.minifyJS) {\n          options.minifyJS = (function(fn) {\n            return function(text, type) {\n              return fn(text.replace(uidPattern, function(match, prefix, index) {\n                var chunks = ignoredCustomMarkupChunks[+index];\n                return chunks[1] + uidAttr + index + uidAttr + chunks[2];\n              }), type);\n            };\n          })(options.minifyJS);\n        }\n      }\n      var token = uidAttr + ignoredCustomMarkupChunks.length + uidAttr;\n      ignoredCustomMarkupChunks.push(/^(\\s*)[\\s\\S]*?(\\s*)$/.exec(match));\n      return '\\t' + token + '\\t';\n    });\n  }\n\n  if (options.sortAttributes && typeof options.sortAttributes !== 'function' ||\n      options.sortClassName && typeof options.sortClassName !== 'function') {\n    createSortFns(value, options, uidIgnore, uidAttr);\n  }\n\n  function _canCollapseWhitespace(tag, attrs) {\n    return options.canCollapseWhitespace(tag, attrs, canCollapseWhitespace);\n  }\n\n  function _canTrimWhitespace(tag, attrs) {\n    return options.canTrimWhitespace(tag, attrs, canTrimWhitespace);\n  }\n\n  function removeStartTag() {\n    var index = buffer.length - 1;\n    while (index > 0 && !/^<[^/!]/.test(buffer[index])) {\n      index--;\n    }\n    buffer.length = Math.max(0, index);\n  }\n\n  function removeEndTag() {\n    var index = buffer.length - 1;\n    while (index > 0 && !/^<\\//.test(buffer[index])) {\n      index--;\n    }\n    buffer.length = Math.max(0, index);\n  }\n\n  // look for trailing whitespaces, bypass any inline tags\n  function trimTrailingWhitespace(index, nextTag) {\n    for (var endTag = null; index >= 0 && _canTrimWhitespace(endTag); index--) {\n      var str = buffer[index];\n      var match = str.match(/^<\\/([\\w:-]+)>$/);\n      if (match) {\n        endTag = match[1];\n      }\n      else if (/>$/.test(str) || (buffer[index] = collapseWhitespaceSmart(str, null, nextTag, options))) {\n        break;\n      }\n    }\n  }\n\n  // look for trailing whitespaces from previously processed text\n  // which may not be trimmed due to a following comment or an empty\n  // element which has now been removed\n  function squashTrailingWhitespace(nextTag) {\n    var charsIndex = buffer.length - 1;\n    if (buffer.length > 1) {\n      var item = buffer[buffer.length - 1];\n      if (/^(?:<!|$)/.test(item) && item.indexOf(uidIgnore) === -1) {\n        charsIndex--;\n      }\n    }\n    trimTrailingWhitespace(charsIndex, nextTag);\n  }\n\n  new HTMLParser(value, {\n    partialMarkup: partialMarkup,\n    continueOnParseError: options.continueOnParseError,\n    customAttrAssign: options.customAttrAssign,\n    customAttrSurround: options.customAttrSurround,\n    html5: options.html5,\n\n    start: function(tag, attrs, unary, unarySlash, autoGenerated) {\n      if (tag.toLowerCase() === 'svg') {\n        options = Object.create(options);\n        options.caseSensitive = true;\n        options.keepClosingSlash = true;\n        options.name = identity;\n      }\n      tag = options.name(tag);\n      currentTag = tag;\n      charsPrevTag = tag;\n      if (!inlineTextTags(tag)) {\n        currentChars = '';\n      }\n      hasChars = false;\n      currentAttrs = attrs;\n\n      var optional = options.removeOptionalTags;\n      if (optional) {\n        var htmlTag = htmlTags(tag);\n        // <html> may be omitted if first thing inside is not comment\n        // <head> may be omitted if first thing inside is an element\n        // <body> may be omitted if first thing inside is not space, comment, <meta>, <link>, <script>, <style> or <template>\n        // <colgroup> may be omitted if first thing inside is <col>\n        // <tbody> may be omitted if first thing inside is <tr>\n        if (htmlTag && canRemoveParentTag(optionalStartTag, tag)) {\n          removeStartTag();\n        }\n        optionalStartTag = '';\n        // end-tag-followed-by-start-tag omission rules\n        if (htmlTag && canRemovePrecedingTag(optionalEndTag, tag)) {\n          removeEndTag();\n          // <colgroup> cannot be omitted if preceding </colgroup> is omitted\n          // <tbody> cannot be omitted if preceding </tbody>, </thead> or </tfoot> is omitted\n          optional = !isStartTagMandatory(optionalEndTag, tag);\n        }\n        optionalEndTag = '';\n      }\n\n      // set whitespace flags for nested tags (eg. <code> within a <pre>)\n      if (options.collapseWhitespace) {\n        if (!stackNoTrimWhitespace.length) {\n          squashTrailingWhitespace(tag);\n        }\n        if (!unary) {\n          if (!_canTrimWhitespace(tag, attrs) || stackNoTrimWhitespace.length) {\n            stackNoTrimWhitespace.push(tag);\n          }\n          if (!_canCollapseWhitespace(tag, attrs) || stackNoCollapseWhitespace.length) {\n            stackNoCollapseWhitespace.push(tag);\n          }\n        }\n      }\n\n      var openTag = '<' + tag;\n      var hasUnarySlash = unarySlash && options.keepClosingSlash;\n\n      buffer.push(openTag);\n\n      if (options.sortAttributes) {\n        options.sortAttributes(tag, attrs);\n      }\n\n      var parts = [];\n      for (var i = attrs.length, isLast = true; --i >= 0;) {\n        var normalized = normalizeAttr(attrs[i], attrs, tag, options);\n        if (normalized) {\n          parts.unshift(buildAttr(normalized, hasUnarySlash, options, isLast, uidAttr));\n          isLast = false;\n        }\n      }\n      if (parts.length > 0) {\n        buffer.push(' ');\n        buffer.push.apply(buffer, parts);\n      }\n      // start tag must never be omitted if it has any attributes\n      else if (optional && optionalStartTags(tag)) {\n        optionalStartTag = tag;\n      }\n\n      buffer.push(buffer.pop() + (hasUnarySlash ? '/' : '') + '>');\n\n      if (autoGenerated && !options.includeAutoGeneratedTags) {\n        removeStartTag();\n        optionalStartTag = '';\n      }\n    },\n    end: function(tag, attrs, autoGenerated) {\n      if (tag.toLowerCase() === 'svg') {\n        options = Object.getPrototypeOf(options);\n      }\n      tag = options.name(tag);\n\n      // check if current tag is in a whitespace stack\n      if (options.collapseWhitespace) {\n        if (stackNoTrimWhitespace.length) {\n          if (tag === stackNoTrimWhitespace[stackNoTrimWhitespace.length - 1]) {\n            stackNoTrimWhitespace.pop();\n          }\n        }\n        else {\n          squashTrailingWhitespace('/' + tag);\n        }\n        if (stackNoCollapseWhitespace.length &&\n          tag === stackNoCollapseWhitespace[stackNoCollapseWhitespace.length - 1]) {\n          stackNoCollapseWhitespace.pop();\n        }\n      }\n\n      var isElementEmpty = false;\n      if (tag === currentTag) {\n        currentTag = '';\n        isElementEmpty = !hasChars;\n      }\n\n      if (options.removeOptionalTags) {\n        // <html>, <head> or <body> may be omitted if the element is empty\n        if (isElementEmpty && topLevelTags(optionalStartTag)) {\n          removeStartTag();\n        }\n        optionalStartTag = '';\n        // </html> or </body> may be omitted if not followed by comment\n        // </head> may be omitted if not followed by space or comment\n        // </p> may be omitted if no more content in non-</a> parent\n        // except for </dt> or </thead>, end tags may be omitted if no more content in parent element\n        if (htmlTags(tag) && optionalEndTag && !trailingTags(optionalEndTag) && (optionalEndTag !== 'p' || !pInlineTags(tag))) {\n          removeEndTag();\n        }\n        optionalEndTag = optionalEndTags(tag) ? tag : '';\n      }\n\n      if (options.removeEmptyElements && isElementEmpty && canRemoveElement(tag, attrs)) {\n        // remove last \"element\" from buffer\n        removeStartTag();\n        optionalStartTag = '';\n        optionalEndTag = '';\n      }\n      else {\n        if (autoGenerated && !options.includeAutoGeneratedTags) {\n          optionalEndTag = '';\n        }\n        else {\n          buffer.push('</' + tag + '>');\n        }\n        charsPrevTag = '/' + tag;\n        if (!inlineTags(tag)) {\n          currentChars = '';\n        }\n        else if (isElementEmpty) {\n          currentChars += '|';\n        }\n      }\n    },\n    chars: function(text, prevTag, nextTag) {\n      prevTag = prevTag === '' ? 'comment' : prevTag;\n      nextTag = nextTag === '' ? 'comment' : nextTag;\n      if (options.decodeEntities && text && !specialContentTags(currentTag)) {\n        text = decode(text);\n      }\n      if (options.collapseWhitespace) {\n        if (!stackNoTrimWhitespace.length) {\n          if (prevTag === 'comment') {\n            var prevComment = buffer[buffer.length - 1];\n            if (prevComment.indexOf(uidIgnore) === -1) {\n              if (!prevComment) {\n                prevTag = charsPrevTag;\n              }\n              if (buffer.length > 1 && (!prevComment || !options.conservativeCollapse && / $/.test(currentChars))) {\n                var charsIndex = buffer.length - 2;\n                buffer[charsIndex] = buffer[charsIndex].replace(/\\s+$/, function(trailingSpaces) {\n                  text = trailingSpaces + text;\n                  return '';\n                });\n              }\n            }\n          }\n          if (prevTag) {\n            if (prevTag === '/nobr' || prevTag === 'wbr') {\n              if (/^\\s/.test(text)) {\n                var tagIndex = buffer.length - 1;\n                while (tagIndex > 0 && buffer[tagIndex].lastIndexOf('<' + prevTag) !== 0) {\n                  tagIndex--;\n                }\n                trimTrailingWhitespace(tagIndex - 1, 'br');\n              }\n            }\n            else if (inlineTextTags(prevTag.charAt(0) === '/' ? prevTag.slice(1) : prevTag)) {\n              text = collapseWhitespace(text, options, /(?:^|\\s)$/.test(currentChars));\n            }\n          }\n          if (prevTag || nextTag) {\n            text = collapseWhitespaceSmart(text, prevTag, nextTag, options);\n          }\n          else {\n            text = collapseWhitespace(text, options, true, true);\n          }\n          if (!text && /\\s$/.test(currentChars) && prevTag && prevTag.charAt(0) === '/') {\n            trimTrailingWhitespace(buffer.length - 1, nextTag);\n          }\n        }\n        if (!stackNoCollapseWhitespace.length && nextTag !== 'html' && !(prevTag && nextTag)) {\n          text = collapseWhitespace(text, options, false, false, true);\n        }\n      }\n      if (options.processScripts && specialContentTags(currentTag)) {\n        text = processScript(text, options, currentAttrs);\n      }\n      if (isExecutableScript(currentTag, currentAttrs)) {\n        text = options.minifyJS(text);\n      }\n      if (isStyleSheet(currentTag, currentAttrs)) {\n        text = options.minifyCSS(text);\n      }\n      if (options.removeOptionalTags && text) {\n        // <html> may be omitted if first thing inside is not comment\n        // <body> may be omitted if first thing inside is not space, comment, <meta>, <link>, <script>, <style> or <template>\n        if (optionalStartTag === 'html' || optionalStartTag === 'body' && !/^\\s/.test(text)) {\n          removeStartTag();\n        }\n        optionalStartTag = '';\n        // </html> or </body> may be omitted if not followed by comment\n        // </head>, </colgroup> or </caption> may be omitted if not followed by space or comment\n        if (compactTags(optionalEndTag) || looseTags(optionalEndTag) && !/^\\s/.test(text)) {\n          removeEndTag();\n        }\n        optionalEndTag = '';\n      }\n      charsPrevTag = /^\\s*$/.test(text) ? prevTag : 'comment';\n      if (options.decodeEntities && text && !specialContentTags(currentTag)) {\n        // Escape any `&` symbols that start either:\n        // 1) a legacy named character reference (i.e. one that doesn't end with `;`)\n        // 2) or any other character reference (i.e. one that does end with `;`)\n        // Note that `&` can be escaped as `&amp`, without the semi-colon.\n        // https://mathiasbynens.be/notes/ambiguous-ampersands\n        text = text.replace(/&((?:Iacute|aacute|uacute|plusmn|Otilde|otilde|agrave|Agrave|Yacute|yacute|Oslash|oslash|atilde|Atilde|brvbar|ccedil|Ccedil|Ograve|curren|divide|eacute|Eacute|ograve|Oacute|egrave|Egrave|Ugrave|frac12|frac14|frac34|ugrave|oacute|iacute|Ntilde|ntilde|Uacute|middot|igrave|Igrave|iquest|Aacute|cedil|laquo|micro|iexcl|Icirc|icirc|acirc|Ucirc|Ecirc|ocirc|Ocirc|ecirc|ucirc|Aring|aring|AElig|aelig|acute|pound|raquo|Acirc|times|THORN|szlig|thorn|COPY|auml|ordf|ordm|Uuml|macr|uuml|Auml|ouml|Ouml|para|nbsp|euml|quot|QUOT|Euml|yuml|cent|sect|copy|sup1|sup2|sup3|iuml|Iuml|ETH|shy|reg|not|yen|amp|AMP|REG|uml|eth|deg|gt|GT|LT|lt)(?!;)|(?:#?[0-9a-zA-Z]+;))/g, '&amp$1').replace(/</g, '&lt;');\n      }\n      if (uidPattern && options.collapseWhitespace && stackNoTrimWhitespace.length) {\n        text = text.replace(uidPattern, function(match, prefix, index) {\n          return ignoredCustomMarkupChunks[+index][0];\n        });\n      }\n      currentChars += text;\n      if (text) {\n        hasChars = true;\n      }\n      buffer.push(text);\n    },\n    comment: function(text, nonStandard) {\n      var prefix = nonStandard ? '<!' : '<!--';\n      var suffix = nonStandard ? '>' : '-->';\n      if (isConditionalComment(text)) {\n        text = prefix + cleanConditionalComment(text, options) + suffix;\n      }\n      else if (options.removeComments) {\n        if (isIgnoredComment(text, options)) {\n          text = '<!--' + text + '-->';\n        }\n        else {\n          text = '';\n        }\n      }\n      else {\n        text = prefix + text + suffix;\n      }\n      if (options.removeOptionalTags && text) {\n        // preceding comments suppress tag omissions\n        optionalStartTag = '';\n        optionalEndTag = '';\n      }\n      buffer.push(text);\n    },\n    doctype: function(doctype) {\n      buffer.push(options.useShortDoctype ? '<!doctype' +\n        (options.removeTagWhitespace ? '' : ' ') + 'html>' :\n        collapseWhitespaceAll(doctype));\n    }\n  });\n\n  if (options.removeOptionalTags) {\n    // <html> may be omitted if first thing inside is not comment\n    // <head> or <body> may be omitted if empty\n    if (topLevelTags(optionalStartTag)) {\n      removeStartTag();\n    }\n    // except for </dt> or </thead>, end tags may be omitted if no more content in parent element\n    if (optionalEndTag && !trailingTags(optionalEndTag)) {\n      removeEndTag();\n    }\n  }\n  if (options.collapseWhitespace) {\n    squashTrailingWhitespace('br');\n  }\n\n  return joinResultSegments(buffer, options, uidPattern ? function(str) {\n    return str.replace(uidPattern, function(match, prefix, index, suffix) {\n      var chunk = ignoredCustomMarkupChunks[+index][0];\n      if (options.collapseWhitespace) {\n        if (prefix !== '\\t') {\n          chunk = prefix + chunk;\n        }\n        if (suffix !== '\\t') {\n          chunk += suffix;\n        }\n        return collapseWhitespace(chunk, {\n          preserveLineBreaks: options.preserveLineBreaks,\n          conservativeCollapse: !options.trimCustomFragments\n        }, /^[ \\n\\r\\t\\f]/.test(chunk), /[ \\n\\r\\t\\f]$/.test(chunk));\n      }\n      return chunk;\n    });\n  } : identity, uidIgnore ? function(str) {\n    return str.replace(new RegExp('<!--' + uidIgnore + '([0-9]+)-->', 'g'), function(match, index) {\n      return ignoredMarkupChunks[+index];\n    });\n  } : identity);\n}\n\nfunction joinResultSegments(results, options, restoreCustom, restoreIgnore) {\n  var str;\n  var maxLineLength = options.maxLineLength;\n  if (maxLineLength) {\n    var line = '', lines = [];\n    while (results.length) {\n      var len = line.length;\n      var end = results[0].indexOf('\\n');\n      if (end < 0) {\n        line += restoreIgnore(restoreCustom(results.shift()));\n      }\n      else {\n        line += restoreIgnore(restoreCustom(results[0].slice(0, end)));\n        results[0] = results[0].slice(end + 1);\n      }\n      if (len > 0 && line.length > maxLineLength) {\n        lines.push(line.slice(0, len));\n        line = line.slice(len);\n      }\n      else if (end >= 0) {\n        lines.push(line);\n        line = '';\n      }\n    }\n    if (line) {\n      lines.push(line);\n    }\n    str = lines.join('\\n');\n  }\n  else {\n    str = restoreIgnore(restoreCustom(results.join('')));\n  }\n  return options.collapseWhitespace ? collapseWhitespace(str, options, true, true) : str;\n}\n\nexports.minify = function(value, options) {\n  var start = Date.now();\n  options = processOptions(options || {});\n  var result = minify(value, options);\n  options.log('minified in: ' + (Date.now() - start) + 'ms');\n  return result;\n};\n","/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n/*\n * // Use like so:\n * HTMLParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * // or to get an XML string:\n * HTMLtoXML(htmlString);\n *\n * // or to get an XML DOM Document\n * HTMLtoDOM(htmlString);\n *\n * // or to inject into an existing document/DOM node\n * HTMLtoDOM(htmlString, document);\n * HTMLtoDOM(htmlString, document.body);\n *\n */\n\n/* global ActiveXObject, DOMDocument */\n\n\n\nvar createMapFromString = require('./utils').createMapFromString;\n\nfunction makeMap(values) {\n  return createMapFromString(values, true);\n}\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/,\n    singleAttrAssigns = [/=/],\n    singleAttrValues = [\n      // attr value double quotes\n      /\"([^\"]*)\"+/.source,\n      // attr value, single quotes\n      /'([^']*)'+/.source,\n      // attr value, no quotes\n      /([^ \\t\\n\\f\\r\"'`=<>]+)/.source\n    ],\n    // https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n    qnameCapture = (function() {\n      // based on https://www.npmjs.com/package/ncname\n      var combiningChar = '\\\\u0300-\\\\u0345\\\\u0360\\\\u0361\\\\u0483-\\\\u0486\\\\u0591-\\\\u05A1\\\\u05A3-\\\\u05B9\\\\u05BB-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u064B-\\\\u0652\\\\u0670\\\\u06D6-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0901-\\\\u0903\\\\u093C\\\\u093E-\\\\u094D\\\\u0951-\\\\u0954\\\\u0962\\\\u0963\\\\u0981-\\\\u0983\\\\u09BC\\\\u09BE-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CD\\\\u09D7\\\\u09E2\\\\u09E3\\\\u0A02\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A70\\\\u0A71\\\\u0A81-\\\\u0A83\\\\u0ABC\\\\u0ABE-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0B01-\\\\u0B03\\\\u0B3C\\\\u0B3E-\\\\u0B43\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B82\\\\u0B83\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD7\\\\u0C01-\\\\u0C03\\\\u0C3E-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C82\\\\u0C83\\\\u0CBE-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0D02\\\\u0D03\\\\u0D3E-\\\\u0D43\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4D\\\\u0D57\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EB9\\\\u0EBB\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E\\\\u0F3F\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F8B\\\\u0F90-\\\\u0F95\\\\u0F97\\\\u0F99-\\\\u0FAD\\\\u0FB1-\\\\u0FB7\\\\u0FB9\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u302A-\\\\u302F\\\\u3099\\\\u309A';\n      var digit = '0-9\\\\u0660-\\\\u0669\\\\u06F0-\\\\u06F9\\\\u0966-\\\\u096F\\\\u09E6-\\\\u09EF\\\\u0A66-\\\\u0A6F\\\\u0AE6-\\\\u0AEF\\\\u0B66-\\\\u0B6F\\\\u0BE7-\\\\u0BEF\\\\u0C66-\\\\u0C6F\\\\u0CE6-\\\\u0CEF\\\\u0D66-\\\\u0D6F\\\\u0E50-\\\\u0E59\\\\u0ED0-\\\\u0ED9\\\\u0F20-\\\\u0F29';\n      var extender = '\\\\xB7\\\\u02D0\\\\u02D1\\\\u0387\\\\u0640\\\\u0E46\\\\u0EC6\\\\u3005\\\\u3031-\\\\u3035\\\\u309D\\\\u309E\\\\u30FC-\\\\u30FE';\n      var letter = 'A-Za-z\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u0131\\\\u0134-\\\\u013E\\\\u0141-\\\\u0148\\\\u014A-\\\\u017E\\\\u0180-\\\\u01C3\\\\u01CD-\\\\u01F0\\\\u01F4\\\\u01F5\\\\u01FA-\\\\u0217\\\\u0250-\\\\u02A8\\\\u02BB-\\\\u02C1\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03CE\\\\u03D0-\\\\u03D6\\\\u03DA\\\\u03DC\\\\u03DE\\\\u03E0\\\\u03E2-\\\\u03F3\\\\u0401-\\\\u040C\\\\u040E-\\\\u044F\\\\u0451-\\\\u045C\\\\u045E-\\\\u0481\\\\u0490-\\\\u04C4\\\\u04C7\\\\u04C8\\\\u04CB\\\\u04CC\\\\u04D0-\\\\u04EB\\\\u04EE-\\\\u04F5\\\\u04F8\\\\u04F9\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0586\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0621-\\\\u063A\\\\u0641-\\\\u064A\\\\u0671-\\\\u06B7\\\\u06BA-\\\\u06BE\\\\u06C0-\\\\u06CE\\\\u06D0-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u0905-\\\\u0939\\\\u093D\\\\u0958-\\\\u0961\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8B\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AE0\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B36-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB5\\\\u0BB7-\\\\u0BB9\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C33\\\\u0C35-\\\\u0C39\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D28\\\\u0D2A-\\\\u0D39\\\\u0D60\\\\u0D61\\\\u0E01-\\\\u0E2E\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E45\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD\\\\u0EAE\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F69\\\\u10A0-\\\\u10C5\\\\u10D0-\\\\u10F6\\\\u1100\\\\u1102\\\\u1103\\\\u1105-\\\\u1107\\\\u1109\\\\u110B\\\\u110C\\\\u110E-\\\\u1112\\\\u113C\\\\u113E\\\\u1140\\\\u114C\\\\u114E\\\\u1150\\\\u1154\\\\u1155\\\\u1159\\\\u115F-\\\\u1161\\\\u1163\\\\u1165\\\\u1167\\\\u1169\\\\u116D\\\\u116E\\\\u1172\\\\u1173\\\\u1175\\\\u119E\\\\u11A8\\\\u11AB\\\\u11AE\\\\u11AF\\\\u11B7\\\\u11B8\\\\u11BA\\\\u11BC-\\\\u11C2\\\\u11EB\\\\u11F0\\\\u11F9\\\\u1E00-\\\\u1E9B\\\\u1EA0-\\\\u1EF9\\\\u1F00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2126\\\\u212A\\\\u212B\\\\u212E\\\\u2180-\\\\u2182\\\\u3007\\\\u3021-\\\\u3029\\\\u3041-\\\\u3094\\\\u30A1-\\\\u30FA\\\\u3105-\\\\u312C\\\\u4E00-\\\\u9FA5\\\\uAC00-\\\\uD7A3';\n      var ncname = '[' + letter + '_][' + letter + digit + '\\\\.\\\\-_' + combiningChar + extender + ']*';\n      return '((?:' + ncname + '\\\\:)?' + ncname + ')';\n    })(),\n    startTagOpen = new RegExp('^<' + qnameCapture),\n    startTagClose = /^\\s*(\\/?)>/,\n    endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>'),\n    doctype = /^<!DOCTYPE\\s?[^>]+>/i;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function(m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Empty Elements\nvar empty = makeMap('area,base,basefont,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr');\n\n// Inline Elements\nvar inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,noscript,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,svg,textarea,tt,u,var');\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar closeSelf = makeMap('colgroup,dd,dt,li,option,p,td,tfoot,th,thead,tr,source');\n\n// Attributes that have their values filled in disabled='disabled'\nvar fillAttrs = makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');\n\n// Special Elements (can contain anything)\nvar special = makeMap('script,style');\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar nonPhrasing = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,ol,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track,ul');\n\nvar reCache = {};\n\nfunction attrForHandler(handler) {\n  var pattern = singleAttrIdentifier.source +\n                '(?:\\\\s*(' + joinSingleAttrAssigns(handler) + ')' +\n                '[ \\\\t\\\\n\\\\f\\\\r]*(?:' + singleAttrValues.join('|') + '))?';\n  if (handler.customAttrSurround) {\n    var attrClauses = [];\n    for (var i = handler.customAttrSurround.length - 1; i >= 0; i--) {\n      attrClauses[i] = '(?:' +\n                       '(' + handler.customAttrSurround[i][0].source + ')\\\\s*' +\n                       pattern +\n                       '\\\\s*(' + handler.customAttrSurround[i][1].source + ')' +\n                       ')';\n    }\n    attrClauses.push('(?:' + pattern + ')');\n    pattern = '(?:' + attrClauses.join('|') + ')';\n  }\n  return new RegExp('^\\\\s*' + pattern);\n}\n\nfunction joinSingleAttrAssigns(handler) {\n  return singleAttrAssigns.concat(\n    handler.customAttrAssign || []\n  ).map(function(assign) {\n    return '(?:' + assign.source + ')';\n  }).join('|');\n}\n\nfunction HTMLParser(html, handler) {\n  var stack = [], lastTag;\n  var attribute = attrForHandler(handler);\n  var last, prevTag, nextTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a script or style element\n    if (!lastTag || !special(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (/^<!--/.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (handler.comment) {\n              handler.comment(html.substring(4, commentEnd));\n            }\n            html = html.substring(commentEnd + 3);\n            prevTag = '';\n            continue;\n          }\n        }\n\n        // https://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (/^<!\\[/.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            if (handler.comment) {\n              handler.comment(html.substring(2, conditionalEnd + 1), true /* non-standard */);\n            }\n            html = html.substring(conditionalEnd + 2);\n            prevTag = '';\n            continue;\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          if (handler.doctype) {\n            handler.doctype(doctypeMatch[0]);\n          }\n          html = html.substring(doctypeMatch[0].length);\n          prevTag = '';\n          continue;\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          html = html.substring(endTagMatch[0].length);\n          endTagMatch[0].replace(endTag, parseEndTag);\n          prevTag = '/' + endTagMatch[1].toLowerCase();\n          continue;\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag(html);\n        if (startTagMatch) {\n          html = startTagMatch.rest;\n          handleStartTag(startTagMatch);\n          prevTag = startTagMatch.tagName.toLowerCase();\n          continue;\n        }\n\n        // Treat `<` as text\n        if (handler.continueOnParseError) {\n          textEnd = html.indexOf('<', 1);\n        }\n      }\n\n      var text;\n      if (textEnd >= 0) {\n        text = html.substring(0, textEnd);\n        html = html.substring(textEnd);\n      }\n      else {\n        text = html;\n        html = '';\n      }\n\n      // next tag\n      var nextTagMatch = parseStartTag(html);\n      if (nextTagMatch) {\n        nextTag = nextTagMatch.tagName;\n      }\n      else {\n        nextTagMatch = html.match(endTag);\n        if (nextTagMatch) {\n          nextTag = '/' + nextTagMatch[1];\n        }\n        else {\n          nextTag = '';\n        }\n      }\n\n      if (handler.chars) {\n        handler.chars(text, prevTag, nextTag);\n      }\n      prevTag = '';\n    }\n    else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)</' + stackedTag + '[^>]*>', 'i'));\n\n      html = html.replace(reStackedTag, function(all, text) {\n        if (stackedTag !== 'script' && stackedTag !== 'style' && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n\n        if (handler.chars) {\n          handler.chars(text);\n        }\n\n        return '';\n      });\n\n      parseEndTag('</' + stackedTag + '>', stackedTag);\n    }\n\n    if (html === last) {\n      throw new Error('Parse Error: ' + html);\n    }\n  }\n\n  if (!handler.partialMarkup) {\n    // Clean up any remaining tags\n    parseEndTag();\n  }\n\n  function parseStartTag(input) {\n    var start = input.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: []\n      };\n      input = input.slice(start[0].length);\n      var end, attr;\n      while (!(end = input.match(startTagClose)) && (attr = input.match(attribute))) {\n        input = input.slice(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        match.rest = input.slice(end[0].length);\n        return match;\n      }\n    }\n  }\n\n  function closeIfFound(tagName) {\n    if (findTag(tagName) >= 0) {\n      parseEndTag('', tagName);\n      return true;\n    }\n  }\n\n  function handleStartTag(match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (handler.html5) {\n      if (lastTag === 'p' && nonPhrasing(tagName)) {\n        parseEndTag('', lastTag);\n      }\n      else if (tagName === 'tbody') {\n        closeIfFound('thead');\n      }\n      else if (tagName === 'tfoot') {\n        if (!closeIfFound('tbody')) {\n          closeIfFound('thead');\n        }\n      }\n      if (tagName === 'col' && findTag('colgroup') < 0) {\n        lastTag = 'colgroup';\n        stack.push({ tag: lastTag, attrs: [] });\n        if (handler.start) {\n          handler.start(lastTag, [], false, '');\n        }\n      }\n    }\n\n    if (!handler.html5 && !inline(tagName)) {\n      while (lastTag && inline(lastTag)) {\n        parseEndTag('', lastTag);\n      }\n    }\n\n    if (closeSelf(tagName) && lastTag === tagName) {\n      parseEndTag('', tagName);\n    }\n\n    var unary = empty(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var attrs = match.attrs.map(function(args) {\n      var name, value, customOpen, customClose, customAssign, quote;\n      var ncp = 7; // number of captured parts, scalar\n\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n\n      function populate(index) {\n        customAssign = args[index];\n        value = args[index + 1];\n        if (typeof value !== 'undefined') {\n          return '\"';\n        }\n        value = args[index + 2];\n        if (typeof value !== 'undefined') {\n          return '\\'';\n        }\n        value = args[index + 3];\n        if (typeof value === 'undefined' && fillAttrs(name)) {\n          value = name;\n        }\n        return '';\n      }\n\n      var j = 1;\n      if (handler.customAttrSurround) {\n        for (var i = 0, l = handler.customAttrSurround.length; i < l; i++, j += ncp) {\n          name = args[j + 1];\n          if (name) {\n            quote = populate(j + 2);\n            customOpen = args[j];\n            customClose = args[j + 6];\n            break;\n          }\n        }\n      }\n\n      if (!name && (name = args[j])) {\n        quote = populate(j + 1);\n      }\n\n      return {\n        name: name,\n        value: value,\n        customAssign: customAssign || '=',\n        customOpen: customOpen || '',\n        customClose: customClose || '',\n        quote: quote || ''\n      };\n    });\n\n    if (!unary) {\n      stack.push({ tag: tagName, attrs: attrs });\n      lastTag = tagName;\n      unarySlash = '';\n    }\n\n    if (handler.start) {\n      handler.start(tagName, attrs, unary, unarySlash);\n    }\n  }\n\n  function findTag(tagName) {\n    var pos;\n    var needle = tagName.toLowerCase();\n    for (pos = stack.length - 1; pos >= 0; pos--) {\n      if (stack[pos].tag.toLowerCase() === needle) {\n        break;\n      }\n    }\n    return pos;\n  }\n\n  function parseEndTag(tag, tagName) {\n    var pos;\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      pos = findTag(tagName);\n    }\n    // If no tag name is provided, clean shop\n    else {\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (handler.end) {\n          handler.end(stack[i].tag, stack[i].attrs, i > pos || !tag);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    }\n    else if (tagName.toLowerCase() === 'br') {\n      if (handler.start) {\n        handler.start(tagName, [], true, '');\n      }\n    }\n    else if (tagName.toLowerCase() === 'p') {\n      if (handler.start) {\n        handler.start(tagName, [], false, '', true);\n      }\n      if (handler.end) {\n        handler.end(tagName, []);\n      }\n    }\n  }\n}\n\nexports.HTMLParser = HTMLParser;\nexports.HTMLtoXML = function(html) {\n  var results = '';\n\n  new HTMLParser(html, {\n    start: function(tag, attrs, unary) {\n      results += '<' + tag;\n\n      for (var i = 0, len = attrs.length; i < len; i++) {\n        results += ' ' + attrs[i].name + '=\"' + (attrs[i].value || '').replace(/\"/g, '&#34;') + '\"';\n      }\n\n      results += (unary ? '/' : '') + '>';\n    },\n    end: function(tag) {\n      results += '</' + tag + '>';\n    },\n    chars: function(text) {\n      results += text;\n    },\n    comment: function(text) {\n      results += '<!--' + text + '-->';\n    },\n    ignore: function(text) {\n      results += text;\n    }\n  });\n\n  return results;\n};\n\nexports.HTMLtoDOM = function(html, doc) {\n  // There can be only one of these elements\n  var one = {\n    html: true,\n    head: true,\n    body: true,\n    title: true\n  };\n\n  // Enforce a structure for the document\n  var structure = {\n    link: 'head',\n    base: 'head'\n  };\n\n  if (doc) {\n    doc = doc.ownerDocument || doc.getOwnerDocument && doc.getOwnerDocument() || doc;\n  }\n  else if (typeof DOMDocument !== 'undefined') {\n    doc = new DOMDocument();\n  }\n  else if (typeof document !== 'undefined' && document.implementation && document.implementation.createDocument) {\n    doc = document.implementation.createDocument('', '', null);\n  }\n  else if (typeof ActiveX !== 'undefined') {\n    doc = new ActiveXObject('Msxml.DOMDocument');\n  }\n\n  var elems = [],\n      documentElement = doc.documentElement ||\n        doc.getDocumentElement && doc.getDocumentElement();\n\n  // If we're dealing with an empty document then we\n  // need to pre-populate it with the HTML document structure\n  if (!documentElement && doc.createElement) {\n    (function() {\n      var html = doc.createElement('html');\n      var head = doc.createElement('head');\n      head.appendChild(doc.createElement('title'));\n      html.appendChild(head);\n      html.appendChild(doc.createElement('body'));\n      doc.appendChild(html);\n    })();\n  }\n\n  // Find all the unique elements\n  if (doc.getElementsByTagName) {\n    for (var i in one) {\n      one[i] = doc.getElementsByTagName(i)[0];\n    }\n  }\n\n  // If we're working with a document, inject contents into\n  // the body element\n  var curParentNode = one.body;\n\n  new HTMLParser(html, {\n    start: function(tagName, attrs, unary) {\n      // If it's a pre-built element, then we can ignore\n      // its construction\n      if (one[tagName]) {\n        curParentNode = one[tagName];\n        return;\n      }\n\n      var elem = doc.createElement(tagName);\n\n      for (var attr in attrs) {\n        elem.setAttribute(attrs[attr].name, attrs[attr].value);\n      }\n\n      if (structure[tagName] && typeof one[structure[tagName]] !== 'boolean') {\n        one[structure[tagName]].appendChild(elem);\n      }\n      else if (curParentNode && curParentNode.appendChild) {\n        curParentNode.appendChild(elem);\n      }\n\n      if (!unary) {\n        elems.push(elem);\n        curParentNode = elem;\n      }\n    },\n    end: function(/* tag */) {\n      elems.length -= 1;\n\n      // Init the new parentNode\n      curParentNode = elems[elems.length - 1];\n    },\n    chars: function(text) {\n      curParentNode.appendChild(doc.createTextNode(text));\n    },\n    comment: function(/* text */) {\n      // create comment node\n    },\n    ignore: function(/* text */) {\n      // What to do here?\n    }\n  });\n\n  return doc;\n};\n","\n\nfunction createMap(values, ignoreCase) {\n  var map = {};\n  values.forEach(function(value) {\n    map[value] = 1;\n  });\n  return ignoreCase ? function(value) {\n    return map[value.toLowerCase()] === 1;\n  } : function(value) {\n    return map[value] === 1;\n  };\n}\n\nexports.createMap = createMap;\nexports.createMapFromString = function(values, ignoreCase) {\n  return createMap(values.split(/,/), ignoreCase);\n};\n","\n\nfunction Sorter() {\n}\n\nSorter.prototype.sort = function(tokens, fromIndex) {\n  fromIndex = fromIndex || 0;\n  for (var i = 0, len = this.keys.length; i < len; i++) {\n    var key = this.keys[i];\n    var token = key.slice(1);\n    var index = tokens.indexOf(token, fromIndex);\n    if (index !== -1) {\n      do {\n        if (index !== fromIndex) {\n          tokens.splice(index, 1);\n          tokens.splice(fromIndex, 0, token);\n        }\n        fromIndex++;\n      } while ((index = tokens.indexOf(token, fromIndex)) !== -1);\n      return this[key].sort(tokens, fromIndex);\n    }\n  }\n  return tokens;\n};\n\nfunction TokenChain() {\n}\n\nTokenChain.prototype = {\n  add: function(tokens) {\n    var self = this;\n    tokens.forEach(function(token) {\n      var key = '$' + token;\n      if (!self[key]) {\n        self[key] = [];\n        self[key].processed = 0;\n      }\n      self[key].push(tokens);\n    });\n  },\n  createSorter: function() {\n    var self = this;\n    var sorter = new Sorter();\n    sorter.keys = Object.keys(self).sort(function(j, k) {\n      var m = self[j].length;\n      var n = self[k].length;\n      return m < n ? 1 : m > n ? -1 : j < k ? -1 : j > k ? 1 : 0;\n    }).filter(function(key) {\n      if (self[key].processed < self[key].length) {\n        var token = key.slice(1);\n        var chain = new TokenChain();\n        self[key].forEach(function(tokens) {\n          var index;\n          while ((index = tokens.indexOf(token)) !== -1) {\n            tokens.splice(index, 1);\n          }\n          tokens.forEach(function(token) {\n            self['$' + token].processed++;\n          });\n          chain.add(tokens.slice(0));\n        });\n        sorter[key] = chain.createSorter();\n        return true;\n      }\n      return false;\n    });\n    return sorter;\n  }\n};\n\nmodule.exports = TokenChain;\n"]}