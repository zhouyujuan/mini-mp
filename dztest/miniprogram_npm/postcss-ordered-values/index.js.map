{"version":3,"sources":["index.js","rules/animation.js","lib/addSpace.js","lib/getValue.js","rules/border.js","rules/boxShadow.js","rules/flexFlow.js","rules/transition.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA,AGTA;AJaA,AENA,ACHA,AFMA,AGTA;AJaA,AENA,ACHA,AFMA,AGTA;AJaA,AENA,ACHA,AFMA,AGTA,ACHA;ALgBA,AGTA,AFMA,AGTA,ACHA;ALgBA,AGTA,AFMA,AGTA,ACHA;ALgBA,AGTA,AFMA,AGTA,ACHA,ACHA;ANmBA,AGTA,AFMA,AGTA,ACHA,ACHA;ANmBA,AGTA,AFMA,AGTA,ACHA,ACHA;ANmBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,AGTA,AFMA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,ACHA,ACHA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AGTA,ACHA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AIZA,AENA;APsBA,ACHA,AMlBA;APsBA,ACHA,AMlBA;APsBA,ACHA,AMlBA;APsBA,ACHA,AMlBA;APsBA,ACHA,AMlBA;APsBA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _animation = require('./rules/animation');\n\nvar _animation2 = _interopRequireDefault(_animation);\n\nvar _border = require('./rules/border');\n\nvar _border2 = _interopRequireDefault(_border);\n\nvar _boxShadow = require('./rules/boxShadow');\n\nvar _boxShadow2 = _interopRequireDefault(_boxShadow);\n\nvar _flexFlow = require('./rules/flexFlow');\n\nvar _flexFlow2 = _interopRequireDefault(_flexFlow);\n\nvar _transition = require('./rules/transition');\n\nvar _transition2 = _interopRequireDefault(_transition);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable quote-props */\n\nconst rules = {\n    'animation': _animation2.default,\n    '-webkit-animation': _animation2.default,\n    'border': _border2.default,\n    'border-top': _border2.default,\n    'border-right': _border2.default,\n    'border-bottom': _border2.default,\n    'border-left': _border2.default,\n    'outline': _border2.default,\n    'box-shadow': _boxShadow2.default,\n    'flex-flow': _flexFlow2.default,\n    'transition': _transition2.default,\n    '-webkit-transition': _transition2.default\n};\n\n/* eslint-enable */\n\n// rules\nfunction shouldAbort(parsed) {\n    let abort = false;\n\n    parsed.walk(({ type, value }) => {\n        if (type === 'comment' || type === 'function' && value.toLowerCase() === 'var' || type === 'word' && ~value.indexOf(`___CSS_LOADER_IMPORT___`)) {\n            abort = true;\n\n            return false;\n        }\n    });\n\n    return abort;\n}\n\nfunction getValue(decl) {\n    let { value, raws } = decl;\n\n    if (raws && raws.value && raws.value.raw) {\n        value = raws.value.raw;\n    }\n\n    return value;\n}\n\nexports.default = _postcss2.default.plugin('postcss-ordered-values', () => {\n    return css => {\n        const cache = {};\n\n        css.walkDecls(decl => {\n            const lowerCasedProp = decl.prop.toLowerCase();\n            const processor = rules[lowerCasedProp];\n\n            if (!processor) {\n                return;\n            }\n\n            const value = getValue(decl);\n\n            if (cache[value]) {\n                decl.value = cache[value];\n\n                return;\n            }\n\n            const parsed = (0, _postcssValueParser2.default)(value);\n\n            if (parsed.nodes.length < 2 || shouldAbort(parsed)) {\n                cache[value] = value;\n\n                return;\n            }\n\n            const result = processor(parsed);\n\n            decl.value = result;\n            cache[value] = result;\n        });\n    };\n});\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = normalizeAnimation;\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nvar _addSpace = require('../lib/addSpace');\n\nvar _addSpace2 = _interopRequireDefault(_addSpace);\n\nvar _getValue = require('../lib/getValue');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// animation: [ none | <keyframes-name> ] || <time> || <single-timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state>\n\nconst isTimingFunction = (value, type) => {\n    const functions = ['steps', 'cubic-bezier', 'frames'];\n    const keywords = ['ease', 'ease-in', 'ease-in-out', 'ease-out', 'linear', 'step-end', 'step-start'];\n\n    return type === 'function' && functions.includes(value) || keywords.includes(value);\n};\n\nconst isDirection = value => {\n    return ['normal', 'reverse', 'alternate', 'alternate-reverse'].includes(value);\n};\n\nconst isFillMode = value => {\n    return ['none', 'forwards', 'backwards', 'both'].includes(value);\n};\n\nconst isPlayState = value => {\n    return ['running', 'paused'].includes(value);\n};\n\nconst isTime = value => {\n    const quantity = (0, _postcssValueParser.unit)(value);\n\n    return quantity && ['ms', 's'].includes(quantity.unit);\n};\n\nconst isIterationCount = value => {\n    const quantity = (0, _postcssValueParser.unit)(value);\n\n    return value === 'infinite' || quantity && !quantity.unit;\n};\n\nfunction normalizeAnimation(parsed) {\n    const args = (0, _cssnanoUtilGetArguments2.default)(parsed);\n\n    const values = args.reduce((list, arg) => {\n        const state = {\n            name: [],\n            duration: [],\n            timingFunction: [],\n            delay: [],\n            iterationCount: [],\n            direction: [],\n            fillMode: [],\n            playState: []\n        };\n        const stateConditions = [{ property: 'duration', delegate: isTime }, { property: 'timingFunction', delegate: isTimingFunction }, { property: 'delay', delegate: isTime }, { property: 'iterationCount', delegate: isIterationCount }, { property: 'direction', delegate: isDirection }, { property: 'fillMode', delegate: isFillMode }, { property: 'playState', delegate: isPlayState }];\n\n        arg.forEach(node => {\n            let { type, value } = node;\n\n            if (type === 'space') {\n                return;\n            }\n\n            value = value.toLowerCase();\n\n            const hasMatch = stateConditions.some(({ property, delegate }) => {\n                if (delegate(value, type) && !state[property].length) {\n                    state[property] = [node, (0, _addSpace2.default)()];\n                    return true;\n                }\n            });\n\n            if (!hasMatch) {\n                state.name = [...state.name, node, (0, _addSpace2.default)()];\n            }\n        });\n        return [...list, [...state.name, ...state.duration, ...state.timingFunction, ...state.delay, ...state.iterationCount, ...state.direction, ...state.fillMode, ...state.playState]];\n    }, []);\n\n    return (0, _getValue2.default)(values);\n};\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = addSpace;\nfunction addSpace() {\n    return { type: 'space', value: ' ' };\n}\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = getValue;\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nfunction getValue(values) {\n    return (0, _postcssValueParser.stringify)({\n        nodes: values.reduce((nodes, arg, index) => {\n            arg.forEach((val, idx) => {\n                if (idx === arg.length - 1 && index === values.length - 1 && val.type === 'space') {\n                    return;\n                }\n                nodes.push(val);\n            });\n\n            if (index !== values.length - 1) {\n                nodes[nodes.length - 1].type = 'div';\n                nodes[nodes.length - 1].value = ',';\n            }\n\n            return nodes;\n        }, [])\n    });\n}\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = normalizeBorder;\n\nvar _postcssValueParser = require('postcss-value-parser');\n\n// border: <line-width> || <line-style> || <color>\n// outline: <outline-color> || <outline-style> || <outline-width>\n\nconst borderWidths = ['thin', 'medium', 'thick'];\n\nconst borderStyles = ['none', 'auto', // only in outline-style\n'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];\n\nfunction normalizeBorder(border) {\n    const order = { width: '', style: '', color: '' };\n\n    border.walk(node => {\n        const { type, value } = node;\n        if (type === 'word') {\n            if (~borderStyles.indexOf(value.toLowerCase())) {\n                order.style = value;\n                return false;\n            }\n            if (~borderWidths.indexOf(value.toLowerCase()) || (0, _postcssValueParser.unit)(value.toLowerCase())) {\n                if (order.width !== '') {\n                    order.width = `${order.width} ${value}`;\n                    return false;\n                }\n                order.width = value;\n                return false;\n            }\n            order.color = value;\n            return false;\n        }\n        if (type === 'function') {\n            if (value.toLowerCase() === 'calc') {\n                order.width = (0, _postcssValueParser.stringify)(node);\n            } else {\n                order.color = (0, _postcssValueParser.stringify)(node);\n            }\n            return false;\n        }\n    });\n\n    return `${order.width} ${order.style} ${order.color}`.trim();\n};\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = normalizeBoxShadow;\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nvar _addSpace = require('../lib/addSpace');\n\nvar _addSpace2 = _interopRequireDefault(_addSpace);\n\nvar _getValue = require('../lib/getValue');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// box-shadow: inset? && <length>{2,4} && <color>?\n\nfunction normalizeBoxShadow(parsed) {\n    let args = (0, _cssnanoUtilGetArguments2.default)(parsed);\n    let abort = false;\n\n    let values = args.reduce((list, arg) => {\n        let val = [];\n        let state = {\n            inset: [],\n            color: []\n        };\n\n        arg.forEach(node => {\n            const { type, value } = node;\n\n            if (type === 'function' && ~value.toLowerCase().indexOf('calc')) {\n                abort = true;\n                return;\n            }\n\n            if (type === 'space') {\n                return;\n            }\n\n            if ((0, _postcssValueParser.unit)(value)) {\n                val = [...val, node, (0, _addSpace2.default)()];\n            } else if (value.toLowerCase() === 'inset') {\n                state.inset = [...state.inset, node, (0, _addSpace2.default)()];\n            } else {\n                state.color = [...state.color, node, (0, _addSpace2.default)()];\n            }\n        });\n\n        return [...list, [...state.inset, ...val, ...state.color]];\n    }, []);\n\n    if (abort) {\n        return parsed.toString();\n    }\n\n    return (0, _getValue2.default)(values);\n}\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = normalizeFlexFlow;\n// flex-flow: <flex-direction> || <flex-wrap>\n\nconst flexDirection = ['row', 'row-reverse', 'column', 'column-reverse'];\n\nconst flexWrap = ['nowrap', 'wrap', 'wrap-reverse'];\n\nfunction normalizeFlexFlow(flexFlow) {\n    let order = {\n        direction: '',\n        wrap: ''\n    };\n\n    flexFlow.walk(({ value }) => {\n        if (~flexDirection.indexOf(value.toLowerCase())) {\n            order.direction = value;\n            return;\n        }\n\n        if (~flexWrap.indexOf(value.toLowerCase())) {\n            order.wrap = value;\n\n            return;\n        }\n    });\n\n    return `${order.direction} ${order.wrap}`.trim();\n};\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = normalizeTransition;\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nvar _addSpace = require('../lib/addSpace');\n\nvar _addSpace2 = _interopRequireDefault(_addSpace);\n\nvar _getValue = require('../lib/getValue');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// transition: [ none | <single-transition-property> ] || <time> || <single-transition-timing-function> || <time>\n\nconst timingFunctions = ['ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end'];\n\nfunction normalizeTransition(parsed) {\n    let args = (0, _cssnanoUtilGetArguments2.default)(parsed);\n\n    let values = args.reduce((list, arg) => {\n        let state = {\n            timingFunction: [],\n            property: [],\n            time1: [],\n            time2: []\n        };\n\n        arg.forEach(node => {\n            const { type, value } = node;\n\n            if (type === 'space') {\n                return;\n            }\n\n            if (type === 'function' && ~['steps', 'cubic-bezier'].indexOf(value.toLowerCase())) {\n                state.timingFunction = [...state.timingFunction, node, (0, _addSpace2.default)()];\n            } else if ((0, _postcssValueParser.unit)(value)) {\n                if (!state.time1.length) {\n                    state.time1 = [...state.time1, node, (0, _addSpace2.default)()];\n                } else {\n                    state.time2 = [...state.time2, node, (0, _addSpace2.default)()];\n                }\n            } else if (~timingFunctions.indexOf(value.toLowerCase())) {\n                state.timingFunction = [...state.timingFunction, node, (0, _addSpace2.default)()];\n            } else {\n                state.property = [...state.property, node, (0, _addSpace2.default)()];\n            }\n        });\n\n        return [...list, [...state.property, ...state.time1, ...state.timingFunction, ...state.time2]];\n    }, []);\n\n    return (0, _getValue2.default)(values);\n}\nmodule.exports = exports['default'];"]}