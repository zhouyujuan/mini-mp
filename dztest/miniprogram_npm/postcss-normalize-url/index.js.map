{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _normalizeUrl = require('normalize-url');\n\nvar _normalizeUrl2 = _interopRequireDefault(_normalizeUrl);\n\nvar _isAbsoluteUrl = require('is-absolute-url');\n\nvar _isAbsoluteUrl2 = _interopRequireDefault(_isAbsoluteUrl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst multiline = /\\\\[\\r\\n]/;\nconst escapeChars = /([\\s\\(\\)\"'])/g;\n\nfunction convert(url, options) {\n    if ((0, _isAbsoluteUrl2.default)(url) || url.startsWith('//')) {\n        let normalizedURL = null;\n\n        try {\n            normalizedURL = (0, _normalizeUrl2.default)(url, options);\n        } catch (e) {\n            normalizedURL = url;\n        }\n\n        return normalizedURL;\n    }\n\n    // `path.normalize` always returns backslashes on Windows, need replace in `/`\n    return _path2.default.normalize(url).replace(new RegExp('\\\\' + _path2.default.sep, 'g'), '/');\n}\n\nfunction transformNamespace(rule) {\n    rule.params = (0, _postcssValueParser2.default)(rule.params).walk(node => {\n        if (node.type === 'function' && node.value.toLowerCase() === 'url' && node.nodes.length) {\n            node.type = 'string';\n            node.quote = node.nodes[0].quote || '\"';\n            node.value = node.nodes[0].value;\n        }\n        if (node.type === 'string') {\n            node.value = node.value.trim();\n        }\n        return false;\n    }).toString();\n}\n\nfunction transformDecl(decl, opts) {\n    decl.value = (0, _postcssValueParser2.default)(decl.value).walk(node => {\n        if (node.type !== 'function' || node.value.toLowerCase() !== 'url' || !node.nodes.length) {\n            return false;\n        }\n\n        let url = node.nodes[0];\n        let escaped;\n\n        node.before = node.after = '';\n        url.value = url.value.trim().replace(multiline, '');\n\n        // Skip empty URLs\n        // Empty URL function equals request to current stylesheet where it is declared\n        if (url.value.length === 0) {\n            url.quote = '';\n\n            return false;\n        }\n\n        if (/^data:(.*)?,/i.test(url.value)) {\n            return false;\n        }\n\n        if (!/^.+-extension:\\//i.test(url.value)) {\n            url.value = convert(url.value, opts);\n        }\n\n        if (escapeChars.test(url.value) && url.type === 'string') {\n            escaped = url.value.replace(escapeChars, '\\\\$1');\n            if (escaped.length < url.value.length + 2) {\n                url.value = escaped;\n                url.type = 'word';\n            }\n        } else {\n            url.type = 'word';\n        }\n\n        return false;\n    }).toString();\n}\n\nexports.default = _postcss2.default.plugin('postcss-normalize-url', opts => {\n    opts = Object.assign({}, {\n        normalizeProtocol: false,\n        stripFragment: false,\n        stripWWW: false\n    }, opts);\n\n    return css => {\n        css.walk(node => {\n            if (node.type === 'decl') {\n                return transformDecl(node, opts);\n            } else if (node.type === 'atrule' && node.name.toLowerCase() === 'namespace') {\n                return transformNamespace(node);\n            }\n        });\n    };\n});\nmodule.exports = exports['default'];"]}