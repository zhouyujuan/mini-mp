{"version":3,"sources":["index.js","lib/map.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nvar _cssnanoUtilGetMatch = require('cssnano-util-get-match');\n\nvar _cssnanoUtilGetMatch2 = _interopRequireDefault(_cssnanoUtilGetMatch);\n\nvar _map = require('./lib/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction evenValues(list, index) {\n    return index % 2 === 0;\n}\n\nconst repeatKeywords = _map2.default.map(mapping => mapping[0]);\n\nconst getMatch = (0, _cssnanoUtilGetMatch2.default)(_map2.default);\n\nexports.default = _postcss2.default.plugin('postcss-normalize-repeat-style', () => {\n    return css => {\n        const cache = {};\n\n        css.walkDecls(/background(-repeat)?|(-webkit-)?mask-repeat/i, decl => {\n            const value = decl.value;\n\n            if (cache[value]) {\n                decl.value = cache[value];\n\n                return;\n            }\n\n            const parsed = (0, _postcssValueParser2.default)(value);\n\n            if (parsed.nodes.length === 1) {\n                cache[value] = value;\n\n                return;\n            }\n\n            const args = (0, _cssnanoUtilGetArguments2.default)(parsed);\n            const relevant = [];\n\n            args.forEach(arg => {\n                relevant.push({\n                    start: null,\n                    end: null\n                });\n\n                arg.forEach((part, index) => {\n                    const isRepeat = ~repeatKeywords.indexOf(part.value.toLowerCase());\n                    const len = relevant.length - 1;\n\n                    if (relevant[len].start === null && isRepeat) {\n                        relevant[len].start = index;\n                        relevant[len].end = index;\n\n                        return;\n                    }\n\n                    if (relevant[len].start !== null) {\n                        if (part.type === 'space') {\n                            return;\n                        } else if (isRepeat) {\n                            relevant[len].end = index;\n\n                            return;\n                        }\n\n                        return;\n                    }\n                });\n            });\n\n            relevant.forEach((range, index) => {\n                if (range.start === null) {\n                    return;\n                }\n\n                const val = args[index].slice(range.start, range.end + 1);\n\n                if (val.length !== 3) {\n                    return;\n                }\n\n                const match = getMatch(val.filter(evenValues).map(n => n.value.toLowerCase()));\n\n                if (match) {\n                    args[index][range.start].value = match;\n                    args[index][range.start + 1].value = '';\n                    args[index][range.end].value = '';\n                }\n            });\n\n            const result = parsed.toString();\n\n            decl.value = result;\n            cache[value] = result;\n        });\n    };\n});\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = [['repeat-x', ['repeat', 'no-repeat']], ['repeat-y', ['no-repeat', 'repeat']], ['repeat', ['repeat', 'repeat']], ['space', ['space', 'space']], ['round', ['round', 'round']], ['no-repeat', ['no-repeat', 'no-repeat']]];\nmodule.exports = exports['default'];"]}