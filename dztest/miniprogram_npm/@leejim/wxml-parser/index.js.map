{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["let assert = require('assert').strict;\n\nlet handlerCompany = function(type, ...args) {\n    if (typeof this.handlers['on' + type] === 'function') {\n        this.handlers['on' + type](...args);\n    }\n};\n\nclass WXMLParser {\n    constructor(handlers) {\n        this.handlers = handlers || {};\n    }\n\n    write(source) {\n        this.inputs = source;\n        this.len = source.length || 0;\n        this.pos = 0;\n        this.parseNodes();\n    }\n\n    getNextChar() {\n        return this.inputs[this.pos];\n    }\n\n    startWiths(str) {\n        return this.inputs.substr(this.pos, str.length) === str;\n    }\n\n    isEOF() {\n        return this.pos >= this.len;\n    }\n\n    // consume\n\n    consumeChar() {\n        return this.inputs[this.pos++];\n    }\n\n    consumeWhile(matchFunc) {\n        let result = '';\n        while (!this.isEOF() && matchFunc(this.getNextChar())) {\n            result += this.consumeChar();\n        }\n        return result;\n    }\n\n    consumeWhitespace() {\n        return this.consumeWhile((char) => /\\s/.test(char));\n    }\n\n    // parse\n    parseNodes() {\n        while (!this.isEOF() && !this.startWiths('</')) {\n            this.parseNode();\n        }\n    }\n\n    parseNode() {\n        let nextChar = this.getNextChar();\n        switch (nextChar) {\n            case '{':\n                this.parseTemplate();\n                break;\n            case '<':\n                if (this.startWiths('<!--')) {\n                    this.parseComment();\n                    return;\n                }\n                if (this.startWiths('<wxs')) {\n                    this.parseScript();\n                    return;\n                }\n                // open tag\n                this.parseElement();\n                break;\n            default:\n                this.parseText();\n        }\n    }\n\n    parseScript() {\n        assert.ok(this.consumeChar() === '<');\n        assert.ok(this.consumeChar() === 'w');\n        assert.ok(this.consumeChar() === 'x');\n        assert.ok(this.consumeChar() === 's');\n        this.consumeWhile((char) => char !== '>');\n        assert.ok(this.consumeChar() === '>');\n        let wxs = this.consumeWhile(() => !this.startWiths('</wxs>'));\n        assert.ok(this.consumeChar() === '<');\n        assert.ok(this.consumeChar() === '/');\n        assert.ok(this.consumeChar() === 'w');\n        assert.ok(this.consumeChar() === 'x');\n        assert.ok(this.consumeChar() === 's');\n        assert.ok(this.consumeChar() === '>');\n        return wxs;\n    }\n\n    parseTemplate() {\n        assert.ok(this.consumeChar() === '{');\n        assert.ok(this.consumeChar() === '{');\n        let template = this.consumeWhile((char) => char !== '}');\n        handlerCompany.call(this, 'template', template);\n        assert.ok(this.consumeChar() === '}');\n        assert.ok(this.consumeChar() === '}');\n    }\n\n    parseText() {\n        let text = this.consumeWhile((char) => /[^<{]/.test(char));\n        handlerCompany.call(this, 'text', text);\n        return text;\n    }\n\n    parseComment() {\n        assert.ok(this.consumeChar() === '<');\n        assert.ok(this.consumeChar() === '!');\n        assert.ok(this.consumeChar() === '-');\n        assert.ok(this.consumeChar() === '-');\n        let comment = this.consumeWhile((char) => char !== '-' || !this.startWiths('-->'));\n        handlerCompany.call(this, 'comment', comment);\n        assert.ok(this.consumeChar() === '-');\n        assert.ok(this.consumeChar() === '-');\n        assert.ok(this.consumeChar() === '>');\n        return comment;\n    }\n\n    parseElement() {\n        // open tag\n        assert.ok(this.consumeChar() === '<');\n        let tagName = this.parseTagName();\n        let attrs = this.parseAttrs();\n        let isSelfClosing = false;\n\n        this.consumeWhitespace();\n        if (this.getNextChar() === '/') {\n            // selfClosing\n            isSelfClosing = true;\n        }\n        handlerCompany.call(this, 'opentag', tagName, attrs, isSelfClosing);\n        this.consumeWhile((char) => char !== '>');\n        assert.ok(this.consumeChar() === '>');\n        if (isSelfClosing) {\n            // handlerCompany.call(this, 'closetag', tagName, true);\n            return;\n        }\n\n        this.parseNodes();\n        assert.ok(this.consumeChar() === '<');\n        assert.ok(this.consumeChar() === '/');\n        let closeTagName = this.parseTagName();\n        handlerCompany.call(this, 'closetag', closeTagName, false);\n        assert.ok(this.consumeChar() === '>');\n    }\n\n    parseTagName() {\n        return this.consumeWhile((char) => /[a-zA-Z-]/.test(char));\n    }\n\n    parseAttrs() {\n        this.consumeWhitespace();\n        let attrs = {};\n        while (/[^/>]/.test(this.getNextChar())) {\n            let key = this.consumeWhile((char) => /[^=/>\\s]/.test(char));\n            this.consumeWhitespace();\n            if (this.getNextChar() !== '=') {\n                attrs[key] = '';\n                continue;\n            }\n            assert.ok(this.consumeChar() === '=');\n            this.consumeWhitespace();\n            let quoteMark = this.consumeChar(); // single or double quote marks\n            assert.ok(/['\"]/.test(quoteMark));\n            let val = this.consumeWhile((char) => char !== quoteMark);\n            assert.ok(this.consumeChar() === quoteMark);\n            attrs[key] = val;\n            this.consumeWhitespace();\n        }\n        return attrs;\n    }\n}\n\nmodule.exports = WXMLParser;\n"]}