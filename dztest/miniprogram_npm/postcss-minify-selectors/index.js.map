{"version":3,"sources":["index.js","lib/unquote.js","lib/canUnquote.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _alphanumSort = require(\"alphanum-sort\");\n\nvar _alphanumSort2 = _interopRequireDefault(_alphanumSort);\n\nvar _has = require(\"has\");\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _postcssSelectorParser = require(\"postcss-selector-parser\");\n\nvar _postcssSelectorParser2 = _interopRequireDefault(_postcssSelectorParser);\n\nvar _unquote = require(\"./lib/unquote\");\n\nvar _unquote2 = _interopRequireDefault(_unquote);\n\nvar _canUnquote = require(\"./lib/canUnquote\");\n\nvar _canUnquote2 = _interopRequireDefault(_canUnquote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst pseudoElements = [\"::before\", \"::after\", \"::first-letter\", \"::first-line\"];\n\nfunction getParsed(selectors, callback) {\n    return (0, _postcssSelectorParser2.default)(callback).processSync(selectors);\n}\n\nfunction attribute(selector) {\n    if (selector.value) {\n        // Join selectors that are split over new lines\n        selector.value = selector.value.replace(/\\\\\\n/g, \"\").trim();\n\n        if ((0, _canUnquote2.default)(selector.value)) {\n            selector.value = (0, _unquote2.default)(selector.value);\n        }\n\n        selector.operator = selector.operator.trim();\n    }\n\n    if (!selector.raws) {\n        selector.raws = {};\n    }\n\n    if (!selector.raws.spaces) {\n        selector.raws.spaces = {};\n    }\n\n    selector.raws.spaces.attribute = {\n        before: \"\",\n        after: \"\"\n    };\n\n    selector.raws.spaces.operator = {\n        before: \"\",\n        after: \"\"\n    };\n\n    selector.raws.spaces.value = {\n        before: \"\",\n        after: selector.insensitive ? \" \" : \"\"\n    };\n\n    if (selector.insensitive) {\n        selector.raws.spaces.insensitive = {\n            before: \"\",\n            after: \"\"\n        };\n    }\n\n    selector.attribute = selector.attribute.trim();\n}\n\nfunction combinator(selector) {\n    const value = selector.value.trim();\n\n    selector.value = value.length ? value : \" \";\n}\n\nconst pseudoReplacements = {\n    \":nth-child\": \":first-child\",\n    \":nth-of-type\": \":first-of-type\",\n    \":nth-last-child\": \":last-child\",\n    \":nth-last-of-type\": \":last-of-type\"\n};\n\nfunction pseudo(selector) {\n    const value = selector.value.toLowerCase();\n\n    if (selector.nodes.length === 1 && pseudoReplacements[value]) {\n        const first = selector.at(0);\n        const one = first.at(0);\n\n        if (first.length === 1) {\n            if (one.value === \"1\") {\n                selector.replaceWith(_postcssSelectorParser2.default.pseudo({\n                    value: pseudoReplacements[value]\n                }));\n            }\n\n            if (one.value.toLowerCase() === \"even\") {\n                one.value = \"2n\";\n            }\n        }\n\n        if (first.length === 3) {\n            const two = first.at(1);\n            const three = first.at(2);\n\n            if (one.value.toLowerCase() === \"2n\" && two.value === \"+\" && three.value === \"1\") {\n                one.value = \"odd\";\n\n                two.remove();\n                three.remove();\n            }\n        }\n\n        return;\n    }\n\n    const uniques = [];\n\n    selector.walk(child => {\n        if (child.type === \"selector\") {\n            const childStr = String(child);\n\n            if (!~uniques.indexOf(childStr)) {\n                uniques.push(childStr);\n            } else {\n                child.remove();\n            }\n        }\n    });\n\n    if (~pseudoElements.indexOf(value)) {\n        selector.value = selector.value.slice(1);\n    }\n}\n\nconst tagReplacements = {\n    from: \"0%\",\n    \"100%\": \"to\"\n};\n\nfunction tag(selector) {\n    const value = selector.value.toLowerCase();\n\n    if ((0, _has2.default)(tagReplacements, value)) {\n        selector.value = tagReplacements[value];\n    }\n}\n\nfunction universal(selector) {\n    const next = selector.next();\n\n    if (next && next.type !== \"combinator\") {\n        selector.remove();\n    }\n}\n\nconst reducers = {\n    attribute,\n    combinator,\n    pseudo,\n    tag,\n    universal\n};\n\nexports.default = (0, _postcss.plugin)(\"postcss-minify-selectors\", () => {\n    return css => {\n        const cache = {};\n\n        css.walkRules(rule => {\n            const selector = rule.raws.selector && rule.raws.selector.value === rule.selector ? rule.raws.selector.raw : rule.selector;\n\n            // If the selector ends with a ':' it is likely a part of a custom mixin,\n            // so just pass through.\n            if (selector[selector.length - 1] === \":\") {\n                return;\n            }\n\n            if (cache[selector]) {\n                rule.selector = cache[selector];\n\n                return;\n            }\n\n            const optimizedSelector = getParsed(selector, selectors => {\n                selectors.nodes = (0, _alphanumSort2.default)(selectors.nodes, { insensitive: true });\n\n                const uniqueSelectors = [];\n\n                selectors.walk(sel => {\n                    const { type } = sel;\n\n                    // Trim whitespace around the value\n                    sel.spaces.before = sel.spaces.after = \"\";\n\n                    if ((0, _has2.default)(reducers, type)) {\n                        reducers[type](sel);\n\n                        return;\n                    }\n\n                    const toString = String(sel);\n\n                    if (type === \"selector\" && sel.parent.type !== \"pseudo\") {\n                        if (!~uniqueSelectors.indexOf(toString)) {\n                            uniqueSelectors.push(toString);\n                        } else {\n                            sel.remove();\n                        }\n                    }\n                });\n            });\n\n            rule.selector = optimizedSelector;\n            cache[selector] = optimizedSelector;\n        });\n    };\n});\nmodule.exports = exports[\"default\"];","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = string => string.replace(/[\"']/g, '');\n\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = canUnquote;\n\nvar _unquote = require('./unquote');\n\nvar _unquote2 = _interopRequireDefault(_unquote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Can unquote attribute detection from mothereff.in\n * Copyright Mathias Bynens <https://mathiasbynens.be/>\n * https://github.com/mathiasbynens/mothereff.in\n */\nconst escapes = /\\\\([0-9A-Fa-f]{1,6})[ \\t\\n\\f\\r]?/g;\nconst range = /[\\u0000-\\u002c\\u002e\\u002f\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u009f]/;\n\nfunction canUnquote(value) {\n    value = (0, _unquote2.default)(value);\n    if (value === '-' || value === '') {\n        return false;\n    }\n    value = value.replace(escapes, 'a').replace(/\\\\./g, 'a');\n    return !(range.test(value) || /^(?:-?\\d|--)/.test(value));\n}\nmodule.exports = exports['default'];"]}