{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst OVERRIDABLE_RULES = ['keyframes', 'counter-style'];\nconst SCOPE_RULES = ['media', 'supports'];\n\nfunction isOverridable(name) {\n    return ~OVERRIDABLE_RULES.indexOf(_postcss2.default.vendor.unprefixed(name.toLowerCase()));\n}\n\nfunction isScope(name) {\n    return ~SCOPE_RULES.indexOf(_postcss2.default.vendor.unprefixed(name.toLowerCase()));\n}\n\nfunction getScope(node) {\n    let current = node.parent;\n    const chain = [node.name.toLowerCase(), node.params];\n    do {\n        if (current.type === 'atrule' && isScope(current.name)) {\n            chain.unshift(current.name + ' ' + current.params);\n        }\n        current = current.parent;\n    } while (current);\n    return chain.join('|');\n}\n\nexports.default = _postcss2.default.plugin('postcss-discard-overridden', () => {\n    return css => {\n        const cache = {};\n        const rules = [];\n        css.walkAtRules(node => {\n            if (isOverridable(node.name)) {\n                const scope = getScope(node);\n                cache[scope] = node;\n                rules.push({\n                    node,\n                    scope\n                });\n            }\n        });\n        rules.forEach(rule => {\n            if (cache[rule.scope] !== rule.node) {\n                rule.node.remove();\n            }\n        });\n    };\n});\nmodule.exports = exports['default'];"]}